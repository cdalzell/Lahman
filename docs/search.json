[{"path":"http://cdalzell.github.io/Lahman/ANNOUNCE.html","id":"lahman-package-v-1200-released-to-cran","dir":"","previous_headings":"","what":"Lahman package v. 12.0.0 released to CRAN","title":"NA","text":"Team Lahman pleased announce v. 12.0.0 Lahamn package now CRAN. contains data Sean Lahman’s Baseball Database, https://www.seanlahman.com/baseball-archive/statistics/ collection data frames covering nearly aspects baseball statistics 1871-2023. release, data sets updated data 2023 baseball season. addition, numerous corrections data errors inconsistencies discovered previous year tables applied. Documentation examples now provided data tables. Documentation examples rewritten make extensive use dplyr data manipulation ggplot2 graphics.","code":""},{"path":"http://cdalzell.github.io/Lahman/ANNOUNCE.html","id":"development","dir":"","previous_headings":"Lahman package v. 12.0.0 released to CRAN","what":"Development","title":"NA","text":"development package takes place Github, https://github.com/cdalzell/Lahman. Major versions R package released year, following release new archive update Sean Lahman’s site. R release occurs sufficient time elapsed correct errors source data new season. Minor versions may released time time correct errors R version add functionality. Please report problems issues new version issue site, https://github.com/cdalzell/Lahman/issues exists old pseudo-wiki R-Forge, https://lahman.r-forge.r-project.org/ collects additional analyses visualizations. – Team Lahman: Chris Dalzell (maintainer), Michael Friendly (author), Denis Murphy, Martin Monkman, Sean Lahman","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/hits-by-type.html","id":"the-batting-data","dir":"Articles","previous_headings":"","what":"The Batting data","title":"Graphs of Hits By Type in MLB","text":"First, load Batting data Lahman package. also need load dplyr package can sort organize data. batting data much need.","code":"library(\"dplyr\") data(Batting, package=\"Lahman\") str(Batting) #take a look at the data ## 'data.frame':    113799 obs. of  22 variables: ##  $ playerID: chr  \"aardsda01\" \"aardsda01\" \"aardsda01\" \"aardsda01\" ... ##  $ yearID  : int  2004 2006 2007 2008 2009 2010 2012 2013 2015 1954 ... ##  $ stint   : int  1 1 1 1 1 1 1 1 1 1 ... ##  $ teamID  : Factor w/ 149 levels \"ALT\",\"ANA\",\"ARI\",..: 117 35 33 16 116 116 93 94 4 80 ... ##  $ lgID    : Factor w/ 7 levels \"AA\",\"AL\",\"FL\",..: 5 5 2 2 2 2 2 5 5 5 ... ##  $ G       : int  11 45 25 47 73 53 1 43 33 122 ... ##  $ AB      : int  0 2 0 1 0 0 0 0 1 468 ... ##  $ R       : int  0 0 0 0 0 0 0 0 0 58 ... ##  $ H       : int  0 0 0 0 0 0 0 0 0 131 ... ##  $ X2B     : int  0 0 0 0 0 0 0 0 0 27 ... ##  $ X3B     : int  0 0 0 0 0 0 0 0 0 6 ... ##  $ HR      : int  0 0 0 0 0 0 0 0 0 13 ... ##  $ RBI     : int  0 0 0 0 0 0 0 0 0 69 ... ##  $ SB      : int  0 0 0 0 0 0 0 0 0 2 ... ##  $ CS      : int  0 0 0 0 0 0 0 0 0 2 ... ##  $ BB      : int  0 0 0 0 0 0 0 0 0 28 ... ##  $ SO      : int  0 0 0 1 0 0 0 0 1 39 ... ##  $ IBB     : int  0 0 0 0 0 0 0 0 0 NA ... ##  $ HBP     : int  0 0 0 0 0 0 0 0 0 3 ... ##  $ SH      : int  0 1 0 0 0 0 0 0 0 6 ... ##  $ SF      : int  0 0 0 0 0 0 0 0 0 4 ... ##  $ GIDP    : int  0 0 0 0 0 0 0 0 0 13 ..."},{"path":"http://cdalzell.github.io/Lahman/articles/hits-by-type.html","id":"data-munging","dir":"Articles","previous_headings":"The Batting data","what":"Data munging","title":"Graphs of Hits By Type in MLB","text":"take full Batting data frame select need use. want data frame shows us year, followed total hits year, singles, doubles, triples home runs. Singles column data frame, need add taking total hits (H), subtracting types hits . mutate function math us adds column . Now, just select variables want plot data wide format right now. need long format can use ggplot make graph. reshape2 package easily. want melt data frame, keep YearID ID variable (meaning stays put ’s column). , look data make sure ’s want.","code":"batting <- Batting %>%    # select the variables that we want left after we filter the data   select(yearID, H, X2B, X3B, HR) %>%   # select the years from 1871+   filter(yearID >= 1871) %>%    group_by(yearID) %>% #  summarise_each(funs(sum(., na.rm=TRUE))) %>%    summarise_all(funs(sum(., na.rm=TRUE))) %>%    # we summarize by year, and then na.rm takes care of 0's in the data   mutate(X1 = H-(X2B+X3B+HR)) %>% #create a column for singles   # we eventually want these as a percentage of hits, so we can do the math now    mutate(Single = X1/H*100) %>%    mutate(Double = X2B/H*100) %>%    mutate(Triple = X3B/H*100) %>%    mutate(HomeRun = HR/H*100) bat <- batting %>%    select(yearID, Single, Double, Triple, HomeRun) #this makes a nice looking data frame before we move on library(reshape2) bat_long <- melt(bat, id.vars = c(\"yearID\")) head(bat_long) ##   yearID variable value ## 1   1871   Single 76.78 ## 2   1872   Single 82.92 ## 3   1873   Single 83.19 ## 4   1874   Single 83.38 ## 5   1875   Single 83.09 ## 6   1876   Single 84.00"},{"path":"http://cdalzell.github.io/Lahman/articles/hits-by-type.html","id":"graphs","dir":"Articles","previous_headings":"","what":"Graphs","title":"Graphs of Hits By Type in MLB","text":"look hits per year line graph, use ggplot2. data called bat_long, variables interest year (yearID), percentage type hit (value), type hit (variable). can use geom_line make titles xlab, ylab, ggtitle. Instead using default scaling, can set scale_x scale_y. guides function tells ggplot want legend overrides default. want singles bottom (reverse legend automatically opposite), want set title legend.","code":"library(ggplot2) hitsperyear <- ggplot(bat_long, aes(x=yearID, y= value, col=variable)) +        geom_line() +    xlab(\"Major League Baseball Season\") +    ylab(\"Percentage\") +    ggtitle(\"Hits by Type in Major League Baseball\") +    scale_x_continuous(breaks = c(1870, 1885, 1900, 1915, 1930, 1945,                                  1960, 1975, 1990, 2005, 2020 )) +    scale_y_continuous(breaks = c(0, 25, 50, 75, 100))+   guides(colour=guide_legend(reverse=TRUE,                               aes(ggtitle= \"Type of Hit\"))) hitsperyear"},{"path":"http://cdalzell.github.io/Lahman/articles/hits-by-type.html","id":"add-trend-lines","dir":"Articles","previous_headings":"Graphs","what":"Add trend lines","title":"Graphs of Hits By Type in MLB","text":"can see overall trends clearly adding linear regression lines type hit.  , percentage singles triples declined time, percentage doubles home runs increased. Can think reason ?","code":"hitsperyear + geom_smooth(method=\"lm\")"},{"path":"http://cdalzell.github.io/Lahman/articles/hits-by-type.html","id":"further-analyses-your-turn","dir":"Articles","previous_headings":"","what":"Further analyses: Your turn","title":"Graphs of Hits By Type in MLB","text":"questions provoke analyses data sets. find something interesting, post Github Gist forward Team Lahman Lahman issue. analysis uses total hits players teams time. problems might analysis? Examine data possible outliers unusual observations. make sense exclude players fewer number plate appearances (AB) given year?","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"the-data-files","dir":"Articles","previous_headings":"","what":"The data files","title":"Team Payroll and the World Series","text":"Start loading files use . pre-processing make convenient analyses done later.","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"the-salaries-data","dir":"Articles","previous_headings":"The data files","what":"The Salaries data","title":"Team Payroll and the World Series","text":"Salaries data.frame contains data players’ salaries 1985-2016 latest release, v. 12.0.0, Lahman package. (Additions Salaries table San Lahman’s database discontinued 2016.) use sample_n function display random sample observations.","code":"data(\"Salaries\", package=\"Lahman\") str(Salaries) ## 'data.frame':    26428 obs. of  5 variables: ##  $ yearID  : int  1985 1985 1985 1985 1985 1985 1985 1985 1985 1985 ... ##  $ teamID  : Factor w/ 35 levels \"ANA\",\"ARI\",\"ATL\",..: 3 3 3 3 3 3 3 3 3 3 ... ##  $ lgID    : Factor w/ 2 levels \"AL\",\"NL\": 2 2 2 2 2 2 2 2 2 2 ... ##  $ playerID: chr  \"barkele01\" \"bedrost01\" \"benedbr01\" \"campri01\" ... ##  $ salary  : int  870000 550000 545000 633333 625000 800000 150000 483333 772000 250000 ... sample_n(Salaries, 10) ##    yearID teamID lgID  playerID   salary ## 1    1995    BAL   AL benitar01   125000 ## 2    1995    NYA   AL fernato01  1633335 ## 3    1994    PHI   NL chambwe01   350000 ## 4    1995    OAK   AL aldremi01   430000 ## 5    2013    NYN   NL wrighda03 10192071 ## 6    1996    SEA   AL strando01   380000 ## 7    1986    BOS   AL hoffmgl01   350000 ## 8    2003    MIL   NL sexsori01  5125000 ## 9    1998    NYA   AL seabosc01   170000 ## 10   1986    ML4   AL higuete01   195000"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"the-teams-data","dir":"Articles","previous_headings":"The data files","what":"The Teams data","title":"Team Payroll and the World Series","text":"Teams data.frame contains lot information teams ever played, separate observation year. , mainly use get team name (team) teamID also get information World Series winners. going use observations 1985 , variables, filter select now. Keep levels teamID data.","code":"data(\"Teams\", package=\"Lahman\") dim(Teams) ## [1] 3045   48 names(Teams) ##  [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"       ##  [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"          ##  [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"          ## [13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"             ## [17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"             ## [21] \"BB\"             \"SO\"             \"SB\"             \"CS\"             ## [25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"             ## [29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"             ## [33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"            ## [37] \"SOA\"            \"E\"              \"DP\"             \"FP\"             ## [41] \"name\"           \"park\"           \"attendance\"     \"BPF\"            ## [45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\" Teams <- Teams %>%   select(yearID, lgID, teamID, name, divID, Rank, WSWin, attendance) %>%   filter(yearID >= 1985) %>%   mutate(teamID = droplevels(teamID))  sample_n(Teams, 10) ##    yearID lgID teamID                name divID Rank WSWin attendance ## 1    1999   NL    LAN Los Angeles Dodgers     W    3     N    3095346 ## 2    2016   AL    SEA    Seattle Mariners     W    2     N    2267928 ## 3    1988   NL    MON      Montreal Expos     E    3     N    1478659 ## 4    2010   NL    CIN     Cincinnati Reds     C    1     N    2060550 ## 5    1997   AL    DET      Detroit Tigers     E    3     N    1365157 ## 6    2023   AL    DET      Detroit Tigers     C    2     N    1612876 ## 7    2015   NL    PIT  Pittsburgh Pirates     C    2     N    2498596 ## 8    1995   AL    DET      Detroit Tigers     E    4     N    1180979 ## 9    1992   AL    BOS      Boston Red Sox     E    7     N    2468574 ## 10   2005   NL    ATL      Atlanta Braves     E    1     N    2521167"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"the-seriespost-data","dir":"Articles","previous_headings":"The data files","what":"The SeriesPost data","title":"Team Payroll and the World Series","text":"Post season records go back 1884. 389 observations covering aspects post-season play. year, number observations various levels post-season play (Division titles, League titles, etc. number designations changed years, don’t know mean.) interested World Series (WS), first played 1903. filter years salary data, drop couple variables. league IDs winner loser factors, use droplevels include levels recent history.","code":"data(\"SeriesPost\", package=\"Lahman\") names(SeriesPost) ## [1] \"yearID\"       \"round\"        \"teamIDwinner\" \"lgIDwinner\"   \"teamIDloser\"  ## [6] \"lgIDloser\"    \"wins\"         \"losses\"       \"ties\" table(SeriesPost$round) ##  ## AEDIV  ALCS ALDS1 ALDS2  ALWC ALWC1 ALWC2 ALWC3 ALWC4 AWDIV    CS NEDIV  NLCS  ##     1    54    29    29     9     3     3     1     1     1     1     1    54  ## NLDS1 NLDS2  NLWC NLWC1 NLWC2 NLWC3 NLWC4 NWDIV    WS  ##    29    29     9     3     3     1     1     1   126 WS <- SeriesPost %>%   filter(yearID >= 1985 & round == \"WS\") %>%   select(-ties, -round) %>%   mutate(lgIDloser = droplevels(lgIDloser),          lgIDwinner = droplevels(lgIDwinner)) dim(WS) ## [1] 38  7 sample_n(WS, 6) ##   yearID teamIDwinner lgIDwinner teamIDloser lgIDloser wins losses ## 1   1988          LAN         NL         OAK        AL    4      1 ## 2   2023          TEX         AL         ARI        NL    4      1 ## 3   2006          SLN         NL         DET        AL    4      1 ## 4   2005          CHA         AL         HOU        NL    4      0 ## 5   1987          MIN         AL         SLN        NL    4      3 ## 6   2016          CHN         NL         CLE        AL    4      3"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"a-first-look-at-salaries","dir":"Articles","previous_headings":"","what":"A first look at Salaries","title":"Team Payroll and the World Series","text":"many players year? range salaries, across years? , year year? Hmm, salary==0 1993, maybe others. ? (also look playerIDs Lahman::People.) must errors. Get rid . Reminder: Check ; maybe file issue Lahman package!","code":"table(Salaries$yearID) ##  ## 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000  ##  550  738  627  663  711  867  685  769  923  884  986  931  925  998 1006  836  ## 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016  ##  860  846  827  831  831  819  842  856  813  830  839  848  815  802  817  853 range(Salaries$salary) ## [1]        0 33000000 Salaries %>%    group_by(yearID) %>%    summarise(min=min(salary),             max=max(salary)) ## # A tibble: 32 × 3 ##    yearID    min     max ##     <int>  <int>   <int> ##  1   1985  60000 2130300 ##  2   1986  60000 2800000 ##  3   1987  62500 2127333 ##  4   1988  62500 2340000 ##  5   1989  62500 2766667 ##  6   1990 100000 3200000 ##  7   1991 100000 3800000 ##  8   1992 109000 6100000 ##  9   1993      0 6200000 ## 10   1994  50000 6300000 ## # ℹ 22 more rows which(Salaries$salary==0) ## [1]  6180 12008 Salaries[which(Salaries$salary==0),] ##       yearID teamID lgID  playerID salary ## 6180    1993    NYA   AL jamesdi01      0 ## 12008   1999    PIT   NL martija02      0 Salaries <- Salaries %>%     filter(salary !=0)"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"get-team-payrolls","dir":"Articles","previous_headings":"A first look at Salaries","what":"Get team payrolls","title":"Team Payroll and the World Series","text":"want sum salary team year. might well make millions. zeros hurt eyes.","code":"payroll <- Salaries %>%                 group_by(teamID, yearID) %>%                 summarise(payroll = sum(salary)/1000000) head(payroll) ## # A tibble: 6 × 3 ## # Groups:   teamID [1] ##   teamID yearID payroll ##   <fct>   <int>   <dbl> ## 1 ANA      1997    31.1 ## 2 ANA      1998    41.3 ## 3 ANA      1999    55.4 ## 4 ANA      2000    51.5 ## 5 ANA      2001    47.5 ## 6 ANA      2002    61.7"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"merge-team-names-into-payroll","dir":"Articles","previous_headings":"A first look at Salaries","what":"Merge team names into payroll","title":"Team Payroll and the World Series","text":"convenient team names included payroll data.frame. Teams data frame also contains Y/N indicator WSWin World Series winners, might well include . Note also using left_join dplyr package. probably tidy way subset variables Teams data set using Teams[, c()], , hey– works. WSWin character variable. Convert factor. Check values: something wrong ! shouldn’t NAs. leave study, another Reminder file issue figure problem .","code":"payroll <- merge(payroll, Teams[,c(\"yearID\", \"teamID\",\"name\", \"WSWin\")],                   by=c(\"yearID\", \"teamID\"))  sample_n(payroll, 10) ##    yearID teamID payroll                          name WSWin ## 1    2006    MIN   63.40               Minnesota Twins     N ## 2    2007    MIL   70.99             Milwaukee Brewers     N ## 3    2016    LAA  137.25 Los Angeles Angels of Anaheim     N ## 4    2005    OAK   55.43             Oakland Athletics     N ## 5    2003    FLO   49.45               Florida Marlins     Y ## 6    2009    COL   75.20              Colorado Rockies     N ## 7    2000    MIL   36.51             Milwaukee Brewers     N ## 8    1999    ANA   55.39                Anaheim Angels     N ## 9    2013    NYA  231.98              New York Yankees     N ## 10   1989    CAL   15.10             California Angels     N left_join(payroll, Teams[,c(\"yearID\", \"teamID\",\"name\", \"WSWin\")],            by=c(\"yearID\", \"teamID\")) %>%    sample_n(10) payroll <- payroll %>%   mutate(WSWin = factor(WSWin)) table(payroll$WSWin, useNA=\"ifany\") ##  ##    N    Y <NA>  ##  859   31   28"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"boxplots-of-payroll","dir":"Articles","previous_headings":"","what":"Boxplots of payroll","title":"Team Payroll and the World Series","text":"Let’s look distributions payroll year. observations teams. outliers? teams crop repeatedly? car::Boxplot makes easy, also returns labels outliers. don’t load car package, car also contains Salary dataset.  outliers New York Yankees (NYA): Payroll obviously increased dramatically time. variability across teams. modelling, probably want use \\log(payroll). might also want look separately American National leagues.","code":"boxplot(payroll ~ yearID, data=payroll, ylab=\"Payroll ($ millions)\") out <- car::Boxplot(payroll ~ yearID, data=payroll,              id=list(n=1,                       labels=as.character(payroll$teamID)),               ylab=\"Payroll ($ millions)\") table(out) ## out ## CLE LAN MON NYA PIT SEA  ##   1   2   1  11   1   1"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"correcting-for-inflation","dir":"Articles","previous_headings":"Boxplots of payroll","what":"Correcting for inflation","title":"Team Payroll and the World Series","text":"proper comparisons, correct inflation. Lets scaling salary back 1985 dollars, data gives inflation rates subsequent years. comes Nolan & Lang, extended 2015 using (https://www.in2013dollars.com/).  close enough linear, use linear regression predicted value simple computation inflation rate. (better way, course, use actual inflation rate; entail merging payroll inflation.df year, computation.) Scale payroll dividing linear prediction inflation rate, producing payrollStd. Boxplot , inflation-adjusted payroll. increase 2000 doesn’t seem large.","code":"inflation = c(1,    1.02, 1.06, 1.10, 1.15, 1.21,                1.27, 1.30, 1.34, 1.38, 1.42, 1.46, 1.49, 1.51, 1.55, 1.60,               1.65, 1.67, 1.71, 1.76, 1.82, 1.87, 1.93, 2.00, 1.99, 2.03,               2.09, 2.13, 2.16, 2.20, 2.20 )  inflation.df <- data.frame(year=1985:2015, inflation)  # plot inflation rate ggplot(inflation.df, aes(y=inflation, x=year)) +   geom_point() +   geom_line() +   geom_smooth(method=\"lm\") infl.lm <- lm(inflation ~ year, data=inflation.df) (coefs <- coef(infl.lm)) ## (Intercept)        year  ##   -81.57032     0.04159 payroll <- payroll %>%   mutate(payrollStd = payroll / (coefs[1] + coefs[2] * yearID)) car::Boxplot(payrollStd ~ yearID, data=payroll,              id = list(labels=as.character(payroll$teamID)),               ylab=\"Payroll (1985-adjusted $ millions)\") ##  [1] \"SEA\" \"CLE\" \"MON\" \"PIT\" \"NYA\" \"NYA\" \"NYA\" \"NYA\" \"NYA\" \"NYA\" \"NYA\" \"NYA\" ## [13] \"NYA\" \"NYA\" \"LAN\" \"NYA\" \"LAN\" \"NYA\" \"BOS\" \"DET\" \"LAN\" \"NYA\""},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"salaries-of-world-series-winning-teams","dir":"Articles","previous_headings":"","what":"Salaries of World Series winning teams","title":"Team Payroll and the World Series","text":"extent World Series winners among highest payroll? simple way look plot team payrolls across years, mark World Series winner year. plot shows inflation-adjusted payroll log scale avoid dominating influence recent years. jitter points avoid overplotting, use transparent gray color non-winners, red winner year.  large, World Series winners tend upper portion payrolls year.","code":"Cols <- ifelse(payroll$WSWin=='Y', \"red\", gray(.7, alpha=0.5)) with(payroll, {   plot(payrollStd ~ jitter(yearID, 0.5),         ylab = \"Payroll (inflation-adjusted $ millions)\",        ylim = c(5,125), log = \"y\",        xlab = \"Year\",        pch = 19, cex = 0.8, col = Cols) }) with(payroll[payroll$WSWin == 'Y',],      text(y = payrollStd, x = yearID, labels = teamID, pos = 3, cex = 0.8) )"},{"path":"http://cdalzell.github.io/Lahman/articles/payroll.html","id":"further-analyses-your-turn","dir":"Articles","previous_headings":"","what":"Further analyses: Your turn","title":"Team Payroll and the World Series","text":"questions provoke analyses data sets. find something interesting, post Github Gist forward Team Lahman Lahman issue. boxplots used total payroll millions. plots clearer plotted payroll log scale? Follow-suggestion fit linear model predicting log(payroll) available predictors. Examine trend team salaries time World Series losers. look different winning teams? kind analysis address statement: “teams make World series, one larger payroll likely win.” relationship number team wins season winning World series?","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/run-scoring-trends.html","id":"run-scoring-trends-sub-titles-and-captions-with-ggplot2","dir":"Articles","previous_headings":"","what":"Run scoring trends: Sub-titles and captions with ggplot2","title":"Run Scoring Trends","text":"vignette demonstrates create plot (using ggplot2) showing Major League Baseball runscoring trends since 1901 season. First, load necessary packages: Lahman (containing baseball data), ggplot2 create plots, data carpentry package dplyr (note ggplot2 dplyr included tidyverse package):","code":"# package load  library(Lahman) library(ggplot2) library(dplyr)"},{"path":"http://cdalzell.github.io/Lahman/articles/run-scoring-trends.html","id":"read-and-summarize-the-data","dir":"Articles","previous_headings":"Run scoring trends: Sub-titles and captions with ggplot2","what":"Read and summarize the data","title":"Run Scoring Trends","text":"example, ’ll use data table Teams Lahman database. ’s loaded, data filtered summarized using dplyr. filters 1901 (establishment American League) recent year, filters (using !=) Federal League grouping year, summarizes total number runs scored, runs allowed, games played finally, calculates league runs (leagueRPG) runs allowed (leagueRAPG) per game","code":"data(Teams)   MLB_RPG <- Teams %>%   filter(yearID > 1900, lgID != \"FL\") %>%   group_by(yearID) %>%   summarise(R=sum(R), RA=sum(RA), G=sum(G)) %>%   mutate(leagueRPG=R/G, leagueRAPG=RA/G)"},{"path":"http://cdalzell.github.io/Lahman/articles/run-scoring-trends.html","id":"a-basic-plot","dir":"Articles","previous_headings":"Run scoring trends: Sub-titles and captions with ggplot2","what":"A basic plot","title":"Run Scoring Trends","text":"may heard run scoring Major League Baseball recent years–going back ? perfect opportunity visualize date; can see plot? first version plot, ’ll make basic X-Y plot, X axis years Y axis average number runs scored. ggplot2, ’s easy add trend line (using geom_smooth option). scale_x_continuous options set limits breaks axes.  way set title, along X Y axis labels, something like .","code":"MLBRPGplot <- ggplot(MLB_RPG, aes(x=yearID, y=leagueRPG)) +   geom_point() +   geom_smooth(span = 0.25) +   scale_x_continuous(breaks = seq(1900, 2015, by = 20)) +   scale_y_continuous(limits = c(3, 6), breaks = seq(3, 6, by = 1))  MLBRPGplot MLBRPGplot +   ggtitle(\"MLB run scoring, 1901-2016\") +   theme(plot.title = element_text(hjust=0, size=16)) +   xlab(\"year\") +   ylab(\"team runs per game\")"},{"path":"http://cdalzell.github.io/Lahman/articles/run-scoring-trends.html","id":"adding-a-subtitle-the-function","dir":"Articles","previous_headings":"Run scoring trends: Sub-titles and captions with ggplot2","what":"Adding a subtitle: the function","title":"Run Scoring Trends","text":"now nice looking dot plot showing average number runs scored per game years 1901-2016. (2016 data recent added database.) popular feature charts–particularly magazines–subtitle summary chart shows /author wants emphasize. case, legitimately say something like following: peak run scoring 2000 season followed steady drop Teams scored 20% fewer runs 2016 2000 Team run scoring fallen just 4 runs per game 2000 peak 5 runs Run scoring falling 15 years, reversing 30 year upward trend like last one, drawing attention recent decline also longer trend started low-scoring environment 1968. can add subtitle chart , well caption acknowledges source data? new labs function, available starting ggplot2 version 2.2.0, lets us . Note labs contains title, subtitle, caption, well X Y axis labels.  Easy. information labs function ggplot2, “Modify axis, legend, plot labels” reference page within ggplot2 site, part Tidyverse. vignette update blog posts: Major League Baseball run scoring trends R’s Lahman package Run scoring trends: using Shiny create dynamic charts tables R github.com/MonkmanMH/MLBrunscoring_shiny","code":"MLBRPGplot +   labs(title = \"MLB run scoring, 1901-2016\",        subtitle = \"Run scoring in 2016 was the highest in seven years\",        caption = \"Source: the Lahman baseball database\",         x = \"year\", y = \"team runs per game\")"},{"path":"http://cdalzell.github.io/Lahman/articles/strikeoutsandhr.html","id":"the-data-files","dir":"Articles","previous_headings":"","what":"The data files","title":"Relationship Between Strikeouts and Home Runs","text":"Start loading files use . pre-processing make convenient analyses done later.","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/strikeoutsandhr.html","id":"the-batting-data","dir":"Articles","previous_headings":"The data files","what":"The Batting data","title":"Relationship Between Strikeouts and Home Runs","text":"Batting table contains batting data team level going back 1871, separate observation year. file available using newest v. 12.0.0, Lahman package. use get everything need analysis: bats (AB) strikeouts (), home runs (HR) teams since year 1950+. using part table, filter data set include variables need. ’ll also create new data frame includes data year 1950+. Batting table also multiple listings year, ’ll collapse using summarize function. Last, mutate variables home runs strikeouts divided bat, add new columns “rate” “HR rate.” full data frame called FullBatting. ##first look ‘Batting’ total number strikeouts data set? average rate strikeouts per bat? many homeruns data set? average rate home runs per bat? relationship strikeout rate home run rate? According test, significant correlation. p-value equal .001, df= 65. .61 correlation strikeout rate home run rate. can look totals interpretation purposes. see every 6.14 strikeouts, home runs increase 4.14. Create scatterplot ggplot, using rate HR rate.","code":"data(\"Batting\", package=\"Lahman\") # load the data str(Batting) # take a look at the structure of the complete data set, as it is ## 'data.frame':    113799 obs. of  22 variables: ##  $ playerID: chr  \"aardsda01\" \"aardsda01\" \"aardsda01\" \"aardsda01\" ... ##  $ yearID  : int  2004 2006 2007 2008 2009 2010 2012 2013 2015 1954 ... ##  $ stint   : int  1 1 1 1 1 1 1 1 1 1 ... ##  $ teamID  : Factor w/ 149 levels \"ALT\",\"ANA\",\"ARI\",..: 117 35 33 16 116 116 93 94 4 80 ... ##  $ lgID    : Factor w/ 7 levels \"AA\",\"AL\",\"FL\",..: 5 5 2 2 2 2 2 5 5 5 ... ##  $ G       : int  11 45 25 47 73 53 1 43 33 122 ... ##  $ AB      : int  0 2 0 1 0 0 0 0 1 468 ... ##  $ R       : int  0 0 0 0 0 0 0 0 0 58 ... ##  $ H       : int  0 0 0 0 0 0 0 0 0 131 ... ##  $ X2B     : int  0 0 0 0 0 0 0 0 0 27 ... ##  $ X3B     : int  0 0 0 0 0 0 0 0 0 6 ... ##  $ HR      : int  0 0 0 0 0 0 0 0 0 13 ... ##  $ RBI     : int  0 0 0 0 0 0 0 0 0 69 ... ##  $ SB      : int  0 0 0 0 0 0 0 0 0 2 ... ##  $ CS      : int  0 0 0 0 0 0 0 0 0 2 ... ##  $ BB      : int  0 0 0 0 0 0 0 0 0 28 ... ##  $ SO      : int  0 0 0 1 0 0 0 0 1 39 ... ##  $ IBB     : int  0 0 0 0 0 0 0 0 0 NA ... ##  $ HBP     : int  0 0 0 0 0 0 0 0 0 3 ... ##  $ SH      : int  0 1 0 0 0 0 0 0 0 6 ... ##  $ SF      : int  0 0 0 0 0 0 0 0 0 4 ... ##  $ GIDP    : int  0 0 0 0 0 0 0 0 0 13 ... Batting <- Batting %>%   select(yearID, AB, SO, HR) %>% # select the variables that we need   group_by(yearID) %>% # group by year, so that each row is one year   summarise_each(funs(sum)) # we want the sum of AB, HR, and SO in the other rows  FullBatting<- Batting %>% # create a new variable that has SO rate and HR rate   filter(yearID >= 1950) %>% # select the years from 1900+   mutate(SO_rate = (SO/AB)*100, HR_rate = (HR/AB)*100) #add SO rate and HR rate as percentages to our data frame      some(FullBatting) # look at a set of random observations ## # A tibble: 10 × 6 ##    yearID     AB    SO    HR SO_rate HR_rate ##     <int>  <int> <int> <int>   <dbl>   <dbl> ##  1   1953  84997 10213  2076    12.0    2.44 ##  2   1954  83936 10215  1937    12.2    2.31 ##  3   1958  83827 12225  2240    14.6    2.67 ##  4   1963 109814 18773  2704    17.1    2.46 ##  5   1965 109739 19283  2688    17.6    2.45 ##  6   1971 130544 20956  2863    16.1    2.19 ##  7   1977 143975 21722  3644    15.1    2.53 ##  8   1987 144095 25099  4458    17.4    3.09 ##  9   2005 166335 30644  5017    18.4    3.02 ## 10   2011 165705 34488  4552    20.8    2.75 dim(FullBatting) # show the dimensions of the data frame ## [1] 74  6 sum(FullBatting$SO) # find the sum of strikeout column ## [1] 1817705 mean(FullBatting$SO_rate) # find the mean of the strikeout rate column ## [1] 17.68 sum(FullBatting$HR) # find the sum of home run column ## [1] 274273 mean(FullBatting$HR_rate) # find the mean of the home run rate column ## [1] 2.694 corr <- cor.test(FullBatting$SO_rate, FullBatting$HR_rate) corr # find the correlation between strikeout rate and home run rate ##  ##  Pearson's product-moment correlation ##  ## data:  FullBatting$SO_rate and FullBatting$HR_rate ## t = 10, df = 72, p-value = 2e-15 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ##  0.6516 0.8464 ## sample estimates: ##    cor  ## 0.7661 Model_Totals <- lm(SO_rate~HR_rate, data=FullBatting) summary(Model_Totals) # look at the model totals ##  ## Call: ## lm(formula = SO_rate ~ HR_rate, data = FullBatting) ##  ## Residuals: ##    Min     1Q Median     3Q    Max  ## -5.036 -1.619 -0.097  1.258  5.846  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)    2.783      1.499    1.86    0.067 .   ## HR_rate        5.530      0.547   10.11  1.8e-15 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 2.37 on 72 degrees of freedom ## Multiple R-squared:  0.587,  Adjusted R-squared:  0.581  ## F-statistic:  102 on 1 and 72 DF,  p-value: 1.83e-15 plot <- ggplot(FullBatting, aes(x= SO_rate, y= HR_rate))+ geom_point()+    xlab(\"Strikeout Rate\") +   ylab(\"Home Run Rate\") +   ggtitle(\"Relationship Between Strikeouts and Home Runs\") plot + stat_smooth(method= \"lm\") ##stat_smooth fits the model and then we plot the linear regression model"},{"path":"http://cdalzell.github.io/Lahman/articles/vignette-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Vignette Introduction","text":"vignettes serve dual purpose: introduce users Lahman package breadth depth data, range analysis statistical methods can undertaken using data package, introduce users statistical software R, particularly modern use statistics data science encapsulated tidyverse R packages designed facilitate data input manipulation graphics.","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/vignette-intro.html","id":"contents","dir":"Articles","previous_headings":"","what":"Contents","title":"Vignette Introduction","text":"Vignettes completed -date: Relationship Strikeouts Home Runs – vignette looks relationship rate strikeouts home runs year 1950+. question inspired Marchi Albert (2014), Analyzing Baseball Data R. R packages demonstrated: car (Companion Applied Regression) Run Scoring Trends – Major League Baseball average per-game run scoring season since 1901. Team Payroll World Series – vignette examines whether relationship total team salaries (payroll) World Series success.","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/vignette-intro.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Vignette Introduction","text":"number books -line resources use Lahman package material examples. include:","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/vignette-intro.html","id":"books","dir":"Articles","previous_headings":"Further reading","what":"Books","title":"Vignette Introduction","text":"Michael Friendly David Meyer (2016) Discrete Data Analysis R: Visualization Modeling Techniques Categorical Count Data (CRC Press). DDAR Web Site Max Marchi Jim Albert (2014) Analyzing Baseball Data R (CRC Press) book makes frequent reference raw Lahman database files CSV form; Lahman package relatively recent book published, authors make brief mention package. Baseball R blog containing extensions analyses. David Robinson (2017) Introduction Empirical Bayes (published [gumroad.com]) book makes extensive use package explain “empirical Bayesian approach estimation, credible intervals, /B testing, mixture models, methods, example baseball batting averages.” blog introduction book Hadley Wickham Garrett Grolemund (2017) R Data Science: Import, Tidy, Transform, Visualize, Model Data (O’Reilly) Section 5.6.3, “Counts”","code":""},{"path":"http://cdalzell.github.io/Lahman/articles/vignette-intro.html","id":"articles-blog-entries-and-course-materials","dir":"Articles","previous_headings":"Further reading","what":"Articles, blog entries, and course materials","title":"Vignette Introduction","text":"Steven Buechler (2014-2015) Analysis career performance top home run hitters lecture 16 Computing Data Seminar Kris Eberwein (2015-09-30) “Hacking New Lahman Package 4.0-1 R-Studio” (via [r-bloggers.com]) Michael Lopez (2016) Lab materials Skidmore College MA 276, “Sports Statistics” course reference page Bill Petti (2015-09-21) Short(-ish) Introduction Using R Packages Baseball Research Exploring Baseball Data R blog Jim Albert (2018-12-24) Vanishing 300 Batting Average Jim Albert (2015-01-05) Graph Batting Average Brian Mills (2014-09-30) Using ggmap Lahman Find Hometown College Rosters -30-","code":""},{"path":"http://cdalzell.github.io/Lahman/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Friendly. Author. Chris Dalzell. Maintainer, author. Martin Monkman. Author. Dennis Murphy. Author. Vanessa Foot. Contributor. Justeena Zaki-Azat. Contributor. Sean Lahman. Copyright holder.","code":""},{"path":"http://cdalzell.github.io/Lahman/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Friendly M, Dalzell C, Monkman M, Murphy D (2024). Lahman: Sean 'Lahman' Baseball Database. R package version 12.0-0, https://CRAN.R-project.org/package=Lahman.","code":"@Manual{,   title = {Lahman: Sean 'Lahman' Baseball Database},   author = {Michael Friendly and Chris Dalzell and Martin Monkman and Dennis Murphy},   year = {2024},   note = {R package version 12.0-0},   url = {https://CRAN.R-project.org/package=Lahman}, }"},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/index.html","id":"r-library-for-sean-lahmans-baseball-database","dir":"","previous_headings":"","what":"R Library for Sean Lahman’s Baseball Database","title":"Sean Lahman Baseball Database","text":"Version: 12.0-0 Date: 2024-09-24 Authors: Chris Dalzell Michael Friendly Dennis Murphy Martin Monkman Vanessa Foot & Justeena Zaki-Azat [vignettes] Maintainer: Chris Dalzell Copyright: Sean Lahman Required: R (>= 3.5.0) URL: https://CRAN.R-project.org/package=Lahman","code":""},{"path":"http://cdalzell.github.io/Lahman/index.html","id":"current-version","dir":"","previous_headings":"","what":"Current Version","title":"Sean Lahman Baseball Database","text":"R version 2023 edition Sean Lahman’s Baseball Database, http://www.seanlahman.com/. now fully reflects reorganization data tables Lahman’s source, notable renaming old Master table, People Lahman Database. current database schema shown figure :  collection vignettes added, illustrating various data manipulation tasks analyses explore baseball questions. Try: browseVignettes(\"Lahman\") addition, documentation updated use dplyr tidyr tools database manipulation ggplot2 plots.","code":""},{"path":"http://cdalzell.github.io/Lahman/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sean Lahman Baseball Database","text":"current CRAN version, simply use: wish use non-release version Lahman, use dev_mode(). Please report problems issues new version issue site.","code":"install.packages(\"Lahman\") dev_mode() install_github(\"cdalzell/Lahman\", ref=\"insert_branch_name_here\") #  ...test ... dev_mode()  # revert to previous"},{"path":"http://cdalzell.github.io/Lahman/index.html","id":"related","dir":"","previous_headings":"","what":"Related","title":"Sean Lahman Baseball Database","text":"MySQL version Lahman database provided Nat Dunn: https://github.com/WebucatorTraining/lahman-baseball-mysql BaseballDBR package works Lahman & baseball databases provides functions compute baseball metrics. Baseball R blog contains analyses baseball data stemming book Analyzing Baseball Data R (CRC Press, 2014).","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AllstarFull.html","id":null,"dir":"Reference","previous_headings":"","what":"AllstarFull table — AllstarFull","title":"AllstarFull table — AllstarFull","text":"Star appearances players","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AllstarFull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AllstarFull table — AllstarFull","text":"","code":"data(AllstarFull)"},{"path":"http://cdalzell.github.io/Lahman/reference/AllstarFull.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AllstarFull table — AllstarFull","text":"data frame 5673 observations following 8 variables. playerID Player ID code yearID Year gameNum Game number (years one game played) gameID Game ID code teamID Team; factor lgID League; factor levels AL NL GP Game played (zero player appear game) startingPos player started, position played","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AllstarFull.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"AllstarFull table — AllstarFull","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AllstarFull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AllstarFull table — AllstarFull","text":"","code":"data(AllstarFull)  # find number of appearances by players in the All Star games player_appearances <- with(AllstarFull, rev(sort(table(playerID))))  # How many All-Star players, in total? length(player_appearances) #> [1] 1978  # density plot of the whole distribution plot(density(player_appearances), main=\"Player appearances in All Star Games\") rug(jitter(player_appearances))   # who has played in more than 10 ASGs? player_appearances[player_appearances > 10] #> playerID #>  mayswi01 musiast01 aaronha01 willite01 ripkeca01 mantlmi01 yastrca01 robinbr01  #>        26        24        24        19        19        19        18        18  #> kalinal01 carewro01 berrayo01  rosepe01 clemero01 spahnwa01 smithoz01 gwynnto01  #>        18        18        18        17        17        16        15        15  #>   foxne01 aparilu01 rodriiv01 rodrial01 robinfr02 jeterde01 jacksre01 bondsba01  #>        15        15        14        14        14        14        14        14  #> benchjo01 bankser01 riverma01 killeha01 griffke02 dimagjo01 crandde01 cepedor01  #>        14        14        13        13        13        13        13        13  #> cabremi01 brettge01 boyerke01 winfida01 seaveto01 schmimi01 ramirma02 pujolal01  #>        13        13        13        12        12        12        12        12  #> piazzmi01   ottme01 mcgwima01 mazerbi01 matheed01 larkiba01 boggswa01 alomaro01  #>        12        12        12        12        12        12        12        12  #> troutmi01 kershcl01 howarel01 hermabi01 freehbi01  fiskca01 dickebi01 clemero02  #>        11        11        11        11        11        11        11        11  #> cartega01  #>        11  hist(player_appearances[player_appearances > 10])    # Hank Aaron's All-Star record: subset(AllstarFull, playerID == \"aaronha01\") #>       playerID yearID gameNum       gameID teamID lgID GP startingPos #> 26   aaronha01   1957       0 NLS195707090    MLN   NL  1           9 #> 76   aaronha01   1958       0 ALS195807080    MLN   NL  1           9 #> 167  aaronha01   1959       1 NLS195907070    MLN   NL  1           9 #> 168  aaronha01   1959       2 NLS195908030    MLN   NL  1           9 #> 285  aaronha01   1960       1 ALS196007110    MLN   NL  1           9 #> 286  aaronha01   1960       2 ALS196007130    MLN   NL  1           9 #> 401  aaronha01   1961       1 NLS196107110    MLN   NL  1          NA #> 402  aaronha01   1961       2 ALS196107310    MLN   NL  1          NA #> 528  aaronha01   1962       0 NLS196207300    MLN   NL  1          NA #> 591  aaronha01   1963       0 ALS196307090    MLN   NL  1           9 #> 645  aaronha01   1964       0 NLS196407070    MLN   NL  1          NA #> 697  aaronha01   1965       0 ALS196507130    MLN   NL  1           9 #> 746  aaronha01   1966       0 NLS196607120    ATL   NL  1           7 #> 801  aaronha01   1967       0 ALS196707110    ATL   NL  1           8 #> 1193 aaronha01   1968       0 NLS196807090    ATL   NL  1           9 #> 1251 aaronha01   1969       0 ALS196907230    ATL   NL  1           9 #> 1308 aaronha01   1970       0 NLS197007140    ATL   NL  1           9 #> 1369 aaronha01   1971       0 ALS197107130    ATL   NL  1           9 #> 1431 aaronha01   1972       0 NLS197207250    ATL   NL  1           9 #> 1485 aaronha01   1973       0 ALS197307240    ATL   NL  1           3 #> 1552 aaronha01   1974       0 NLS197407230    ATL   NL  1           9 #> 1581 aaronha01   1975       0 ALS197507150    MIL   AL  1          NA #> 2130 aaronha01   1955       0 NLS195507120    MLN   NL  1          NA #> 3594 aaronha01   1956       0 ALS195607100    MLN   NL  1          NA  # Years that Stan Musial played in the ASG: with(AllstarFull, yearID[playerID == \"musiast01\"]) #>  [1] 1957 1958 1959 1959 1960 1960 1961 1961 1962 1962 1963 1951 1952 1953 1954 #> [16] 1955 1943 1944 1946 1947 1948 1949 1950 1956  # Starting positions he played (NA means did not start) with(AllstarFull, startingPos[playerID == \"musiast01\"]) #>  [1]  3  3  3 NA NA NA NA NA NA NA NA  7  8  7  9 NA  7  8  7 NA  7  8  3  9  # All-Star rosters from the 1966 ASG subset(AllstarFull, gameID == \"NLS196607120\") #>      playerID yearID gameNum       gameID teamID lgID GP startingPos #> 714 mclaide01   1966       0 NLS196607120    DET   AL  1           1 #> 715 freehbi01   1966       0 NLS196607120    DET   AL  1           2 #> 716 scottge02   1966       0 NLS196607120    BOS   AL  1           3 #> 717 knoopbo01   1966       0 NLS196607120    CAL   AL  1           4 #> 718 robinbr01   1966       0 NLS196607120    BAL   AL  1           5 #> 719 mcauldi01   1966       0 NLS196607120    DET   AL  1           6 #> 720 robinfr02   1966       0 NLS196607120    BAL   AL  1           7 #> 721 kalinal01   1966       0 NLS196607120    DET   AL  1           8 #> 722 olivato01   1966       0 NLS196607120    MIN   AL  1           9 #> 723  ageeto01   1966       0 NLS196607120    CHA   AL  1          NA #> 724 barbest01   1966       0 NLS196607120    BAL   AL  0          NA #> 725 batteea01   1966       0 NLS196607120    MIN   AL  1          NA #> 726  bellga01   1966       0 NLS196607120    CLE   AL  0          NA #> 727  cashno01   1966       0 NLS196607120    DET   AL  1          NA #> 728 colavro01   1966       0 NLS196607120    CLE   AL  1          NA #> 729 etchean01   1966       0 NLS196607120    BAL   AL  0          NA #> 730 fregoji01   1966       0 NLS196607120    CAL   AL  1          NA #> 731 hunteca01   1966       0 NLS196607120    KC1   AL  0          NA #> 732  kaatji01   1966       0 NLS196607120    MIN   AL  1          NA #> 733 killeha01   1966       0 NLS196607120    MIN   AL  1          NA #> 734 mcdowsa01   1966       0 NLS196607120    CLE   AL  0          NA #> 735 richabo01   1966       0 NLS196607120    NYA   AL  1          NA #> 736 richepe01   1966       0 NLS196607120    WS2   AL  1          NA #> 737 siebeso01   1966       0 NLS196607120    CLE   AL  1          NA #> 738 stottme01   1966       0 NLS196607120    NYA   AL  1          NA #> 739 yastrca01   1966       0 NLS196607120    BOS   AL  0          NA #> 740 koufasa01   1966       0 NLS196607120    LAN   NL  1           1 #> 741 torrejo01   1966       0 NLS196607120    ATL   NL  1           2 #> 742 mccovwi01   1966       0 NLS196607120    SFN   NL  1           3 #> 743 lefebji01   1966       0 NLS196607120    LAN   NL  1           4 #> 744 santoro01   1966       0 NLS196607120    CHN   NL  1           5 #> 745 cardele01   1966       0 NLS196607120    CIN   NL  1           6 #> 746 aaronha01   1966       0 NLS196607120    ATL   NL  1           7 #> 747  mayswi01   1966       0 NLS196607120    SFN   NL  1           8 #> 748 clemero01   1966       0 NLS196607120    PIT   NL  1           9 #> 749 allendi01   1966       0 NLS196607120    PHI   NL  1          NA #> 750  aloufe01   1966       0 NLS196607120    ATL   NL  0          NA #> 751 bunniji01   1966       0 NLS196607120    PHI   NL  1          NA #> 752 floodcu01   1966       0 NLS196607120    SLN   NL  1          NA #> 753 gibsobo01   1966       0 NLS196607120    SLN   NL  0          NA #> 754 halleto01   1966       0 NLS196607120    SFN   NL  0          NA #> 755  hartji01   1966       0 NLS196607120    SFN   NL  1          NA #> 756  huntro01   1966       0 NLS196607120    NYN   NL  1          NA #> 757 maricju01   1966       0 NLS196607120    SFN   NL  1          NA #> 758 mccarti01   1966       0 NLS196607120    SLN   NL  1          NA #> 759 mccoobi01   1966       0 NLS196607120    CIN   NL  0          NA #> 760 morgajo02   1966       0 NLS196607120    HOU   NL  0          NA #> 761 perryga01   1966       0 NLS196607120    SFN   NL  1          NA #> 762 raymocl01   1966       0 NLS196607120    HOU   NL  0          NA #> 763 reganph01   1966       0 NLS196607120    LAN   NL  0          NA #> 764 stargwi01   1966       0 NLS196607120    PIT   NL  1          NA #> 765 vealebo01   1966       0 NLS196607120    PIT   NL  0          NA #> 766 willsma01   1966       0 NLS196607120    LAN   NL  1          NA  # All-Stars from the Washington Nationals subset(AllstarFull, teamID == \"WAS\") #>       playerID yearID gameNum       gameID teamID lgID GP startingPos #> 4311 cordech01   2005       0 ALS200507120    WAS   NL  1          NA #> 4315 hernali01   2005       0 ALS200507120    WAS   NL  1          NA #> 4373 soriaal01   2006       0 NLS200607110    WAS   NL  1           7 #> 4467 youngdm01   2007       0 NLS200707100    WAS   NL  1          NA #> 4514 guzmacr01   2008       0 ALS200807150    WAS   NL  1          NA #> 4605 zimmery01   2009       0 NLS200907140    WAS   NL  1          NA #> 4662 cappsma01   2010       0 ALS201007130    WAS   NL  1          NA #> 4744 clippty01   2011       0 NLS201107120    WAS   NL  1          NA #> 4822 desmoia01   2012       0 ALS201207100    WAS   NL  0          NA #> 4825 gonzagi01   2012       0 ALS201207100    WAS   NL  1          NA #> 4828 harpebr03   2012       0 ALS201207100    WAS   NL  1          NA #> 4842 strasst01   2012       0 ALS201207100    WAS   NL  1          NA #> 4892 harpebr03   2013       0 NLS201307160    WAS   NL  1           8 #> 4921 zimmejo02   2013       0 NLS201307160    WAS   NL  0          NA #> 4978 clippty01   2014       0 ALS201407150    WAS   NL  1          NA #> 5002 zimmejo02   2014       0 ALS201407150    WAS   NL  0          NA #> 5049 harpebr03   2015       0 NLS201507140    WAS   NL  1           9 #> 5074 scherma01   2015       0 NLS201507140    WAS   NL  0          NA #> 5125 harpebr03   2016       0 ALS201607120    WAS   NL  1           9 #> 5148 murphda08   2016       0 ALS201607120    WAS   NL  1          NA #> 5151 ramoswi01   2016       0 ALS201607120    WAS   NL  1          NA #> 5153 scherma01   2016       0 ALS201607120    WAS   NL  1          NA #> 5155 strasst01   2016       0 ALS201607120    WAS   NL  0          NA #> 5196 scherma01   2017       0 NLS201707110    WAS   NL  1           1 #> 5198 zimmery01   2017       0 NLS201707110    WAS   NL  1           3 #> 5199 murphda08   2017       0 NLS201707110    WAS   NL  1           4 #> 5204 harpebr03   2017       0 NLS201707110    WAS   NL  1           9 #> 5225 strasst01   2017       0 NLS201707110    WAS   NL  0          NA #> 5266 scherma01   2018       0 NLS201807170    WAS   NL  1           1 #> 5273 harpebr03   2018       0 NLS201807170    WAS   NL  1           8 #> 5282 doolise01   2018       0 NLS201807170    WAS   NL  0          NA #> 5365 rendoan01   2019       0 ALS201907090    WAS   NL  0          NA #> 5367 scherma01   2019       0 ALS201907090    WAS   NL  0          NA #> 5414 scherma01   2021       0 NLS202107130    WAS   NL  1           1 #> 5447 schwaky01   2021       0 NLS202107130    WAS   NL  0          NA #> 5448  sotoju01   2021       0 NLS202107130    WAS   NL  1          NA #> 5451 turnetr01   2021       0 NLS202107130    WAS   NL  1          NA #> 5514  sotoju01   2022       0 NLS202207190    WAS   NL  1          NA #> 5545  grayjo03   2023       0 ALS202307110    WAS   NL  1          NA #> 5658  sotoju01   2022       0 NLS202207190    WAS   NL  1          NA  # Teams with the fewest All-Stars rare <- names(which(table(AllstarFull$teamID) < 10))  # Records associated with the 'rare' teams: # (There are a few teamID typos: can you spot them?) subset(AllstarFull, teamID %in% rare) #>       playerID yearID gameNum       gameID teamID lgID GP startingPos #> 1225 heganmi01   1969       0 ALS196907230    SE1   AL  0          NA #> 1234 minchdo01   1969       0 ALS196907230    SE1   AL  1          NA"},{"path":"http://cdalzell.github.io/Lahman/reference/Appearances.html","id":null,"dir":"Reference","previous_headings":"","what":"Appearances table — Appearances","title":"Appearances table — Appearances","text":"Data player appearances","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Appearances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appearances table — Appearances","text":"","code":"data(Appearances)"},{"path":"http://cdalzell.github.io/Lahman/reference/Appearances.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Appearances table — Appearances","text":"data frame 113720 observations following 21 variables. yearID Year teamID Team; factor lgID League; factor levels AA AL FL NL PL UA playerID Player ID code G_all Total games played GS Games started G_batting Games player batted G_defense Games player appeared defense G_p Games pitcher G_c Games catcher G_1b Games firstbaseman G_2b Games secondbaseman G_3b Games thirdbaseman G_ss Games shortstop G_lf Games leftfielder G_cf Games centerfielder G_rf Games right fielder G_of Games outfielder G_dh Games designated hitter G_ph Games pinch hitter G_pr Games pinch runner","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Appearances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Appearances table — Appearances","text":"Appearances table original version incorrect variable names. particular, 5th column career_year.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Appearances.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Appearances table — Appearances","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Appearances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Appearances table — Appearances","text":"","code":"data(Appearances) library(\"dplyr\") #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(\"tidyr\")  # Henry Aaron's last two years as a DH in Milwaukee Appearances %>%    filter(playerID == \"aaronha01\" & teamID == \"ML4\") %>%    select(yearID:G_batting, G_of:G_ph)  # subset variables #>   yearID teamID lgID  playerID G_all  GS G_batting G_of G_dh G_ph #> 1   1975    ML4   AL aaronha01   137 129       137    3  127    8 #> 2   1976    ML4   AL aaronha01    85  70        85    1   74   15     # Herb Washington, strictly a pinch runner for Oakland in 1974-5 Appearances %>%    filter(playerID == \"washihe01\")  #>   yearID teamID lgID  playerID G_all GS G_batting G_defense G_p G_c G_1b G_2b #> 1   1974    OAK   AL washihe01    92  0        92         0   0   0    0    0 #> 2   1975    OAK   AL washihe01    13  0        13         0   0   0    0    0 #>   G_3b G_ss G_lf G_cf G_rf G_of G_dh G_ph G_pr #> 1    0    0    0    0    0    0   28    0   92 #> 2    0    0    0    0    0    0    3    0   13  # A true utility player - Jerry Hairston, Jr. Appearances %>%   filter(playerID == \"hairsje02\") #>    yearID teamID lgID  playerID G_all  GS G_batting G_defense G_p G_c G_1b G_2b #> 1    1998    BAL   AL hairsje02     6   2         6         4   0   0    0    4 #> 2    1999    BAL   AL hairsje02    50  49        50        50   0   0    0   50 #> 3    2000    BAL   AL hairsje02    49  49        49        49   0   0    0   49 #> 4    2001    BAL   AL hairsje02   159 154       159       156   0   0    0  156 #> 5    2002    BAL   AL hairsje02   122 118       122       119   0   0    0  119 #> 6    2003    BAL   AL hairsje02    58  56        58        48   0   0    0   48 #> 7    2004    BAL   AL hairsje02    86  80        86        62   0   0    0   12 #> 8    2005    CHN   NL hairsje02   114  91       114       104   0   0    0   44 #> 9    2006    CHN   NL hairsje02    38  21        38        32   0   0    1   24 #> 10   2006    TEX   AL hairsje02    63  24        63        56   0   0    0    1 #> 11   2007    TEX   AL hairsje02    73  41        73        71   0   0    0   16 #> 12   2008    CIN   NL hairsje02    80  62        80        71   0   0    0    7 #> 13   2009    CIN   NL hairsje02    86  77        86        81   0   0    0    9 #> 14   2009    NYA   AL hairsje02    45  21        45        41   0   0    0    3 #> 15   2010    SDN   NL hairsje02   119 105       119       114   0   0    0   47 #> 16   2011    MIL   NL hairsje02    45  32        45        40   0   0    0   27 #> 17   2011    WAS   NL hairsje02    75  60        75        72   0   0    0    3 #> 18   2012    LAN   NL hairsje02    78  63        78        74   0   0    1   30 #> 19   2013    LAN   NL hairsje02    96  43        96        63   0   0   13    1 #>    G_3b G_ss G_lf G_cf G_rf G_of G_dh G_ph G_pr #> 1     0    0    0    0    0    0    0    0    3 #> 2     0    0    0    0    0    0    0    0    1 #> 3     0    0    0    0    0    0    0    0    0 #> 4     0    0    0    0    0    0    0    0    3 #> 5     0    0    0    0    0    0    0    2    2 #> 6     0    0    0    0    0    0    9    1    1 #> 7     1    0   10   15   27   52   21    2    3 #> 8     0    1   20   48    1   62    0   15    1 #> 9     0    0    3    0    5    8    0    7    2 #> 10    1    3   35   12    7   52    3    4   13 #> 11   10    2   21   22    6   49    0    6    5 #> 12    1   34   24   17   12   42    0   10    0 #> 13   33   31    9    3    5   17    0    7    0 #> 14   16   11   10    2    9   19    3    4    8 #> 15    3   62    4    0    8   12    0    7    1 #> 16    5    1    1   11    0   12    0    5    2 #> 17   44    1   22    9    0   30    0    8    2 #> 18   32    2   18    0    0   18    1   10    0 #> 19   28    0   23    0    4   27    0   39    1  # Appearances for the 1984 Cleveland Indians Appearances %>%   filter(teamID == \"CLE\" & yearID == 1984) #>    yearID teamID lgID  playerID G_all  GS G_batting G_defense G_p G_c G_1b G_2b #> 1    1984    CLE   AL apontlu01    25   0         0        25  25   0    0    0 #> 2    1984    CLE   AL bandoch01    75  60        75        64   0  63    1    0 #> 3    1984    CLE   AL barklje01     3   0         0         3   3   0    0    0 #> 4    1984    CLE   AL behenri01     3   3         0         3   3   0    0    0 #> 5    1984    CLE   AL bernato01   140 122       140       136   0   0    0  136 #> 6    1984    CLE   AL blylebe01    33  32         0        33  33   0    0    0 #> 7    1984    CLE   AL butlebr01   159 149       159       156   0   0    0    0 #> 8    1984    CLE   AL camacer01    69   0         0        69  69   0    0    0 #> 9    1984    CLE   AL cartejo01    66  55        66        60   0   0    7    0 #> 10   1984    CLE   AL castica01    87  56        87        70   0   0    0    0 #> 11   1984    CLE   AL comerst01    22  20         0        22  22   0    0    0 #> 12   1984    CLE   AL easteja01    26   1         0        26  26   0    0    0 #> 13   1984    CLE   AL  farrst01    31  16         0        31  31   0    0    0 #> 14   1984    CLE   AL fischmi01    85  45        85        83   0   0    0   55 #> 15   1984    CLE   AL francju01   160 158       160       159   0   0    0    0 #> 16   1984    CLE   AL frazige01    22   0         0        22  22   0    0    0 #> 17   1984    CLE   AL  hallme01    83  65        83        69   0   0    0    0 #> 18   1984    CLE   AL hargrmi01   133  85       133       124   0   0  124    0 #> 19   1984    CLE   AL hassero01    48  39        48        45   0  44    1    0 #> 20   1984    CLE   AL heatone01    38  34         0        38  38   0    0    0 #> 21   1984    CLE   AL jacobbr01   126 125       126       126   0   0    0    0 #> 22   1984    CLE   AL jeffcmi01    63   1         0        63  63   0    0    0 #> 23   1984    CLE   AL moronje01     7   5         7         6   0   0    0    0 #> 24   1984    CLE   AL nixonot01    49  29        49        46   0   0    0    0 #> 25   1984    CLE   AL noboaju01    23   1        23        19   0   0    0   19 #> 26   1984    CLE   AL perkibr01    58   7        58         2   0   0    2    0 #> 27   1984    CLE   AL quirkja01     1   0         1         1   0   1    0    0 #> 28   1984    CLE   AL rhombke01    13   2        13         9   0   0    1    1 #> 29   1984    CLE   AL romanjo02     3   2         0         3   3   0    0    0 #> 30   1984    CLE   AL romerra01     1   0         0         1   1   0    0    0 #> 31   1984    CLE   AL schuldo01    19  14         0        19  19   0    0    0 #> 32   1984    CLE   AL smithro01    22  14         0        22  22   0    0    0 #> 33   1984    CLE   AL spillda01    14   8         0        14  14   0    0    0 #> 34   1984    CLE   AL sutclri01    15  15         0        15  15   0    0    0 #> 35   1984    CLE   AL tablepa01   144 131       144       139   0   0   67    1 #> 36   1984    CLE   AL thornan01   155 155       155        11   0   0   11    0 #> 37   1984    CLE   AL ujdurje01     4   3         0         4   4   0    0    0 #> 38   1984    CLE   AL vukovge01   134 110       134       130   0   0    0    0 #> 39   1984    CLE   AL waddeto01    58   0         0        58  58   0    0    0 #> 40   1984    CLE   AL willaje01    87  68        87        76   0  76    0    0 #>    G_3b G_ss G_lf G_cf G_rf G_of G_dh G_ph G_pr #> 1     0    0    0    0    0    0    0    0    0 #> 2     1    0    0    0    0    0    1   13    0 #> 3     0    0    0    0    0    0    0    0    0 #> 4     0    0    0    0    0    0    0    0    0 #> 5     0    0    0    0    0    0    1    3    4 #> 6     0    0    0    0    0    0    0    0    0 #> 7     0    0    0  156    1  156    0    3    2 #> 8     0    0    0    0    0    0    0    0    0 #> 9     0    0   48   14    0   59    0    8    1 #> 10    0    0    0    0   70   70    2   26    1 #> 11    0    0    0    0    0    0    0    0    0 #> 12    0    0    0    0    0    0    0    0    0 #> 13    0    0    0    0    0    0    0    0    0 #> 14   17   15    0    0    0    0    0    2    7 #> 15    0  159    0    0    0    0    1    1    1 #> 16    0    0    0    0    0    0    0    0    0 #> 17    0    0   64    1    6   69    9   13    0 #> 18    0    0    0    0    0    0    0   20    0 #> 19    0    0    0    0    0    0    1    3    0 #> 20    0    0    0    0    0    0    0    0    0 #> 21  126    1    0    0    0    0    0    0    0 #> 22    0    0    0    0    0    0    0    0    0 #> 23    6    0    0    0    0    0    1    1    1 #> 24    0    0   43    4    0   46    0    0   10 #> 25    0    0    0    0    0    0    2    0    6 #> 26    0    0    0    0    0    0   10   50    1 #> 27    0    0    0    0    0    0    0    0    0 #> 28    0    0    7    0    0    7    1    3    4 #> 29    0    0    0    0    0    0    0    0    0 #> 30    0    0    0    0    0    0    0    0    0 #> 31    0    0    0    0    0    0    0    0    0 #> 32    0    0    0    0    0    0    0    0    0 #> 33    0    0    0    0    0    0    0    0    0 #> 34    0    0    0    0    0    0    0    0    0 #> 35   36    0   43    0    0   43    1    8    4 #> 36    0    0    0    0    0    0  144    0    0 #> 37    0    0    0    0    0    0    0    0    0 #> 38    0    0   16    0  124  130    0   15    0 #> 39    0    0    0    0    0    0    0    0    0 #> 40    0    0    0    0    0    0    1   12    0  # Pete Rose's primary position each year of his career Appearances %>%     filter(playerID == \"rosepe01\") %>%    group_by(yearID, teamID) %>%    gather(pos, G, G_1b:G_rf) %>%    filter(G == max(G)) %>%    select(yearID:G_all, pos, G) %>%    mutate(pos = substring(as.character(pos), 3, 4)) %>%    arrange(yearID, teamID) #> # A tibble: 25 × 7 #> # Groups:   yearID, teamID [25] #>    yearID teamID lgID  playerID G_all pos       G #>     <int> <fct>  <fct> <chr>    <int> <chr> <int> #>  1   1963 CIN    NL    rosepe01   157 2b      157 #>  2   1964 CIN    NL    rosepe01   136 2b      128 #>  3   1965 CIN    NL    rosepe01   162 2b      161 #>  4   1966 CIN    NL    rosepe01   156 2b      140 #>  5   1967 CIN    NL    rosepe01   148 lf      124 #>  6   1968 CIN    NL    rosepe01   149 rf      142 #>  7   1969 CIN    NL    rosepe01   156 rf      101 #>  8   1970 CIN    NL    rosepe01   159 rf      155 #>  9   1971 CIN    NL    rosepe01   160 rf      156 #> 10   1972 CIN    NL    rosepe01   154 lf      154 #> # ℹ 15 more rows   # Most pitcher appearances each year since 1950 Appearances %>%    filter(yearID >= 1950) %>%    group_by(yearID) %>%    summarise(maxPitcher = playerID[which.max(G_p)],              maxAppear = max(G_p)) #> # A tibble: 74 × 3 #>    yearID maxPitcher maxAppear #>     <int> <chr>          <int> #>  1   1950 konstji01         74 #>  2   1951 kindeel01         63 #>  3   1952 wilheho01         71 #>  4   1953 kindeel01         69 #>  5   1954 hugheji02         60 #>  6   1955 labincl01         60 #>  7   1956 facero01          68 #>  8   1957 lowntu01          67 #>  9   1958 elstodo01         69 #> 10   1959 stalege01         67 #> # ℹ 64 more rows  # Individuals who have played all 162 games since 1961 all162 <- Appearances %>%               filter(yearID > 1960 & G_all == 162) %>%                arrange(yearID, playerID) %>%               select(yearID:G_all) # Number of all-gamers by year (returns a vector) table(all162$yearID) #>  #> 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1973 1974 1975 1976 1977  #>    2    6    3    9    5    5    1    3    5    2    2    6    4    3    2    4  #> 1978 1979 1980 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1996  #>    4    8    7    8    4    5    4    5    2    2    5    2    3    4    2    3  #> 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012  #>    6    4    5    5    7    6    5    3   10    6    7    4    1    2    1    3  #> 2013 2014 2015 2016 2017 2018 2019 2021 2022 2023  #>    4    4    1    3    5    6    5    2    2    4   # Players with most pinch hitting appearances in a year Appearances %>%   arrange(desc(G_ph)) %>%   select(playerID, yearID, teamID, lgID, G_all, G_ph) %>%   head(., 10) #>     playerID yearID teamID lgID G_all G_ph #> 1  suzukic01   2017    MIA   NL   136  109 #> 2  harrile01   2001    NYN   NL   110   95 #> 3  staubru01   1983    NYN   NL   104   94 #> 4  sweenma01   2008    LAN   NL    98   94 #> 5  vandejo02   1995    COL   NL   105   92 #> 6  francma01   2003    ATL   NL   112   92 #> 7  nortogr01   2009    ATL   NL    95   91 #> 8  lasteto01   2018    CHN   NL   123   91 #> 9  perryge01   1993    SLN   NL    96   88 #> 10 francma01   1999    NYN   NL   122   88  # Players with most pinch hitting appearances, career Appearances %>%   group_by(playerID) %>%   select(playerID, G_all, G_ph) %>%   summarise(G = sum(G_all), PH = sum(G_ph)) %>%   arrange(desc(PH)) %>%   head(., 10) #> # A tibble: 10 × 3 #>    playerID      G    PH #>    <chr>     <int> <int> #>  1 harrile01  1903   927 #>  2 sweenma01  1218   819 #>  3 hanseda01  1230   768 #>  4 grossgr01  1809   748 #>  5 vandejo02  1372   659 #>  6 burgesm01  1692   606 #>  7 motama01   1536   597 #>  8 palmeor01  1206   538 #>  9 dwyerji01  1328   524 #> 10 brownga01  1051   522  # Players with most career appearances at each position Appearances %>%   select(playerID, G_c:G_rf) %>%   rename(C = G_c, `1B` = G_1b, `2B` = G_2b, SS = G_ss,          `3B` = G_3b, LF = G_lf, CF = G_cf, RF = G_rf) %>%   gather(pos, G, C:RF) %>%   group_by(pos, playerID) %>%   summarise(G = sum(G)) %>%   arrange(desc(G)) %>%   do(head(., 1)) #> `summarise()` has grouped output by 'pos'. You can override using the `.groups` #> argument. #> # A tibble: 8 × 3 #> # Groups:   pos [8] #>   pos   playerID      G #>   <chr> <chr>     <int> #> 1 1B    murraed02  2413 #> 2 2B    collied01  2648 #> 3 3B    robinbr01  2870 #> 4 C     rodriiv01  2427 #> 5 CF    mayswi01   2829 #> 6 LF    bondsba01  2715 #> 7 RF    clemero01  2305 #> 8 SS    vizquom01  2709"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsManagers.html","id":null,"dir":"Reference","previous_headings":"","what":"AwardsManagers table — AwardsManagers","title":"AwardsManagers table — AwardsManagers","text":"Award information managers awards","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsManagers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AwardsManagers table — AwardsManagers","text":"","code":"data(AwardsManagers)"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsManagers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AwardsManagers table — AwardsManagers","text":"data frame 193 observations following 6 variables. playerID Manager (player) ID code awardID Name award won yearID Year lgID League; factor levels AL NL tie Award tie (Y N) notes Notes award","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsManagers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"AwardsManagers table — AwardsManagers","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsManagers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AwardsManagers table — AwardsManagers","text":"","code":"# Post-season managerial awards  # Number of recipients of each award by year with(AwardsManagers, table(yearID, awardID)) #>       awardID #> yearID BBWAA Manager of the Year TSN Manager of the Year #>   1936                         0                       1 #>   1937                         0                       1 #>   1938                         0                       1 #>   1939                         0                       1 #>   1940                         0                       1 #>   1941                         0                       1 #>   1942                         0                       1 #>   1943                         0                       1 #>   1944                         0                       1 #>   1945                         0                       1 #>   1946                         0                       1 #>   1947                         0                       1 #>   1948                         0                       1 #>   1949                         0                       1 #>   1950                         0                       1 #>   1951                         0                       1 #>   1952                         0                       1 #>   1953                         0                       1 #>   1954                         0                       1 #>   1955                         0                       1 #>   1956                         0                       1 #>   1957                         0                       1 #>   1958                         0                       1 #>   1959                         0                       1 #>   1960                         0                       1 #>   1961                         0                       1 #>   1962                         0                       1 #>   1963                         0                       1 #>   1964                         0                       1 #>   1965                         0                       1 #>   1966                         0                       1 #>   1967                         0                       1 #>   1968                         0                       1 #>   1969                         0                       1 #>   1970                         0                       1 #>   1971                         0                       1 #>   1972                         0                       1 #>   1973                         0                       1 #>   1974                         0                       1 #>   1975                         0                       1 #>   1976                         0                       1 #>   1977                         0                       1 #>   1978                         0                       1 #>   1979                         0                       1 #>   1980                         0                       1 #>   1981                         0                       1 #>   1982                         0                       1 #>   1983                         2                       1 #>   1984                         2                       1 #>   1985                         2                       1 #>   1986                         2                       2 #>   1987                         2                       2 #>   1988                         2                       2 #>   1989                         2                       2 #>   1990                         2                       2 #>   1991                         2                       2 #>   1992                         2                       2 #>   1993                         2                       2 #>   1994                         2                       2 #>   1995                         2                       2 #>   1996                         3                       2 #>   1997                         2                       2 #>   1998                         2                       2 #>   1999                         2                       2 #>   2000                         2                       2 #>   2001                         2                       2 #>   2002                         2                       2 #>   2003                         2                       2 #>   2004                         2                       2 #>   2005                         2                       2 #>   2006                         2                       2 #>   2007                         2                       2 #>   2008                         2                       2 #>   2009                         2                       2 #>   2010                         2                       2 #>   2011                         2                       2 #>   2012                         2                       2 #>   2013                         2                       2 #>   2014                         2                       2 #>   2015                         2                       2 #>   2016                         2                       0 #>   2017                         2                       0 #>   2018                         2                       0 #>   2019                         2                       0 #>   2020                         2                       0 #>   2021                         2                       0 #>   2022                         2                       0 #>   2023                         2                       0  # 1996 award winners subset(AwardsManagers, yearID == 1996) #>      playerID                   awardID yearID lgID  tie notes #> 97  oatesjo01 BBWAA Manager of the Year   1996   AL    Y    NA #> 98  torrejo01 BBWAA Manager of the Year   1996   AL    Y    NA #> 99  bochybr01 BBWAA Manager of the Year   1996   NL <NA>    NA #> 100 oatesjo01   TSN Manager of the Year   1996   AL <NA>    NA #> 101 bochybr01   TSN Manager of the Year   1996   NL <NA>    NA  # AL winners of the BBWAA managerial award subset(AwardsManagers, awardID == \"BBWAA Manager of the year\" &                           lgID == \"AL\") #> [1] playerID awardID  yearID   lgID     tie      notes    #> <0 rows> (or 0-length row.names)  # Tony LaRussa's manager of the year awards subset(AwardsManagers, playerID == \"larusto01\") #>      playerID                   awardID yearID lgID  tie notes #> 48  larusto01 BBWAA Manager of the Year   1983   AL <NA>    NA #> 50  larusto01   TSN Manager of the Year   1983   ML <NA>    NA #> 65  larusto01 BBWAA Manager of the Year   1988   AL <NA>    NA #> 67  larusto01   TSN Manager of the Year   1988   AL <NA>    NA #> 81  larusto01 BBWAA Manager of the Year   1992   AL <NA>    NA #> 83  larusto01   TSN Manager of the Year   1992   AL <NA>    NA #> 123 larusto01 BBWAA Manager of the Year   2002   NL <NA>    NA"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsPlayers.html","id":null,"dir":"Reference","previous_headings":"","what":"AwardsPlayers table — AwardsPlayers","title":"AwardsPlayers table — AwardsPlayers","text":"Award information players awards","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsPlayers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AwardsPlayers table — AwardsPlayers","text":"","code":"data(AwardsPlayers)"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsPlayers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AwardsPlayers table — AwardsPlayers","text":"data frame 6797 observations following 6 variables. playerID Player ID code awardID Name award won yearID Year lgID League; factor levels AA AL ML NL tie Award tie (Y N) notes Notes award","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsPlayers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"AwardsPlayers table — AwardsPlayers","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsPlayers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AwardsPlayers table — AwardsPlayers","text":"","code":"data(AwardsPlayers) # Which awards have been given and how many? with(AwardsPlayers, table(awardID)) #> awardID #>                            ALCS MVP                   All-Star Game MVP  #>                                  43                                  62  #>                     Babe Ruth Award          Baseball Magazine All-Star  #>                                  78                                1520  #>                 Branch Rickey Award         Comeback Player of the Year  #>                                  23                                  36  #>                      Cy Young Award                          Gold Glove  #>                                 126                                1204  #>                    Hank Aaron Award                         Hutch Award  #>                                  50                                  55  #>           Lou Gehrig Memorial Award                Most Valuable Player  #>                                  69                                 208  #>                            NLCS MVP                Outstanding DH Award  #>                                  49                                   8  #>               Pitching Triple Crown                      Platinum Glove  #>                                  39                                  26  #>          Reliever of the Year Award              Roberto Clemente Award  #>                                  94                                  54  #>                  Rookie of the Year                      SIlver Slugger  #>                                 154                                   5  #>                      Silver Slugger                        TSN All-Star  #>                                 792                                1525  #>             TSN Fireman of the Year                       TSN Guide MVP  #>                                  88                                  33  #> TSN Major League Player of the Year             TSN Pitcher of the Year  #>                                  89                                 151  #>              TSN Player of the Year            TSN Reliever of the Year  #>                                  92                                  36  #>                        Triple Crown                    World Series MVP  #>                                  17                                  71  awardtab <- with(AwardsPlayers, table(awardID))  # Plot the awardtab table as a Cleveland dot plot library(\"lattice\") dotplot(awardtab)   # Restrict to MVP awards mvp <- subset(AwardsPlayers, awardID == \"Most Valuable Player\") # Who won in 1994? mvp[mvp$yearID == 1994L, ] #>       playerID              awardID yearID lgID  tie notes #> 5105 thomafr04 Most Valuable Player   1994   AL <NA>  <NA> #> 5106 bagweje01 Most Valuable Player   1994   NL <NA>  <NA>  goldglove <- subset(AwardsPlayers, awardID == \"Gold Glove\") # which players won most often? GGcount <- table(goldglove$playerID) GGcount[GGcount>10] #>  #> clemero01 hernake01  kaatji01 maddugr01  mayswi01 robinbr01 rodriiv01 smithoz01  #>        12        11        16        18        12        16        13        13  #> vizquom01  #>        11   # Triple Crown winners subset(AwardsPlayers, awardID == \"Triple Crown\") #>       playerID      awardID yearID lgID  tie notes #> 620   cobbty01 Triple Crown   1909   AL <NA>  <NA> #> 642  hinespa01 Triple Crown   1878   NL <NA>  <NA> #> 645  oneilti01 Triple Crown   1887   AA <NA>  <NA> #> 649  duffyhu01 Triple Crown   1894   NL <NA>  <NA> #> 651  lajoina01 Triple Crown   1901   AL <NA>  <NA> #> 1156 hornsro01 Triple Crown   1922   NL <NA>  <NA> #> 1272 hornsro01 Triple Crown   1925   NL <NA>  <NA> #> 1668  foxxji01 Triple Crown   1933   AL <NA>  <NA> #> 1669 kleinch01 Triple Crown   1933   NL <NA>  <NA> #> 1721 gehrilo01 Triple Crown   1934   AL <NA>  <NA> #> 1954 robinfr02 Triple Crown   1966   AL <NA>  <NA> #> 2011 yastrca01 Triple Crown   1967   AL <NA>  <NA> #> 3087 medwijo01 Triple Crown   1937   NL <NA>  <NA> #> 3353 willite01 Triple Crown   1942   AL <NA>  <NA> #> 3610 willite01 Triple Crown   1947   AL <NA>  <NA> #> 3898 mantlmi01 Triple Crown   1956   AL <NA>  <NA> #> 6508 cabremi01 Triple Crown   2012   AL <NA>  <NA>  # Simultaneous Triple Crown and MVP winners # (compare merged file to TC) TC <- subset(AwardsPlayers, awardID == \"Triple Crown\") MVP <- subset(AwardsPlayers, awardID == \"Most Valuable Player\") keepvars <- c(\"playerID\", \"yearID\", \"lgID.x\") merge(TC, MVP, by = c(\"playerID\", \"yearID\"))[ ,keepvars] #>    playerID yearID lgID.x #> 1 cabremi01   2012     AL #> 2  foxxji01   1933     AL #> 3 hornsro01   1925     NL #> 4 mantlmi01   1956     AL #> 5 medwijo01   1937     NL #> 6 robinfr02   1966     AL #> 7 yastrca01   1967     AL"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsShareManagers.html","id":null,"dir":"Reference","previous_headings":"","what":"AwardsShareManagers table — AwardsShareManagers","title":"AwardsShareManagers table — AwardsShareManagers","text":"Award voting managers awards","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsShareManagers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AwardsShareManagers table — AwardsShareManagers","text":"","code":"data(AwardsShareManagers)"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsShareManagers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AwardsShareManagers table — AwardsShareManagers","text":"data frame 510 observations following 7 variables. awardID name award votes received yearID Year lgID League; factor levels AL NL playerID Manager (player) ID code pointsWon Number points received pointsMax Maximum number points possible votesFirst Number first place votes","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsShareManagers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"AwardsShareManagers table — AwardsShareManagers","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2023 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsShareManagers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AwardsShareManagers table — AwardsShareManagers","text":"","code":"# Voting for the BBWAA Manager of the Year award by year and league  require(\"dplyr\")  # Sort in decreasing order of points by year and league AwardsShareManagers %>%    group_by(yearID, lgID) %>%    arrange(desc(pointsWon)) #> # A tibble: 510 × 7 #> # Groups:   yearID, lgID [82] #>    awardID                  yearID lgID  playerID pointsWon pointsMax votesFirst #>    <chr>                     <int> <fct> <chr>        <int>     <int>      <int> #>  1 BBWAA Manager of the Ye…   2000 NL    bakerdu…       154       160         30 #>  2 BBWAA Manager of the Ye…   2005 NL    coxbo01        152       160         28 #>  3 BBWAA Manager of the Ye…   2011 NL    gibsoki…       152       160         28 #>  4 BBWAA Manager of the Ye…   2009 NL    tracyji…       151       160         29 #>  5 BBWAA Manager of the Ye…   2023 AL    hydebr99       144       150         27 #>  6 BBWAA Manager of the Ye…   2021 NL    kaplega…       143       150         28 #>  7 BBWAA Manager of the Ye…   2004 NL    coxbo01        140       160         22 #>  8 BBWAA Manager of the Ye…   2013 NL    hurdlcl…       140       150         25 #>  9 BBWAA Manager of the Ye…   1991 AL    kellyto…       138       140         27 #> 10 BBWAA Manager of the Ye…   1994 NL    aloufe01       138       140         27 #> # ℹ 500 more rows  # Any unanimous winners? AwardsShareManagers %>%   filter(pointsWon == pointsMax) #> [1] awardID    yearID     lgID       playerID   pointsWon  pointsMax  votesFirst #> <0 rows> (or 0-length row.names)  # Manager with highest proportion of possible points AwardsShareManagers %>%    mutate(propWon = pointsWon/pointsMax) %>%    arrange(desc(propWon)) %>%    head(., 1) #>                     awardID yearID lgID  playerID pointsWon pointsMax #> 1 BBWAA Manager of the Year   1991   AL kellyto01       138       140 #>   votesFirst   propWon #> 1         27 0.9857143  # Bobby Cox's MOY vote tallies AwardsShareManagers %>%   filter(playerID == \"coxbo01\") #>                      awardID yearID lgID playerID pointsWon pointsMax #> 1  BBWAA Manager of the Year   1983   AL  coxbo01         4        28 #> 2  BBWAA Manager of the Year   1984   AL  coxbo01         9       140 #> 3  BBWAA Manager of the Year   1985   AL  coxbo01       104       140 #> 4  BBWAA Manager of the Year   1991   NL  coxbo01        96       120 #> 5  BBWAA Manager of the Year   1992   NL  coxbo01        29       120 #> 6  BBWAA Manager of the Year   1993   NL  coxbo01        27       140 #> 7  BBWAA Manager of the Year   1994   NL  coxbo01         3       140 #> 8  BBWAA Manager of the Year   1995   NL  coxbo01        20       140 #> 9  BBWAA Manager of the Year   1996   NL  coxbo01        24       140 #> 10 BBWAA Manager of the Year   1997   NL  coxbo01         6       140 #> 11 BBWAA Manager of the Year   1998   NL  coxbo01        17       160 #> 12 BBWAA Manager of the Year   1999   NL  coxbo01        98       160 #> 13 BBWAA Manager of the Year   2000   NL  coxbo01        41       160 #> 14 BBWAA Manager of the Year   2001   NL  coxbo01        12       160 #> 15 BBWAA Manager of the Year   2002   NL  coxbo01        93       160 #> 16 BBWAA Manager of the Year   2003   NL  coxbo01        56       160 #> 17 BBWAA Manager of the Year   2004   NL  coxbo01       140       160 #> 18 BBWAA Manager of the Year   2005   NL  coxbo01       152       160 #> 19 BBWAA Manager of the Year   2009   NL  coxbo01        15       160 #> 20 BBWAA Manager of the Year   2010   NL  coxbo01        28       160 #>    votesFirst #> 1           4 #> 2           0 #> 3          16 #> 4          13 #> 5           1 #> 6           0 #> 7           0 #> 8           1 #> 9           3 #> 10          0 #> 11          0 #> 12         10 #> 13          1 #> 14          2 #> 15          9 #> 16          6 #> 17         22 #> 18         28 #> 19          0 #> 20          1"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsSharePlayers.html","id":null,"dir":"Reference","previous_headings":"","what":"AwardsSharePlayers table — AwardsSharePlayers","title":"AwardsSharePlayers table — AwardsSharePlayers","text":"Award voting managers awards","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsSharePlayers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AwardsSharePlayers table — AwardsSharePlayers","text":"","code":"data(AwardsSharePlayers)"},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsSharePlayers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AwardsSharePlayers table — AwardsSharePlayers","text":"data frame 7447 observations following 7 variables. awardID name award votes received yearID Year lgID League; factor levels AL ML NL playerID Player ID code pointsWon Number points received pointsMax Maximum number points possible votesFirst Number first place votes","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsSharePlayers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"AwardsSharePlayers table — AwardsSharePlayers","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2023 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/AwardsSharePlayers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AwardsSharePlayers table — AwardsSharePlayers","text":"","code":"# Vote tallies for post-season player awards  require(\"dplyr\")  # Which awards are represented in this data frame? unique(AwardsSharePlayers$awardID) #> [1] \"Cy Young Award\"       \"Most Valuable Player\" \"Rookie of the Year\"    # Sort the votes for the Cy Young award in decreasing order. # Until 1967, the award went to the best pitcher # in both leagues.  cyvotes <- AwardsSharePlayers %>%               filter(awardID == \"Cy Young\") %>%               group_by(yearID, lgID) %>%               arrange(desc(pointsWon))  # 2012 votes subset(cyvotes, yearID == 2012) #> # A tibble: 0 × 7 #> # Groups:   yearID, lgID [0] #> # ℹ 7 variables: awardID <chr>, yearID <int>, lgID <fct>, playerID <chr>, #> #   pointsWon <int>, pointsMax <int>, votesFirst <int>  # top three votegetters each year by league  cya_top3 <- cyvotes %>%               group_by(yearID, lgID) %>%               do(head(., 3)) head(cya_top3, 12) #> # A tibble: 0 × 7 #> # Groups:   yearID, lgID [0] #> # ℹ 7 variables: awardID <chr>, yearID <int>, lgID <fct>, playerID <chr>, #> #   pointsWon <int>, pointsMax <int>, votesFirst <int>  # unanimous Cy Young winners subset(cyvotes, pointsWon == pointsMax) #> # A tibble: 0 × 7 #> # Groups:   yearID, lgID [0] #> # ℹ 7 variables: awardID <chr>, yearID <int>, lgID <fct>, playerID <chr>, #> #   pointsWon <int>, pointsMax <int>, votesFirst <int>  ## CYA was a major league award until 1967 # Find top five pitchers with most top 3 vote tallies in CYA # head(with(cya_top3, rev(sort(table(playerID)))), 5)  # Pre-1967 cya_top3 %>%    filter(yearID <= 1966) %>%   group_by(playerID) %>%   summarise(yrs_top3 = n()) %>%   arrange(desc(yrs_top3)) %>%   head(., 2) #> # A tibble: 0 × 2 #> # ℹ 2 variables: playerID <chr>, yrs_top3 <int>  # 1967+ (both leagues) cya_top3 %>%    filter(yearID > 1966) %>%   group_by(playerID) %>%   summarise(yrs_top3 = n()) %>%   arrange(desc(yrs_top3)) %>%   head(., 5) #> # A tibble: 0 × 2 #> # ℹ 2 variables: playerID <chr>, yrs_top3 <int>  # 1967+ (by league) cya_top3 %>%    filter(yearID > 1966) %>%   group_by(playerID, lgID) %>%   summarise(yrs_top3 = n()) %>%   arrange(desc(yrs_top3)) %>%   head(., 5) #> `summarise()` has grouped output by 'playerID'. You can override using the #> `.groups` argument. #> # A tibble: 0 × 3 #> # Groups:   playerID [0] #> # ℹ 3 variables: playerID <chr>, lgID <fct>, yrs_top3 <int>  # Ditto for MVP awards # Top 3 votegetters for MVP award by year and league MVP_top3 <- AwardsSharePlayers %>%                filter(awardID == \"MVP\") %>%               group_by(yearID, lgID) %>%                arrange(desc(pointsWon)) %>%               do(head(., 3)) tail(MVP_top3) #> # A tibble: 0 × 7 #> # Groups:   yearID, lgID [0] #> # ℹ 7 variables: awardID <chr>, yearID <int>, lgID <fct>, playerID <chr>, #> #   pointsWon <int>, pointsMax <int>, votesFirst <int>  ## Select players with >= 7 top 3 finishes MVP_top3 %>%    group_by(playerID) %>%   summarise(n_top3 = n()) %>%   arrange(desc(n_top3)) %>%   filter(n_top3 > 6) #> # A tibble: 0 × 2 #> # ℹ 2 variables: playerID <chr>, n_top3 <int>"},{"path":"http://cdalzell.github.io/Lahman/reference/Batting.html","id":null,"dir":"Reference","previous_headings":"","what":"Batting table — Batting","title":"Batting table — Batting","text":"Batting table - batting statistics","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Batting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batting table — Batting","text":"","code":"data(Batting)"},{"path":"http://cdalzell.github.io/Lahman/reference/Batting.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Batting table — Batting","text":"data frame 113799 observations following 22 variables. playerID Player ID code yearID Year stint player's stint (order appearances within season) teamID Team; factor lgID League; factor levels AA AL FL NL PL UA G Games: number games player played AB Bats R Runs H Hits: times reached base batted, fair ball without error defense X2B Doubles: hits batter reached second base safely X3B Triples: hits batter reached third base safely HR Homeruns RBI Runs Batted SB Stolen Bases CS Caught Stealing BB Base Balls Strikeouts IBB Intentional walks HBP Hit pitch SH Sacrifice hits SF Sacrifice flies GIDP Grounded double plays","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Batting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batting table — Batting","text":"Variables X2B X3B named 2B 3B original database","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Batting.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Batting table — Batting","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/reference/Batting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batting table — Batting","text":"","code":"data(Batting) head(Batting) #>    playerID yearID stint teamID lgID  G AB R H X2B X3B HR RBI SB CS BB SO IBB #> 1 aardsda01   2004     1    SFN   NL 11  0 0 0   0   0  0   0  0  0  0  0   0 #> 2 aardsda01   2006     1    CHN   NL 45  2 0 0   0   0  0   0  0  0  0  0   0 #> 3 aardsda01   2007     1    CHA   AL 25  0 0 0   0   0  0   0  0  0  0  0   0 #> 4 aardsda01   2008     1    BOS   AL 47  1 0 0   0   0  0   0  0  0  0  1   0 #> 5 aardsda01   2009     1    SEA   AL 73  0 0 0   0   0  0   0  0  0  0  0   0 #> 6 aardsda01   2010     1    SEA   AL 53  0 0 0   0   0  0   0  0  0  0  0   0 #>   HBP SH SF GIDP #> 1   0  0  0    0 #> 2   0  1  0    0 #> 3   0  0  0    0 #> 4   0  0  0    0 #> 5   0  0  0    0 #> 6   0  0  0    0 require(\"dplyr\")  ## Prelude: Extract information from Salaries and People ## to be merged with the batting data.  # Subset of Salaries data salaries <- Salaries %>%               select(playerID, yearID, teamID, salary)  # Subset of People table (player metadata) peopleInfo <- People %>%               select(playerID, birthYear, birthMonth, nameLast,                      nameFirst, bats)  # Left join salaries and peopleInfo to batting data, # create an age variable and sort by playerID, yearID and stint # Returns an ignorable warning. batting <- battingStats() %>%               left_join(salaries,                         by =c(\"playerID\", \"yearID\", \"teamID\")) %>%              left_join(peopleInfo, by = \"playerID\") %>%              mutate(age = yearID - birthYear -                              1L *(birthMonth >= 10)) %>%              arrange(playerID, yearID, stint)  ## Generate a ggplot similar to the NYT graph in the story about Ted ## Williams and the last .400 MLB season  # http://www.nytimes.com/interactive/2011/09/18/sports/baseball/WILLIAMS-GRAPHIC.html  # Restrict the pool of eligible players to the years after 1899 and # players with a minimum of 450 plate appearances (this covers the # strike year of 1994 when Tony Gwynn hit .394 before play was suspended # for the season - in a normal year, the minimum number of plate appearances is 502)  eligibleHitters <- batting %>%                      filter(yearID >= 1900 & PA > 450)  # Find the hitters with the highest BA in MLB each year (there are a # few ties).  Include all players with BA > .400, whether they # won a batting title or not, and add an indicator variable for # .400 average in a season.  topHitters <- eligibleHitters %>%                  group_by(yearID) %>%                  filter(BA == max(BA)| BA >= .400) %>%                  mutate(ba400 = BA >= 0.400) %>%                  select(playerID, yearID, nameLast,                          nameFirst, BA, ba400)  # Sub-data frame for the .400 hitters plus the outliers after 1950 # (averages above .380) - used to produce labels in the plot below bignames <- topHitters %>%               filter(ba400 | (yearID > 1950 & BA > 0.380)) %>%               arrange(desc(BA))  # Variable to provide a vertical offset to certain # labels in the ggplot below bignames$yoffset <-  c(0, 0, 0, 0, 0.002, 0, 0, 0,                        0.001, -0.001, 0, -0.002, 0, 0,                        0.002, 0, 0)  # Produce the plot  require(\"ggplot2\")                                #> Loading required package: ggplot2 ggplot(topHitters, aes(x = yearID, y = BA)) +   geom_point(aes(colour = ba400), size = 2.5) +   geom_hline(yintercept = 0.400, size = 1, colour = \"gray70\") +   geom_text(data = bignames, aes(y = BA + yoffset,                                  label = nameLast),                               size = 3, hjust = 1.2) +   scale_colour_manual(values = c(\"FALSE\" = \"black\", \"TRUE\" = \"red\")) +   xlim(1899, 2015) +   xlab(\"Year\") +   scale_y_continuous(\"Batting average\",                      limits = c(0.330, 0.430),                      breaks = seq(0.34, 0.42, by = 0.02),                      labels = c(\".340\", \".360\", \".380\", \".400\", \".420\")) +   geom_smooth() +   theme(legend.position = \"none\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: Removed 11 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 11 rows containing missing values or values outside the scale range #> (`geom_point()`).   ########################################################## # after Chris Green, # http://sabr.org/research/baseball-s-first-power-surge-home-runs-late-19th-century-major-leagues  # Total home runs by year totalHR <- Batting %>%              group_by(yearID) %>%              summarise(HomeRuns = sum(as.numeric(HR), na.rm=TRUE),                        Games = sum(as.numeric(G), na.rm=TRUE))  # Plot HR by year, pre-1919 (dead ball era) totalHR %>% filter(yearID <= 1918) %>%             ggplot(., aes(x = yearID, y = HomeRuns)) +                geom_line() +                geom_point() +                labs(x = \"Year\", y = \"Home runs hit\")   # Take games into account totalHR %>% filter(yearID <= 1918) %>%   ggplot(., aes(x = yearID, y = HomeRuns/Games)) +      geom_line() +      geom_point() +      labs(x = \"Year\", y = \"Home runs per game played\")   # Widen perspective to all years from 1871 ggplot(totalHR, aes(x = yearID, y = HomeRuns)) +   geom_point() +   geom_path() +   geom_smooth() +   labs(x = \"Year\", y = \"Home runs hit\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # Similar plot for HR per game played by year - # shows several eras with spikes in HR hit ggplot(totalHR, aes(x = yearID, y = HomeRuns/Games)) +   geom_point() +   geom_path() +   geom_smooth(se = FALSE) +   labs(x = \"Year\", y = \"Home runs per game played\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"http://cdalzell.github.io/Lahman/reference/battingLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Labels — battingLabels","title":"Variable Labels — battingLabels","text":"data frames provide descriptive labels variables Batting, Pitching Fielding files (related *Post files). useful plots output using Label.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/battingLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Labels — battingLabels","text":"","code":"data(battingLabels)  data(fieldingLabels)  data(pitchingLabels)"},{"path":"http://cdalzell.github.io/Lahman/reference/battingLabels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Variable Labels — battingLabels","text":"data frame observations following 2 variables. variable variable name label variable label","code":""},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/reference/battingLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Labels — battingLabels","text":"","code":"data(battingLabels) str(battingLabels) #> 'data.frame':\t22 obs. of  2 variables: #>  $ variable: chr  \"playerID\" \"yearID\" \"stint\" \"teamID\" ... #>  $ label   : chr  \"Player ID code\" \"Year\" \"Player's stint\" \"Team\" ...  require(\"dplyr\")  # find and plot maximum number of homers per year batHR <- Batting %>%            filter(!is.na(HR)) %>%            group_by(yearID) %>%            summarise(max=max(HR))      with(batHR, {   plot(yearID, max,         xlab=Label(\"yearID\"), ylab=paste(\"Maximum\", Label(\"HR\")),         cex=0.8)   lines(lowess(yearID, max), col=\"blue\", lwd=2)   abline(lm(max ~ yearID), col=\"red\", lwd=2)   })"},{"path":"http://cdalzell.github.io/Lahman/reference/BattingPost.html","id":null,"dir":"Reference","previous_headings":"","what":"BattingPost table — BattingPost","title":"BattingPost table — BattingPost","text":"Post season batting statistics","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/BattingPost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BattingPost table — BattingPost","text":"","code":"data(BattingPost)"},{"path":"http://cdalzell.github.io/Lahman/reference/BattingPost.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BattingPost table — BattingPost","text":"data frame 16857 observations following 22 variables. yearID Year round Level playoffs playerID Player ID code teamID Team lgID League; factor levels AA AL NL G Games AB Bats R Runs H Hits X2B Doubles X3B Triples HR Homeruns RBI Runs Batted SB Stolen Bases CS Caught stealing BB Base Balls Strikeouts IBB Intentional walks HBP Hit pitch SH Sacrifices SF Sacrifice flies GIDP Grounded double plays","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/BattingPost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BattingPost table — BattingPost","text":"Variables X2B X3B named 2B 3B original database","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/BattingPost.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BattingPost table — BattingPost","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/BattingPost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BattingPost table — BattingPost","text":"","code":"# Post-season batting data # Requires care since intra-league playoffs have evolved since 1969 # Simplest case: World Series  require(\"dplyr\")  # Create a sub-data frame for modern World Series play ws <- BattingPost %>%         filter(round == \"WS\" & yearID >= 1903) %>%         mutate(BA = 0 + (AB > 0) * round(H/AB, 3),                TB = H + X2B + 2 * X3B + 3 * HR,                SA = 0 + (AB > 0) * round(TB/AB, 3),                PA = AB + BB + IBB + HBP + SH + SF,                OB = H + BB + IBB + HBP,                OBP = 0 + (AB > 0) * round(OB/PA, 3) )  # Players with most appearances in the WS: ws %>% group_by(playerID) %>%        summarise(appearances = n()) %>%        arrange(desc(appearances)) %>%        head(., 10) #> # A tibble: 10 × 2 #>    playerID  appearances #>    <chr>           <int> #>  1 berrayo01          14 #>  2 mantlmi01          12 #>  3 fordwh01           11 #>  4 dimagjo01          10 #>  5 howarel01          10 #>  6 ruthba01           10 #>  7 bauerha01           9 #>  8 rizzuph01           9 #>  9 dickebi01           8 #> 10 friscfr01           8  # Non-Yankees with most WS appearances ws %>% filter(teamID != \"NYA\") %>%        group_by(playerID) %>%        summarise(appearances = n()) %>%        arrange(desc(appearances)) %>%        head(., 10) #> # A tibble: 10 × 2 #>    playerID  appearances #>    <chr>           <int> #>  1 friscfr01           8 #>  2 furilca01           7 #>  3 gilliji01           7 #>  4 hodgegi01           7 #>  5 reesepe01           7 #>  6 collied01           6 #>  7 palmeji01           6 #>  8 robinja02           6 #>  9 rosepe01            6 #> 10 snidedu01           6   # Top ten single WS batting averages ( >= 10 AB ) ws %>% filter(AB > 10) %>%        arrange(desc(BA)) %>%        head(., 10) #>    yearID round  playerID teamID lgID G AB R  H X2B X3B HR RBI SB CS BB SO IBB #> 1    1990    WS hatchbi01    CIN   NL 4 12 6  9   4   1  0   2  0  1  2  0   1 #> 2    2013    WS ortizda01    BOS   AL 6 16 7 11   2   0  2   6  0  0  8  1   4 #> 3    1928    WS  ruthba01    NYA   AL 4 16 9 10   3   0  3   4  0  0  1  2   0 #> 4    2009    WS matsuhi01    NYA   AL 6 13 3  8   1   0  3   8  0  0  1  3   0 #> 5    2001    WS bautida01    ARI   NL 5 12 1  7   2   0  0   7  0  0  1  1   0 #> 6    1990    WS  saboch01    CIN   NL 4 16 2  9   1   0  2   5  0  1  2  2   0 #> 7    1914    WS gowdyha01    BSN   NL 4 11 3  6   3   1  1   3  1  0  5  1   0 #> 8    1928    WS gehrilo01    NYA   AL 4 11 5  6   1   0  4   9  0  0  6  0   0 #> 9    1999    WS boonebr01    ATL   NL 4 13 1  7   4   0  0   3  0  1  1  3   0 #> 10   1976    WS benchjo01    CIN   NL 4 15 4  8   1   1  2   6  0  0  0  1   0 #>    HBP SH SF GIDP    BA TB    SA PA OB   OBP #> 1    1  0  0    1 0.750 15 1.250 16 13 0.812 #> 2    0  0  1    0 0.688 19 1.188 29 23 0.793 #> 3    0  0  0    1 0.625 22 1.375 17 11 0.647 #> 4    0  0  0    0 0.615 18 1.385 14  9 0.643 #> 5    0  0  0    0 0.583  9 0.750 13  8 0.615 #> 6    0  0  0    0 0.562 16 1.000 18 11 0.611 #> 7    0  0  0    0 0.545 14 1.273 16 11 0.688 #> 8    0  0  0    0 0.545 19 1.727 17 12 0.706 #> 9    0  0  0    0 0.538 11 0.846 14  8 0.571 #> 10   0  0  0    2 0.533 17 1.133 15  8 0.533  # Top ten slugging averages in a single WS  ws %>% filter(AB > 10) %>%   arrange(desc(SA)) %>%   head(., 10) #>    yearID round  playerID teamID lgID G AB  R  H X2B X3B HR RBI SB CS BB SO IBB #> 1    1928    WS gehrilo01    NYA   AL 4 11  5  6   1   0  4   9  0  0  6  0   0 #> 2    2009    WS matsuhi01    NYA   AL 6 13  3  8   1   0  3   8  0  0  1  3   0 #> 3    1928    WS  ruthba01    NYA   AL 4 16  9 10   3   0  3   4  0  0  1  2   0 #> 4    2002    WS bondsba01    SFN   NL 7 17  8  8   2   0  4   6  0  0 13  3   7 #> 5    1914    WS gowdyha01    BSN   NL 4 11  3  6   3   1  1   3  1  0  5  1   0 #> 6    1977    WS jacksre01    NYA   AL 6 20 10  9   1   0  5   8  0  0  3  4   0 #> 7    1990    WS hatchbi01    CIN   NL 4 12  6  9   4   1  0   2  0  1  2  0   1 #> 8    1939    WS kellech01    NYA   AL 4 16  8  7   1   1  3   6  0  0  1  2   0 #> 9    2013    WS ortizda01    BOS   AL 6 16  7 11   2   0  2   6  0  0  8  1   4 #> 10   2018    WS pearcst01    BOS   AL 5 12  5  4   1   0  3   8  0  0  4  0   0 #>    HBP SH SF GIDP    BA TB    SA PA OB   OBP #> 1    0  0  0    0 0.545 19 1.727 17 12 0.706 #> 2    0  0  0    0 0.615 18 1.385 14  9 0.643 #> 3    0  0  0    1 0.625 22 1.375 17 11 0.647 #> 4    0  0  0    0 0.471 22 1.294 37 28 0.757 #> 5    0  0  0    0 0.545 14 1.273 16 11 0.688 #> 6    1  0  0    1 0.450 25 1.250 24 13 0.542 #> 7    1  0  0    1 0.750 15 1.250 16 13 0.812 #> 8    0  0  0    0 0.438 19 1.188 17  8 0.471 #> 9    0  0  1    0 0.688 19 1.188 29 23 0.793 #> 10   0  0  0    0 0.333 14 1.167 16  8 0.500   # Hitting stats for the 1946 St. Louis Cardinals, ordered by BA ws %>%    filter(teamID == \"SLN\" & yearID == 1946) %>%   arrange(desc(BA)) #>    yearID round  playerID teamID lgID G AB R H X2B X3B HR RBI SB CS BB SO IBB #> 1    1946    WS  ricede01    SLN   NL 3  6 2 3   1   0  0   0  0  0  2  0   2 #> 2    1946    WS walkeha01    SLN   NL 7 17 3 7   2   0  0   6  0  1  4  2   2 #> 3    1946    WS dicksmu01    SLN   NL 2  5 1 2   2   0  0   1  0  0  0  1   0 #> 4    1946    WS slaugen01    SLN   NL 7 25 5 8   1   1  1   2  1  0  4  3   2 #> 5    1946    WS garagjo01    SLN   NL 5 19 2 6   2   0  0   4  0  0  0  3   0 #> 6    1946    WS kurowwh01    SLN   NL 7 27 5 8   3   0  0   2  0  0  0  3   0 #> 7    1946    WS dusaker01    SLN   NL 4  4 0 1   1   0  0   0  0  0  2  2   0 #> 8    1946    WS marioma01    SLN   NL 7 24 1 6   2   0  0   4  0  0  1  1   1 #> 9    1946    WS mungere01    SLN   NL 1  4 0 1   0   0  0   0  0  0  0  2   0 #> 10   1946    WS schoere01    SLN   NL 7 30 3 7   1   0  0   1  1  1  0  2   0 #> 11   1946    WS musiast01    SLN   NL 7 27 3 6   4   1  0   4  1  0  4  2   0 #> 12   1946    WS moorete01    SLN   NL 7 27 1 4   0   0  0   2  0  0  2  6   0 #> 13   1946    WS brechha01    SLN   NL 3  8 2 1   0   0  0   1  0  0  0  1   0 #> 14   1946    WS brazlal01    SLN   NL 1  2 0 0   0   0  0   0  0  0  0  0   0 #> 15   1946    WS jonesni01    SLN   NL 1  1 0 0   0   0  0   0  0  0  0  1   0 #> 16   1946    WS polleho01    SLN   NL 2  4 0 0   0   0  0   0  0  0  0  1   0 #> 17   1946    WS sisledi01    SLN   NL 2  2 0 0   0   0  0   0  0  0  0  0   0 #> 18   1946    WS beazljo01    SLN   NL 1  0 0 0   0   0  0   0  0  0  0  0   0 #> 19   1946    WS wilkste01    SLN   NL 1  0 0 0   0   0  0   0  0  0  0  0   0 #>    HBP SH SF GIDP    BA TB    SA PA OB   OBP #> 1    0  0  0    0 0.500  4 0.667 10  7 0.700 #> 2    0  1  0    0 0.412  9 0.529 24 13 0.542 #> 3    0  0  0    0 0.400  4 0.800  5  2 0.400 #> 4    1  0  0    0 0.320 14 0.560 32 15 0.469 #> 5    0  0  0    0 0.316  8 0.421 19  6 0.316 #> 6    1  0  0    1 0.296 11 0.407 28  9 0.321 #> 7    0  0  0    0 0.250  2 0.500  6  3 0.500 #> 8    0  3  0    1 0.250  8 0.333 29  8 0.276 #> 9    0  1  0    0 0.250  1 0.250  5  1 0.200 #> 10   0  1  0    0 0.233  8 0.267 31  7 0.226 #> 11   0  0  0    0 0.222 12 0.444 31 10 0.323 #> 12   0  2  0    0 0.148  4 0.148 31  6 0.194 #> 13   0  0  0    0 0.125  1 0.125  8  1 0.125 #> 14   0  0  0    0 0.000  0 0.000  2  0 0.000 #> 15   0  0  0    0 0.000  0 0.000  1  0 0.000 #> 16   0  0  0    0 0.000  0 0.000  4  0 0.000 #> 17   0  0  0    0 0.000  0 0.000  2  0 0.000 #> 18   0  0  0    0   NaN  0   NaN  0  0   NaN #> 19   0  0  0    0   NaN  0   NaN  0  0   NaN  # Babe Ruth's WS profile ws %>%    filter(playerID == \"ruthba01\") %>%   arrange(yearID) #>    yearID round playerID teamID lgID G AB R  H X2B X3B HR RBI SB CS BB SO IBB #> 1    1915    WS ruthba01    BOS   AL 1  1 0  0   0   0  0   0  0  0  0  0   0 #> 2    1916    WS ruthba01    BOS   AL 1  5 0  0   0   0  0   1  0  0  0  2   0 #> 3    1918    WS ruthba01    BOS   AL 3  5 0  1   0   1  0   2  0  0  0  2   0 #> 4    1921    WS ruthba01    NYA   AL 6 16 3  5   0   0  1   4  2  1  5  8   0 #> 5    1922    WS ruthba01    NYA   AL 5 17 1  2   1   0  0   1  0  1  2  3   0 #> 6    1923    WS ruthba01    NYA   AL 6 19 8  7   1   1  3   3  0  0  8  6   0 #> 7    1926    WS ruthba01    NYA   AL 7 20 6  6   0   0  4   5  1  1 11  2   1 #> 8    1927    WS ruthba01    NYA   AL 4 15 4  6   0   0  2   7  1  0  2  2   1 #> 9    1928    WS ruthba01    NYA   AL 4 16 9 10   3   0  3   4  0  0  1  2   0 #> 10   1932    WS ruthba01    NYA   AL 4 15 6  5   0   0  2   6  0  0  4  3   0 #>    HBP SH SF GIDP    BA TB    SA PA OB   OBP #> 1    0  0  0    0 0.000  0 0.000  1  0 0.000 #> 2    0  0  0    0 0.000  0 0.000  5  0 0.000 #> 3    0  1  0    0 0.200  3 0.600  6  1 0.167 #> 4    0  0  0    0 0.312  8 0.500 21 10 0.476 #> 5    1  1  0    0 0.118  3 0.176 21  5 0.238 #> 6    0  0  0    0 0.368 19 1.000 27 15 0.556 #> 7    0  0  0    0 0.300 18 0.900 32 18 0.562 #> 8    0  0  1    1 0.400 12 0.800 19  9 0.474 #> 9    0  0  0    1 0.625 22 1.375 17 11 0.647 #> 10   1  0  0    1 0.333 11 0.733 20 10 0.500"},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate additional batting statistics — battingStats","title":"Calculate additional batting statistics — battingStats","text":"Batting contain batting statistics derived present data.frame.  function calculates batting average (BA), plate appearances (PA), total bases (TB), slugging percentage (SlugPct), -base percentage (OBP), -base percentage + slugging (OPS), batting average balls play (BABIP) record Batting-like data.frame.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate additional batting statistics — battingStats","text":"","code":"battingStats(data = Lahman::Batting,               idvars = c(\"playerID\", \"yearID\", \"stint\", \"teamID\", \"lgID\"),               cbind = TRUE)"},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate additional batting statistics — battingStats","text":"data input data, typically Batting idvars ID variables include output data.frame cbind TRUE, calculated statistics appended input data additional columns","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate additional batting statistics — battingStats","text":"Standard calculations, e.g., BA <- H/AB problematic presence NAs zeros.  function tries deal problems.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate additional batting statistics — battingStats","text":"data.frame observations data. \tcbind==FALSE, idvars calculated variables returned.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate additional batting statistics — battingStats","text":"Michael Friendly, Dennis Murphy","code":""},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/reference/battingStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate additional batting statistics — battingStats","text":"","code":"bstats <- battingStats()   str(bstats) #> 'data.frame':\t113799 obs. of  29 variables: #>  $ playerID: chr  \"aardsda01\" \"aardsda01\" \"aardsda01\" \"aardsda01\" ... #>  $ yearID  : int  2004 2006 2007 2008 2009 2010 2012 2013 2015 1954 ... #>  $ stint   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ teamID  : Factor w/ 149 levels \"ALT\",\"ANA\",\"ARI\",..: 117 35 33 16 116 116 93 94 4 80 ... #>  $ lgID    : Factor w/ 7 levels \"AA\",\"AL\",\"FL\",..: 5 5 2 2 2 2 2 5 5 5 ... #>  $ G       : int  11 45 25 47 73 53 1 43 33 122 ... #>  $ AB      : int  0 2 0 1 0 0 0 0 1 468 ... #>  $ R       : int  0 0 0 0 0 0 0 0 0 58 ... #>  $ H       : int  0 0 0 0 0 0 0 0 0 131 ... #>  $ X2B     : int  0 0 0 0 0 0 0 0 0 27 ... #>  $ X3B     : int  0 0 0 0 0 0 0 0 0 6 ... #>  $ HR      : int  0 0 0 0 0 0 0 0 0 13 ... #>  $ RBI     : int  0 0 0 0 0 0 0 0 0 69 ... #>  $ SB      : int  0 0 0 0 0 0 0 0 0 2 ... #>  $ CS      : int  0 0 0 0 0 0 0 0 0 2 ... #>  $ BB      : int  0 0 0 0 0 0 0 0 0 28 ... #>  $ SO      : int  0 0 0 1 0 0 0 0 1 39 ... #>  $ IBB     : int  0 0 0 0 0 0 0 0 0 NA ... #>  $ HBP     : int  0 0 0 0 0 0 0 0 0 3 ... #>  $ SH      : int  0 1 0 0 0 0 0 0 0 6 ... #>  $ SF      : int  0 0 0 0 0 0 0 0 0 4 ... #>  $ GIDP    : int  0 0 0 0 0 0 0 0 0 13 ... #>  $ BA      : num  NA 0 NA 0 NA NA NA NA 0 0.28 ... #>  $ PA      : num  0 3 0 1 0 0 0 0 1 509 ... #>  $ TB      : num  0 0 0 0 0 0 0 0 0 209 ... #>  $ SlugPct : num  NA 0 NA 0 NA NA NA NA 0 0.447 ... #>  $ OBP     : num  NA 0 NA 0 NA NA NA NA 0 0.322 ... #>  $ OPS     : num  NA 0 NA 0 NA NA NA NA 0 0.769 ... #>  $ BABIP   : num  NA 0 NA NaN NA NA NA NA NaN 0.281 ...   bstats <- battingStats(cbind=FALSE)   str(bstats) #> 'data.frame':\t113799 obs. of  12 variables: #>  $ playerID: chr  \"aardsda01\" \"aardsda01\" \"aardsda01\" \"aardsda01\" ... #>  $ yearID  : int  2004 2006 2007 2008 2009 2010 2012 2013 2015 1954 ... #>  $ stint   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ teamID  : Factor w/ 149 levels \"ALT\",\"ANA\",\"ARI\",..: 117 35 33 16 116 116 93 94 4 80 ... #>  $ lgID    : Factor w/ 7 levels \"AA\",\"AL\",\"FL\",..: 5 5 2 2 2 2 2 5 5 5 ... #>  $ BA      : num  NA 0 NA 0 NA NA NA NA 0 0.28 ... #>  $ PA      : num  0 3 0 1 0 0 0 0 1 509 ... #>  $ TB      : num  0 0 0 0 0 0 0 0 0 209 ... #>  $ SlugPct : num  NA 0 NA 0 NA NA NA NA 0 0.447 ... #>  $ OBP     : num  NA 0 NA 0 NA NA NA NA 0 0.322 ... #>  $ OPS     : num  NA 0 NA 0 NA NA NA NA 0 0.769 ... #>  $ BABIP   : num  NA 0 NA NaN NA NA NA NA NaN 0.281 ..."},{"path":"http://cdalzell.github.io/Lahman/reference/CollegePlaying.html","id":null,"dir":"Reference","previous_headings":"","what":"CollegePlaying table — CollegePlaying","title":"CollegePlaying table — CollegePlaying","text":"Information schools players attended, player","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/CollegePlaying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CollegePlaying table — CollegePlaying","text":"","code":"data(CollegePlaying)"},{"path":"http://cdalzell.github.io/Lahman/reference/CollegePlaying.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CollegePlaying table — CollegePlaying","text":"data frame 17350 observations following 3 variables. playerID Player ID code schoolID school ID code yearID Year player attended school","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/CollegePlaying.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CollegePlaying table — CollegePlaying","text":"data set reflects change Lahman schema 2015 version. old SchoolsPlayers table replaced new table called CollegePlaying. According documentation, change reflects advances compilation data, largely led Ted Turocy. old table reported college attendance major league players listing start date end date.  new version separate record year player attended.  allows us better account players attended multiple colleges skipped season, well identify teammates.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/CollegePlaying.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CollegePlaying table — CollegePlaying","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/CollegePlaying.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CollegePlaying table — CollegePlaying","text":"","code":"data(CollegePlaying) head(CollegePlaying) #>    playerID schoolID yearID #> 1 aardsda01   pennst   2001 #> 2 aardsda01     rice   2002 #> 3 aardsda01     rice   2003 #> 4  abadan01  gamiddl   1992 #> 5  abadan01  gamiddl   1993 #> 6 abbeybe01  vermont   1889  ## Q: What are the top universities for producing MLB players? SPcount <- table(CollegePlaying$schoolID) SPcount[SPcount>50] #>  #>    alabama    arizona  arizonast   arkansas     auburn     baylor bostoncoll  #>        155        161        236        108        122         99         71  #>      brown        byu    cacerri california  calstfull    clemson  creighton  #>        111         57         52        162        131        138         51  #>  dartmouth       duke    florida  floridast    fordham   fresnost     gatech  #>         64         94        138        152         99        103        137  #> georgetown    georgia  holycross    houston   illinois    indiana  indianast  #>         78         89        167         57        141         58         53  #>       iowa     kentst   kentucky  longbeach loyolamary        lsu  manhattan  #>         59         52         79         96         70        149         71  #>   maryland    miamifl    miamioh   michigan michiganst  minnesota   missouri  #>         60        113         63        191         71         86         72  #>     missst    ncstate   nebraska  notredame   nwestern       ohio     ohiost  #>        118         98         88        134         55         54        111  #>   oklahoma    okstate    olemiss   oregonst     pennst pepperdine  princeton  #>        135        132        108         70         58         87         66  #>       rice    rutgers sandiegost santaclara  scarolina  setonhall  sillinois  #>         83         52        102        112        119         70         57  #>   stanford  stmarysca  tennessee      texas    texasam     tulane   txchrist  #>        248         89         92        265        129         74         80  #>     txtech       ucla      umass        unc      upenn        usc      vandy  #>         53        180         52        154         87        250         65  #>  villanova   virginia       wake     washst  wichitast  wisconsin  wmichigan  #>         86         95         81         74        107         55         68  #>       yale  #>         59   library(\"lattice\") dotplot(SPcount[SPcount>50])  dotplot(sort(SPcount[SPcount>50]))   ## Q: How many schools are represented in this dataset? length(table(CollegePlaying$schoolID)) #> [1] 1038  # Histogram of the number of players from each school who played in MLB: with(CollegePlaying,       hist(table(schoolID), xlab = \"Number of players\",                            main = \"\"))"},{"path":"http://cdalzell.github.io/Lahman/reference/Fielding.html","id":null,"dir":"Reference","previous_headings":"","what":"Fielding table — Fielding","title":"Fielding table — Fielding","text":"Fielding table","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Fielding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fielding table — Fielding","text":"","code":"data(Fielding)"},{"path":"http://cdalzell.github.io/Lahman/reference/Fielding.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fielding table — Fielding","text":"data frame 151507 observations following 18 variables. playerID Player ID code yearID Year stint player's stint (order appearances within season) teamID Team; factor lgID League; factor levels AA AL FL NL PL UA POS Position G Games GS Games Started InnOuts Time played field expressed outs PO Putouts Assists E Errors DP Double Plays PB Passed Balls (catchers) WP Wild Pitches (catchers) SB Opponent Stolen Bases (catchers) CS Opponents Caught Stealing (catchers) ZR Zone Rating","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Fielding.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fielding table — Fielding","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Fielding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fielding table — Fielding","text":"","code":"data(Fielding) # Basic fielding data  require(\"dplyr\")   # Roberto Clemente's fielding profile # pitching and catching related data removed # subset(Fielding, playerID == \"clemero01\")[, 1:13] Fielding %>%     filter(playerID == \"clemero01\") %>%    select(1:13) #>     playerID yearID stint teamID lgID POS   G  GS InnOuts  PO  A  E DP #> 1  clemero01   1955     1    PIT   NL  OF 118 107    2892 253 18  6  5 #> 2  clemero01   1956     1    PIT   NL  2B   2   0      18   1  1  1  0 #> 3  clemero01   1956     1    PIT   NL  3B   1   0       6   0  2  1  0 #> 4  clemero01   1956     1    PIT   NL  OF 139 130    3499 274 17 13  2 #> 5  clemero01   1957     1    PIT   NL  OF 109 107    2836 272  9  6  1 #> 6  clemero01   1958     1    PIT   NL  OF 135 129    3452 312 22  6  3 #> 7  clemero01   1959     1    PIT   NL  OF 104 102    2700 229 10 13  1 #> 8  clemero01   1960     1    PIT   NL  OF 142 140    3767 246 19  8  2 #> 9  clemero01   1961     1    PIT   NL  OF 144 142    3723 256 27  9  5 #> 10 clemero01   1962     1    PIT   NL  OF 142 138    3686 269 19  8  1 #> 11 clemero01   1963     1    PIT   NL  OF 151 148    3943 239 11 11  2 #> 12 clemero01   1964     1    PIT   NL  OF 154 154    4085 289 13 10  2 #> 13 clemero01   1965     1    PIT   NL  OF 145 143    3810 288 16 10  1 #> 14 clemero01   1966     1    PIT   NL  OF 154 153    4147 318 17 12  3 #> 15 clemero01   1967     1    PIT   NL  OF 145 141    3751 273 17  9  4 #> 16 clemero01   1968     1    PIT   NL  OF 131 128    3477 297  9  5  1 #> 17 clemero01   1969     1    PIT   NL  OF 135 128    3372 226 14  5  1 #> 18 clemero01   1970     1    PIT   NL  OF 104 102    2703 189 12  7  2 #> 19 clemero01   1971     1    PIT   NL  OF 124 120    3243 267 11  2  4 #> 20 clemero01   1972     1    PIT   NL  OF  94  88    2436 199  5  0  2     # Yadier Molina's fielding profile # PB, WP, SP and CS apply to catchers Fielding %>%    subset(playerID == \"molinya01\") %>%   select(-WP, -ZR) #>        playerID yearID stint teamID lgID POS   G  GS InnOuts   PO  A  E DP PB #> 93856 molinya01   2004     1    SLN   NL   C  51  39    1032  256 16  2  1  4 #> 93857 molinya01   2005     1    SLN   NL  1B   1   0       3    0  0  0  0 NA #> 93858 molinya01   2005     1    SLN   NL   C 114 111    2878  684 66  7  4  8 #> 93859 molinya01   2006     1    SLN   NL  1B   4   0      15    5  0  1  1 NA #> 93860 molinya01   2006     1    SLN   NL   C 127 118    3112  734 79  4  6  7 #> 93861 molinya01   2007     1    SLN   NL  1B   1   0       3    1  0  0  0 NA #> 93862 molinya01   2007     1    SLN   NL   C 107 101    2584  582 63  6  8  7 #> 93863 molinya01   2008     1    SLN   NL  1B   2   1      33   13  3  0  1 NA #> 93864 molinya01   2008     1    SLN   NL   C 119 114    3006  653 70 10  7  5 #> 93865 molinya01   2009     1    SLN   NL  1B   6   0      30   10  1  0  2 NA #> 93866 molinya01   2009     1    SLN   NL   C 138 136    3530  884 82  5  6  4 #> 93867 molinya01   2010     1    SLN   NL  1B   7   0      21    7  0  0  2 NA #> 93868 molinya01   2010     1    SLN   NL   C 135 130    3414  895 79  5 10  7 #> 93869 molinya01   2011     1    SLN   NL  1B   2   0       6    3  0  1  0 NA #> 93870 molinya01   2011     1    SLN   NL   C 137 132    3450  857 67  5  5  6 #> 93871 molinya01   2012     1    SLN   NL  1B   3   0      27   11  2  0  0 NA #> 93872 molinya01   2012     1    SLN   NL   C 136 133    3484  962 88  3 12  6 #> 93873 molinya01   2013     1    SLN   NL  1B   5   2      54   17  1  0  1 NA #> 93874 molinya01   2013     1    SLN   NL   C 131 129    3346  976 63  4 11  3 #> 93875 molinya01   2014     1    SLN   NL  1B   1   1      27   10  1  0  0 NA #> 93876 molinya01   2014     1    SLN   NL   C 107 106    2795  810 56  2 10  3 #> 93877 molinya01   2015     1    SLN   NL   C 134 131    3449 1064 56  7  9  4 #> 93878 molinya01   2016     1    SLN   NL  1B   2   1      21   10  1  0  0 NA #> 93879 molinya01   2016     1    SLN   NL   C 146 142    3655 1113 60  2  5  8 #> 93880 molinya01   2017     1    SLN   NL  1B   1   0       6    4  0  0  0 NA #> 93881 molinya01   2017     1    SLN   NL   C 133 133    3377 1082 55  7 13  6 #> 93882 molinya01   2018     1    SLN   NL  1B   5   0      36    9  2  1  3 NA #> 93883 molinya01   2018     1    SLN   NL   C 121 120    3053  966 42  2  8  4 #> 93884 molinya01   2019     1    SLN   NL  1B   4   0      24    6  0  0  1 NA #> 93885 molinya01   2019     1    SLN   NL  3B   1   0       3    0  0  0  0 NA #> 93886 molinya01   2019     1    SLN   NL   C 111 108    2818  916 30  1  5  4 #> 93887 molinya01   2020     1    SLN   NL  1B   2   0      15    3  0  0  0 NA #> 93888 molinya01   2020     1    SLN   NL   C  42  42    1012  307 16  5  1  3 #> 93889 molinya01   2021     1    SLN   NL  1B   1   0       9    1  1  0  0 NA #> 93890 molinya01   2021     1    SLN   NL   C 118 118    3004  869 49  3 10  6 #> 93891 molinya01   2022     1    SLN   NL  1B   1   0       3    0  0  0  0 NA #> 93892 molinya01   2022     1    SLN   NL   C  77  71    1885  512 25  3  6  1 #> 93893 molinya01   2022     1    SLN   NL   P   2   0       6    0  0  0  0 NA #>       SB CS #> 93856  9  8 #> 93857 NA NA #> 93858 14 25 #> 93859 NA NA #> 93860 37 29 #> 93861 NA NA #> 93862 23 27 #> 93863 NA NA #> 93864 34 18 #> 93865 NA NA #> 93866 32 22 #> 93867 NA NA #> 93868 35 33 #> 93869 NA NA #> 93870 46 19 #> 93871 NA NA #> 93872 38 35 #> 93873 NA NA #> 93874 26 20 #> 93875 NA NA #> 93876 23 21 #> 93877 37 26 #> 93878 NA NA #> 93879 67 18 #> 93880 NA NA #> 93881 43 24 #> 93882 NA NA #> 93883 27 12 #> 93884 NA NA #> 93885 NA NA #> 93886 22  8 #> 93887 NA NA #> 93888  6  5 #> 93889 NA NA #> 93890 26 18 #> 93891 NA NA #> 93892 20 13 #> 93893 NA NA  # Pedro Martinez's fielding profile Fielding %>% subset(playerID == \"martipe02\") #>        playerID yearID stint teamID lgID POS  G GS InnOuts PO  A E DP PB WP SB #> 85473 martipe02   1992     1    LAN   NL   P  2  1      24  0  0 0  0 NA NA NA #> 85474 martipe02   1993     1    LAN   NL   P 65  2     321  4  4 0  1 NA NA NA #> 85475 martipe02   1994     1    MON   NL   P 24 23     434  9 15 4  0 NA NA NA #> 85476 martipe02   1995     1    MON   NL   P 30 30     584 14 23 2  0 NA NA NA #> 85477 martipe02   1996     1    MON   NL   P 33 33     650 11 17 3  1 NA NA NA #> 85478 martipe02   1997     1    MON   NL   P 31 31     724  7 31 1  1 NA NA NA #> 85479 martipe02   1998     1    BOS   AL   P 33 33     701 11 18 4  3 NA NA NA #> 85480 martipe02   1999     1    BOS   AL   P 31 29     640 13 15 1  0 NA NA NA #> 85481 martipe02   2000     1    BOS   AL   P 29 29     651 14 28 0  2 NA NA NA #> 85482 martipe02   2001     1    BOS   AL   P 18 18     350  5  5 0  0 NA NA NA #> 85483 martipe02   2002     1    BOS   AL   P 30 30     598 16 16 2  1 NA NA NA #> 85484 martipe02   2003     1    BOS   AL   P 29 29     560 14 20 0  0 NA NA NA #> 85485 martipe02   2004     1    BOS   AL   P 33 33     651 16 16 1  0 NA NA NA #> 85486 martipe02   2005     1    NYN   NL   P 31 31     651  6 19 0  0 NA NA NA #> 85487 martipe02   2006     1    NYN   NL   P 23 23     398  7 13 5  0 NA NA NA #> 85488 martipe02   2007     1    NYN   NL   P  5  5      84  1  0 0  0 NA NA NA #> 85489 martipe02   2008     1    NYN   NL   P 20 20     327  6 17 0  1 NA NA NA #> 85490 martipe02   2009     1    PHI   NL   P  9  9     134  1  6 0  1 NA NA NA #>       CS ZR #> 85473 NA NA #> 85474 NA NA #> 85475 NA NA #> 85476 NA NA #> 85477 NA NA #> 85478 NA NA #> 85479 NA NA #> 85480 NA NA #> 85481 NA NA #> 85482 NA NA #> 85483 NA NA #> 85484 NA NA #> 85485 NA NA #> 85486 NA NA #> 85487 NA NA #> 85488 NA NA #> 85489 NA NA #> 85490 NA NA  # Table of games played by Pete Rose at different positions with(subset(Fielding, playerID == \"rosepe01\"), xtabs(G ~ POS)) #> POS #>   1B   2B   3B   OF  #>  939  628  634 1327   # Career total G/PO/A/E/DP for Luis Aparicio Fielding %>%     filter(playerID == \"aparilu01\") %>%      select(G, PO, A, E, DP) %>%     summarise_each(funs(sum)) #> Warning: `summarise_each()` was deprecated in dplyr 0.7.0. #> ℹ Please use `across()` instead. #> Warning: `funs()` was deprecated in dplyr 0.8.0. #> ℹ Please use a list of either functions or lambdas: #>  #> # Simple named list: list(mean = mean, median = median) #>  #> # Auto named with `tibble::lst()`: tibble::lst(mean, median) #>  #> # Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) #>      G   PO    A   E   DP #> 1 2583 4548 8016 366 1553   # Top ten 2B/SS in turning DPs Fielding %>%     subset(POS %in% c(\"2B\", \"SS\")) %>%     group_by(playerID) %>%     summarise(TDP = sum(DP, na.rm = TRUE)) %>%     arrange(desc(TDP)) %>%     head(., 10) #> # A tibble: 10 × 2 #>    playerID    TDP #>    <chr>     <int> #>  1 vizquom01  1775 #>  2 mazerbi01  1706 #>  3 foxne01    1619 #>  4 smithoz01  1590 #>  5 ripkeca01  1565 #>  6 aparilu01  1553 #>  7 randowi01  1547 #>  8 whitalo01  1527 #>  9 doerrbo01  1507 #> 10 morgajo02  1505  # League average fielding statistics, 1961-present Fielding %>%     filter(yearID >= 1961 & POS != \"DH\") %>%    select(yearID, lgID, POS, InnOuts, PO, A, E) %>%    group_by(yearID, lgID) %>%    summarise_at(vars(InnOuts, PO, A, E), funs(sum), na.rm = TRUE) %>%    mutate(fpct = round( (PO + A)/(PO + A + E), 3),            OPE = round(InnOuts/E, 3)) #> Warning: `funs()` was deprecated in dplyr 0.8.0. #> ℹ Please use a list of either functions or lambdas: #>  #> # Simple named list: list(mean = mean, median = median) #>  #> # Auto named with `tibble::lst()`: tibble::lst(mean, median) #>  #> # Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) #> # A tibble: 126 × 8 #> # Groups:   yearID [63] #>    yearID lgID  InnOuts    PO     A     E  fpct   OPE #>     <int> <fct>   <int> <int> <int> <int> <dbl> <dbl> #>  1   1961 AL     389523 43213 17237  1506 0.976  259. #>  2   1961 NL     297720 33080 13728  1167 0.976  255. #>  3   1962 AL     391878 43449 17138  1364 0.978  287. #>  4   1962 NL     391206 43470 17832  1555 0.975  252. #>  5   1963 AL     392877 43589 16998  1347 0.978  292. #>  6   1963 NL     392946 43661 17681  1577 0.975  249. #>  7   1964 AL     394593 43774 17130  1261 0.98   313. #>  8   1964 NL     392094 43566 17933  1586 0.975  247. #>  9   1965 AL     392562 43546 17231  1359 0.978  289. #> 10   1965 NL     395384 43932 18008  1486 0.977  266. #> # ℹ 116 more rows"},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOF.html","id":null,"dir":"Reference","previous_headings":"","what":"FieldingOF table — FieldingOF","title":"FieldingOF table — FieldingOF","text":"Outfield position data: information positions played outfield","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldingOF table — FieldingOF","text":"","code":"data(FieldingOF)"},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FieldingOF table — FieldingOF","text":"data frame 12380 observations following 6 variables. playerID Player ID code yearID Year stint player's stint (order appearances within season) Glf Games played left field Gcf Games played center field Grf Games played right field","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOF.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FieldingOF table — FieldingOF","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FieldingOF table — FieldingOF","text":"","code":"require(\"dplyr\") require(\"tidyr\")  ## Data set only goes through 1955 ## Can get a more complete record from the Fielding data frame ## or from the Appearances data (see below)  ## Output directly from the FieldingOF data  ## Barry Bonds (no records: post-1955 player) FieldingOF %>%     filter(playerID == \"bondsba01\")  #> [1] playerID yearID   stint    Glf      Gcf      Grf      #> <0 rows> (or 0-length row.names)  ## Willie Mays (first few years) FieldingOF %>%    filter(playerID == \"mayswi01\")  #>   playerID yearID stint Glf Gcf Grf #> 1 mayswi01   1951     1   0 121   0 #> 2 mayswi01   1952     1   0  34   0 #> 3 mayswi01   1954     1   0 151   0 #> 4 mayswi01   1955     1   0 152   0  ## Ty Cobb (complete) FieldingOF %>%    filter(playerID == \"cobbty01\")  #>    playerID yearID stint Glf Gcf Grf #> 1  cobbty01   1905     1   2  39   0 #> 2  cobbty01   1906     1  18  55  24 #> 3  cobbty01   1907     1   0   0 150 #> 4  cobbty01   1908     1   0   0 150 #> 5  cobbty01   1909     1   0   0 156 #> 6  cobbty01   1910     1   0 111  26 #> 7  cobbty01   1911     1   0 146   0 #> 8  cobbty01   1912     1   0 140   0 #> 9  cobbty01   1913     1   0 116   2 #> 10 cobbty01   1914     1   0  96   0 #> 11 cobbty01   1915     1   0 156   0 #> 12 cobbty01   1916     1   0 143   0 #> 13 cobbty01   1917     1   0 123  29 #> 14 cobbty01   1918     1   0  92   3 #> 15 cobbty01   1919     1   0 123   0 #> 16 cobbty01   1920     1   0 112   0 #> 17 cobbty01   1921     1   0 121   0 #> 18 cobbty01   1922     1   0 133   1 #> 19 cobbty01   1923     1   0 141   0 #> 20 cobbty01   1924     1   0 155   0 #> 21 cobbty01   1925     1   0 101   4 #> 22 cobbty01   1926     1  15  39   1 #> 23 cobbty01   1927     1   0  52  75 #> 24 cobbty01   1928     1   0   0  85  ## One way to get OF game information from the Fielding data ## Note: OF games != sum(LF, CF, RF) because players can switch ## OF positions within a game. Players can also switch from ## other positions to outfield during a game. OF represents ## the number of games a player started in the outfield. Fielding %>%    select(playerID, yearID, stint, POS, G) %>%    filter(POS %in% c(\"LF\", \"CF\", \"RF\", \"OF\")) %>%    tidyr::spread(POS, G, fill = 0) %>%    filter(playerID == \"trumbma01\") #>     playerID yearID stint OF #> 1  trumbma01   2010     1  1 #> 2  trumbma01   2011     1 11 #> 3  trumbma01   2012     1 97 #> 4  trumbma01   2013     1 27 #> 5  trumbma01   2014     1 41 #> 6  trumbma01   2015     1 42 #> 7  trumbma01   2015     2 46 #> 8  trumbma01   2016     1 96 #> 9  trumbma01   2017     1 31 #> 10 trumbma01   2018     1 19  ## Another way is through the Appearances data (no stint). ## Provides a somewhat nicer table than the above.  ## Mark Trumbo (active player) Appearances %>%    select(playerID, yearID, G_lf, G_cf, G_rf, G_of) %>%    filter(playerID == \"trumbma01\") #>     playerID yearID G_lf G_cf G_rf G_of #> 1  trumbma01   2010    0    0    1    1 #> 2  trumbma01   2011    1    0   10   11 #> 3  trumbma01   2012   66    0   35   97 #> 4  trumbma01   2013    8    0   19   27 #> 5  trumbma01   2014   41    0    0   41 #> 6  trumbma01   2015    0    0   42   42 #> 7  trumbma01   2015   13    0   34   46 #> 8  trumbma01   2016    1    0   95   96 #> 9  trumbma01   2017    0    0   31   31 #> 10 trumbma01   2018    0    0   19   19 #> 11 trumbma01   2019    0    0    0    0  ## A slightly better format, perhaps Appearances %>%   select(playerID, yearID, G_lf, G_cf, G_rf, G_of) %>%   rename(LF = G_lf, CF = G_cf, RF = G_rf, OF = G_of) %>%   filter(playerID == \"trumbma01\") #>     playerID yearID LF CF RF OF #> 1  trumbma01   2010  0  0  1  1 #> 2  trumbma01   2011  1  0 10 11 #> 3  trumbma01   2012 66  0 35 97 #> 4  trumbma01   2013  8  0 19 27 #> 5  trumbma01   2014 41  0  0 41 #> 6  trumbma01   2015  0  0 42 42 #> 7  trumbma01   2015 13  0 34 46 #> 8  trumbma01   2016  1  0 95 96 #> 9  trumbma01   2017  0  0 31 31 #> 10 trumbma01   2018  0  0 19 19 #> 11 trumbma01   2019  0  0  0  0  ## Willie Mays (1951-1973) Appearances %>%   select(playerID, yearID, G_lf, G_cf, G_rf, G_of) %>%   filter(playerID == \"mayswi01\") #>    playerID yearID G_lf G_cf G_rf G_of #> 1  mayswi01   1951    0  121    0  121 #> 2  mayswi01   1952    0   34    0   34 #> 3  mayswi01   1954    0  151    0  151 #> 4  mayswi01   1955    0  152    0  152 #> 5  mayswi01   1956    0  152    0  152 #> 6  mayswi01   1957    0  150    0  150 #> 7  mayswi01   1958    0  151    0  151 #> 8  mayswi01   1959    0  147    0  147 #> 9  mayswi01   1960    0  152    0  152 #> 10 mayswi01   1961    0  153    0  153 #> 11 mayswi01   1962    0  161    0  161 #> 12 mayswi01   1963    0  157    0  157 #> 13 mayswi01   1964    0  155    0  155 #> 14 mayswi01   1965    1  147    4  150 #> 15 mayswi01   1966    1  144    5  149 #> 16 mayswi01   1967    0  134    0  134 #> 17 mayswi01   1968    0  141    1  142 #> 18 mayswi01   1969    0  106    2  108 #> 19 mayswi01   1970    0  128    0  128 #> 20 mayswi01   1971    0   84    0   84 #> 21 mayswi01   1972    0   50    0   50 #> 22 mayswi01   1972    0   14    0   14 #> 23 mayswi01   1973    0   45    0   45  ## Joe DiMaggio (1936-1951) Appearances %>%   select(playerID, yearID, G_lf, G_cf, G_rf, G_of) %>%   filter(playerID == \"dimagjo01\") #>     playerID yearID G_lf G_cf G_rf G_of #> 1  dimagjo01   1936   64   55   20  138 #> 2  dimagjo01   1937    0  150    0  150 #> 3  dimagjo01   1938    0  145    0  145 #> 4  dimagjo01   1939    0  116    0  116 #> 5  dimagjo01   1940    0  130    0  130 #> 6  dimagjo01   1941    0  139    0  139 #> 7  dimagjo01   1942    0  154    0  154 #> 8  dimagjo01   1946    3  128    0  131 #> 9  dimagjo01   1947    0  139    0  139 #> 10 dimagjo01   1948    0  152    0  152 #> 11 dimagjo01   1949    0   76    0   76 #> 12 dimagjo01   1950    0  137    0  137 #> 13 dimagjo01   1951    0  113    0  113"},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOFsplit.html","id":null,"dir":"Reference","previous_headings":"","what":"FieldingOFsplit table — FieldingOFsplit","title":"FieldingOFsplit table — FieldingOFsplit","text":"Outfield position data: information positions played outfield","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOFsplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldingOFsplit table — FieldingOFsplit","text":"","code":"data(FieldingOFsplit)"},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOFsplit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FieldingOFsplit table — FieldingOFsplit","text":"data frame 35995 observations following 18 variables. playerID Player ID code yearID Year stint player's stint (order appearances within season) teamID Team; factor lgID League; factor levels AA AL FL NL PL UA POS Position G Games GS Games Started InnOuts Time played field expressed outs PO Putouts Assists E Errors DP Double Plays PB Passed Balls (catchers) WP Wild Pitches (catchers) SB Opponent Stolen Bases (catchers) CS Opponents Caught Stealing (catchers) ZR Zone Rating","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOFsplit.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FieldingOFsplit table — FieldingOFsplit","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingOFsplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FieldingOFsplit table — FieldingOFsplit","text":"","code":"require(\"dplyr\") require(\"tidyr\")  ## Data set starts in 1954 ## Can get a more complete record from the Fielding data frame ## or from the Appearances data (see below)  ## Output directly from the FieldingOFsplit data  ## Joe DiMaggio (no records: pre-1954 player) FieldingOFsplit %>%     filter(playerID == \"dimagjo01\")  #>  [1] playerID yearID   stint    teamID   lgID     POS      G        GS       #>  [9] InnOuts  PO       A        E        DP       PB       WP       SB       #> [17] CS       ZR       #> <0 rows> (or 0-length row.names)  ## Willie Mays (all but his first few years) FieldingOF %>%    filter(playerID == \"mayswi01\")  #>   playerID yearID stint Glf Gcf Grf #> 1 mayswi01   1951     1   0 121   0 #> 2 mayswi01   1952     1   0  34   0 #> 3 mayswi01   1954     1   0 151   0 #> 4 mayswi01   1955     1   0 152   0  ## Mike Trout (complete) FieldingOF %>%    filter(playerID == \"troutmi01\") #>    playerID yearID stint Glf Gcf Grf #> 1 troutmi01   2023     1   0  79   0"},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingPost.html","id":null,"dir":"Reference","previous_headings":"","what":"FieldingPost data — FieldingPost","title":"FieldingPost data — FieldingPost","text":"Post season fielding data","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingPost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldingPost data — FieldingPost","text":"","code":"data(FieldingPost)"},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingPost.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FieldingPost data — FieldingPost","text":"data frame 16606 observations following 17 variables. playerID Player ID code yearID Year teamID Team; factor lgID League; factor levels AL NL round Level playoffs POS Position G Games GS Games Started InnOuts Time played field expressed outs PO Putouts Assists E Errors DP Double Plays TP Triple Plays PB Passed Balls SB Stolen Bases allowed (catcher) CS Caught Stealing (catcher)","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingPost.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FieldingPost data — FieldingPost","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/FieldingPost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FieldingPost data — FieldingPost","text":"","code":"require(\"dplyr\")  ## World Series fielding record for Yogi Berra FieldingPost %>%   filter(playerID == \"berrayo01\" & round == \"WS\") #>     playerID yearID teamID lgID round POS G GS InnOuts PO A E DP TP PB SB CS #> 1  berrayo01   1947    NYA   AL    WS   C 4  3      86 19 2 2  0  0  0 NA NA #> 2  berrayo01   1947    NYA   AL    WS  RF 2  1      36  3 0 0  0  0 NA NA NA #> 3  berrayo01   1949    NYA   AL    WS   C 4  4     108 37 3 0  1  0  0 NA NA #> 4  berrayo01   1950    NYA   AL    WS   C 4  4     111 30 1 0  1  0  0 NA NA #> 5  berrayo01   1951    NYA   AL    WS   C 6  6     159 27 3 1  0  0  1 NA NA #> 6  berrayo01   1952    NYA   AL    WS   C 7  7     192 59 7 1  1  0  1 NA NA #> 7  berrayo01   1953    NYA   AL    WS   C 6  6     156 37 3 0  1  0  0 NA NA #> 8  berrayo01   1955    NYA   AL    WS   C 7  7     180 40 4 0  1  0  0 NA NA #> 9  berrayo01   1956    NYA   AL    WS   C 7  7     185 50 3 0  0  0  0 NA NA #> 10 berrayo01   1957    NYA   AL    WS   C 7  7     187 45 2 1  0  0  0 NA NA #> 11 berrayo01   1958    NYA   AL    WS   C 7  7     191 60 6 0  1  0  1 NA NA #> 12 berrayo01   1960    NYA   AL    WS   C 3  2      54 13 1 0  0  0  0 NA NA #> 13 berrayo01   1960    NYA   AL    WS  LF 3  3      60  4 0 0  0  0 NA NA NA #> 14 berrayo01   1960    NYA   AL    WS  RF 1  0       9  1 0 0  0  0 NA NA NA #> 15 berrayo01   1961    NYA   AL    WS  LF 4  4     108 11 0 1  0  0 NA NA NA #> 16 berrayo01   1962    NYA   AL    WS   C 1  1      24  6 1 0  0  0  0 NA NA  ## Yogi's career efficiency in throwing out base stealers  ## in his WS appearances and CS as a percentage of his  ## overall assists FieldingPost %>%   filter(playerID == \"berrayo01\" & round == \"WS\" & POS == \"C\") %>%   summarise(cs_pct = round(100 * sum(CS)/sum(SB + CS), 2),             cs_assists = round(100 * sum(CS)/sum(A), 2)) #>   cs_pct cs_assists #> 1     NA         NA  ## Innings per error for several selected shortstops in the WS FieldingPost %>%   filter(playerID %in% c(\"belanma01\", \"jeterde01\", \"campabe01\",                          \"conceda01\", \"bowala01\"), round == \"WS\") %>%   group_by(playerID) %>%   summarise(G = sum(G),             InnOuts = sum(InnOuts),             Eper9 = round(27 * sum(E)/sum(InnOuts), 3)) #> # A tibble: 5 × 4 #>   playerID      G InnOuts Eper9 #>   <chr>     <int>   <int> <dbl> #> 1 belanma01    22     504 0.268 #> 2 bowala01      6     161 0     #> 3 campabe01    19     516 0.209 #> 4 conceda01    19     482 0.168 #> 5 jeterde01    38    1027 0.079   ## Top 10 center fielders in innings played in the WS FieldingPost %>%   filter(POS == \"CF\" & round == \"WS\") %>%   group_by(playerID) %>%   summarise(inn_total = sum(InnOuts)) %>%   arrange(desc(inn_total)) %>%   head(., 10) #> # A tibble: 10 × 2 #>    playerID  inn_total #>    <chr>         <int> #>  1 dimagjo01      1370 #>  2 mantlmi01      1364 #>  3 willibe02       880 #>  4 snidedu01       868 #>  5 floodcu01       558 #>  6 mcgeewi01       542 #>  7 speaktr01       537 #>  8 whitede03       516 #>  9 grissma02       515 #> 10 hendeda01       508  ## Most total chances by position FieldingPost %>%   filter(round == \"WS\" & !(POS %in% c(\"DH\", \"OF\", \"P\"))) %>%   group_by(POS, playerID) %>%   summarise(TC = sum(PO + A + E)) %>%   arrange(desc(TC)) %>%   do(head(., 1))    # provides top player by position #> `summarise()` has grouped output by 'POS'. You can override using the `.groups` #> argument. #> # A tibble: 8 × 3 #> # Groups:   POS [8] #>   POS   playerID     TC #>   <chr> <chr>     <int> #> 1 1B    hodgegi01   353 #> 2 2B    friscfr01   247 #> 3 3B    gardnla01    97 #> 4 C     berrayo01   464 #> 5 CF    dimagjo01   151 #> 6 LF    gosligo01    68 #> 7 RF    bauerha01    81 #> 8 SS    rizzuph01   259"},{"path":"http://cdalzell.github.io/Lahman/reference/HallOfFame.html","id":null,"dir":"Reference","previous_headings":"","what":"Hall of Fame Voting Data — HallOfFame","title":"Hall of Fame Voting Data — HallOfFame","text":"Hall Fame table. composed voting results candidates nominated Baseball Hall Fame.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HallOfFame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hall of Fame Voting Data — HallOfFame","text":"","code":"data(HallOfFame)"},{"path":"http://cdalzell.github.io/Lahman/reference/HallOfFame.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hall of Fame Voting Data — HallOfFame","text":"data frame 6382 observations following 9 variables. playerID Player ID code yearID Year ballot votedBy Method player voted upon.  See Details ballots Total ballots cast year needed Number votes needed selection year votes Total votes received inducted Whether player inducted vote (Y N) category Category candidate; factor levels Manager Pioneer/Executive Player Umpire needed_note Explanation qualifiers special elections","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HallOfFame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hall of Fame Voting Data — HallOfFame","text":"table links People table via playerID. votedBy: Hall Fame inductees elected Baseball Writers Association America (BBWAA).  Rules election described https://en.wikipedia.org/wiki/National_Baseball_Hall_of_Fame_and_Museum#Selection_process.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HallOfFame.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hall of Fame Voting Data — HallOfFame","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HallOfFame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hall of Fame Voting Data — HallOfFame","text":"","code":"## Some examples for  Hall of Fame induction data  require(\"dplyr\") require(\"ggplot2\")  ############################################################ ## Some simple queries  # What are the different types of HOF voters? table(HallOfFame$votedBy) #>  #>                                 BBWAA                            Centennial  #>                                  3932                                     6  #> Contemporary Baseball Era Non-Players                      Contemporary Era  #>                                     8                                     8  #>                          Final Ballot                          Negro League  #>                                    21                                    48  #>                       Nominating Vote                            Old Timers  #>                                    76                                    30  #>                               Run Off                      Special Election  #>                                    81                                     2  #>                              Veterans             Veterans - 1943 and Later  #>                                  1255                                    21  #>               Veterans - Contributors         Veterans - Early Baseball Era  #>                                   120                                    10  #>                 Veterans - Executives              Veterans - Expansion Era  #>                                    20                                    24  #>             Veterans - Golden Age Era                 Veterans - Golden Era  #>                                    10                                    20  #>       Veterans - Managers and Umpires        Veterans - Modern Baseball Era  #>                                    20                                    20  #>                    Veterans - Players                   Veterans - Pre-1943  #>                                   600                                    10  #>        Veterans - Pre-Integration Era           Veterans - Today's Game Era  #>                                    20                                    20   # What was the first year of Hall of Fame elections? sort(unique(HallOfFame$yearID))[1] #> [1] 1936 # Who comprised the original class? subset(HallOfFame, yearID == 1936 & inducted == \"Y\") #>       playerID yearID votedBy ballots needed votes inducted category #> 876   cobbty01   1936   BBWAA     226    170   222        Y   Player #> 2845 mathech01   1936   BBWAA     226    170   205        Y   Player #> 3045 johnswa01   1936   BBWAA     226    170   189        Y   Player #> 4257  ruthba01   1936   BBWAA     226    170   215        Y   Player #> 5888 wagneho01   1936   BBWAA     226    170   215        Y   Player #>      needed_note #> 876         <NA> #> 2845        <NA> #> 3045        <NA> #> 4257        <NA> #> 5888        <NA>  # Result of a player's last year on the BBWAA ballot # Restrict to players voted by BBWAA: HOFplayers <- subset(HallOfFame,                   votedBy == \"BBWAA\" & category == \"Player\")   # Number of years as HOF candidate, last pct vote, etc. # for a given player playerOutcomes <- HallOfFame %>%     filter(votedBy == \"BBWAA\" & category == \"Player\") %>%     group_by(playerID) %>%     mutate(nyears = length(ballots)) %>%     arrange(yearID) %>%     do(tail(., 1)) %>%     mutate(lastPct = 100 * round(votes/ballots, 3)) %>%     select(playerID, nyears, inducted, lastPct, yearID) %>%     rename(lastYear = yearID)   ############################################################ # How many voting years until election? inducted <- subset(playerOutcomes, inducted == \"Y\") table(inducted$nyears) #>  #>  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15  #> 59 11 10  8  8  7  3  4  6  6  3  1  4  1  2   # Bar chart of years to induction for inductees barplot(table(inducted$nyears),          main=\"Number of voting years until election\",         ylab=\"Number of players\", xlab=\"Years\") box()   # What is the form of this distribution? require(\"vcd\") #> Loading required package: vcd #> Loading required package: grid goodfit(inducted$nyears) #>  #> Observed and fitted values for poisson distribution #> with parameters estimated by `ML'  #>  #>  count observed       fitted pearson residual #>      0        0  2.417733017     -1.554906112 #>      1       59  9.689110511     15.841667070 #>      2       11 19.414646250     -1.909726270 #>      3       10 25.934853261     -3.129004379 #>      4        8 25.983602985     -3.527987359 #>      5        8 20.825955475     -2.810523754 #>      6        7 13.910068005     -1.852753724 #>      7        3  7.963551286     -1.758891795 #>      8        4  3.989260183      0.005377132 #>      9        6  1.776337241      3.169031265 #>     10        6  0.711870488      6.267604568 #>     11        3  0.259348578      5.381605592 #>     12        1  0.086612025      3.103603212 #>     13        4  0.026699948     24.316225271 #>     14        1  0.007642896     11.351127767 #>     15        2  0.002041937     38.382154172 plot(goodfit(inducted$nyears), xlab=\"Number of years\",   main=\"Poissonness plot of number of years voting until election\")  Ord_plot(table(inducted$nyears), xlab=\"Number of years\")     # First ballot inductees sorted by vote percentage: playerOutcomes %>%   filter(nyears == 1L & inducted == \"Y\") %>%   arrange(desc(lastPct)) #> # A tibble: 59 × 5 #> # Groups:   playerID [59] #>    playerID  nyears inducted lastPct lastYear #>    <chr>      <int> <fct>      <dbl>    <int> #>  1 riverma01      1 Y          100       2019 #>  2 jeterde01      1 Y           99.7     2020 #>  3 griffke02      1 Y           99.3     2016 #>  4 ryanno01       1 Y           98.8     1999 #>  5 seaveto01      1 Y           98.8     1992 #>  6 ripkeca01      1 Y           98.5     2007 #>  7 brettge01      1 Y           98.2     1999 #>  8 cobbty01       1 Y           98.2     1936 #>  9 aaronha01      1 Y           97.8     1982 #> 10 gwynnto01      1 Y           97.6     2007 #> # ℹ 49 more rows  # Who took at least ten years on the ballot before induction? playerOutcomes %>%   filter(nyears >= 10L & inducted == \"Y\") #> # A tibble: 17 × 5 #> # Groups:   playerID [17] #>    playerID  nyears inducted lastPct lastYear #>    <chr>      <int> <fct>      <dbl>    <int> #>  1 blylebe01     14 Y           79.7     2011 #>  2 boudrlo01     10 Y           77.3     1970 #>  3 cronijo01     10 Y           78.8     1956 #>  4 drysddo01     10 Y           78.4     1984 #>  5 hartnga01     11 Y           77.7     1955 #>  6 heilmha01     11 Y           86.8     1952 #>  7 kinerra01     13 Y           75.4     1975 #>  8 lemonbo01     12 Y           78.6     1976 #>  9 maranra01     13 Y           82.9     1954 #> 10 martied01     10 Y           85.4     2019 #> 11 raineti01     10 Y           86       2017 #> 12 riceji01      15 Y           76.4     2009 #> 13 snidedu01     11 Y           86.5     1980 #> 14 suttebr01     13 Y           76.9     2006 #> 15 terrybi01     13 Y           77.4     1954 #> 16 vanceda01     15 Y           81.7     1955 #> 17 walkela01     10 Y           76.6     2020  ############################################################ ## Plots of voting percentages over time for the borderline ## HOF candidates, according to the BBWAA:  # Identify players on the BBWAA ballot for at least 10 years # Returns a character vector of playerIDs longTimers <- as.character(unlist(subset(playerOutcomes,                                          nyears >= 10, select = \"playerID\")))  # Extract their information from the HallOfFame data HOFlt <- HallOfFame %>%      filter(playerID %in% longTimers & votedBy == \"BBWAA\") %>%     group_by(playerID) %>%     mutate(elected = ifelse(any(inducted == \"Y\"),                                \"Elected\", \"Not elected\"),            pct = 100 * round(votes/ballots, 3))  # Plot the voting profiles: ggplot(HOFlt, aes(x = yearID, y = pct,                   group = playerID)) +     ggtitle(\"Profiles of BBWAA voting percentage, long-time HOF candidates\") +     geom_line() +     geom_hline(yintercept = 75, colour = 'red') +     labs(x = \"Year\", y = \"Percentage of votes\") +     facet_wrap(~ elected, ncol = 1)       ## Eventual inductees tend to have increasing support over time. ## Fit simple linear regression models to each player's voting ## percentage profile and extract the slopes. Then compare the ## distributions of the slopes in each group.  # data frame for playerID and induction status among # long term candidates HOFstatus <- HOFlt %>%                 group_by(playerID) %>%                select(playerID, elected, inducted) %>%                do(tail(., 1))  # data frame of regression slopes, which represent average # increase in percentage support by BBWAA members over a # player's candidacy. HOFslope <- HOFlt %>%               group_by(playerID) %>%               do(mod = lm(pct ~ yearID, data = .)) %>%               do(data.frame(slope = coef(.$mod)[2]))  ## Boxplots of regression slopes by induction group ggplot(data.frame(HOFstatus, HOFslope),         aes(x = elected, y = slope)) +     geom_boxplot(width = 0.5) +     geom_point(position = position_jitter(width = 0.2))   # Note 1: Only two players whose maximum voting percentage # was over 60% were not eventually inducted # into the HOF: Gil Hodges and Jack Morris.  # Red Ruffing was elected in a 1967 runoff election while # the others have been voted in by the Veterans Committee.   # Note 2: Of the players whose slope was >= 2.5 among  # non-inductees, only Jack Morris has not (yet) been  # subsequently inducted into the HOF; however, his last year of # eligibility was 2014 so he could be inducted by a future # Veterans Committee."},{"path":"http://cdalzell.github.io/Lahman/reference/HomeGames.html","id":null,"dir":"Reference","previous_headings":"","what":"HomeGames table — HomeGames","title":"HomeGames table — HomeGames","text":"Data mapping teams stadiums played regular season games home team.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HomeGames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HomeGames table — HomeGames","text":"","code":"data(HomeGames)"},{"path":"http://cdalzell.github.io/Lahman/reference/HomeGames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HomeGames table — HomeGames","text":"data frame 3233 observations following 9 variables. year.key Year league.key League; factor levels AA AL FL NL PL UA team.key Team; factor park.key Unique identifier ballpark span.first First date park began acting home field team span.last Last date park began acting home field team games Total games time span openings Total opening time span attendance Total attendance time span","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HomeGames.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"HomeGames table — HomeGames","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/HomeGames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HomeGames table — HomeGames","text":"","code":"data(HomeGames) library(dplyr)  # How many parks has every team played in as the home team for even a single game? HomeGames %>%   count(team.key) %>%   arrange(team.key) #>     team.key   n #> 1        ALT   1 #> 2        ANA   8 #> 3        ARI  27 #> 4        ATL  59 #> 5        BAL  70 #> 6        BFN   9 #> 7        BFP   1 #> 8        BL1   3 #> 9        BL2   8 #> 10       BL3   3 #> 11       BL4   1 #> 12       BLA   2 #> 13       BLF   2 #> 14       BLN   8 #> 15       BLU   2 #> 16       BOS 129 #> 17       BR1   1 #> 18       BR2   4 #> 19       BR3  11 #> 20       BR4   3 #> 21       BRF   2 #> 22       BRO  71 #> 23       BRP   1 #> 24       BS1  11 #> 25       BS2   1 #> 26       BSN  84 #> 27       BSP   1 #> 28       BSU   1 #> 29       BUF   2 #> 30       CAL  32 #> 31       CH1   2 #> 32       CH2   2 #> 33       CHA 127 #> 34       CHF   2 #> 35       CHN 151 #> 36       CHP   1 #> 37       CHU   3 #> 38       CIN 137 #> 39       CL1   4 #> 40       CL2   6 #> 41       CL3   5 #> 42       CL4  20 #> 43       CL5   2 #> 44       CL6   3 #> 45       CLE 143 #> 46       CLP   1 #> 47       CN1   5 #> 48       CN2   9 #> 49       CN3   1 #> 50       CNU   1 #> 51       COL  31 #> 52       DET 128 #> 53       DTN   8 #> 54       ELI   2 #> 55       FLO  21 #> 56       FW1   1 #> 57       HAR   3 #> 58       HOU  64 #> 59       HR1   4 #> 60       IN1   3 #> 61       IN2   2 #> 62       IN3   3 #> 63       IND   1 #> 64       KC1  13 #> 65       KC2   3 #> 66       KCA  56 #> 67       KCF   2 #> 68       KCN   1 #> 69       KCU   1 #> 70       KEO   1 #> 71       LAA  24 #> 72       LAN  66 #> 73       LS1   2 #> 74       LS2  10 #> 75       LS3  10 #> 76       MIA  12 #> 77       MID   3 #> 78       MIL  26 #> 79       MIN  64 #> 80       ML1  13 #> 81       ML2   1 #> 82       ML3   2 #> 83       ML4  28 #> 84       MLA   1 #> 85       MLU   1 #> 86       MON  38 #> 87       NEW   1 #> 88       NH1   2 #> 89       NY1  81 #> 90       NY2   5 #> 91       NY3   1 #> 92       NY4   9 #> 93       NYA 124 #> 94       NYN  63 #> 95       NYP   1 #> 96       OAK  60 #> 97       PH1   7 #> 98       PH2   6 #> 99       PH3   1 #> 100      PH4  14 #> 101      PHA  54 #> 102      PHI 148 #> 103      PHN   1 #> 104      PHP   1 #> 105      PHU   1 #> 106      PIT 143 #> 107      PRO  10 #> 108      PT1   6 #> 109      PTF   2 #> 110      PTP   1 #> 111      RC1   2 #> 112      RC2   2 #> 113      RIC   1 #> 114      SDN  60 #> 115      SE1   1 #> 116      SEA  48 #> 117      SFN  66 #> 118      SL1   1 #> 119      SL2   1 #> 120      SL3   2 #> 121      SL4  10 #> 122      SL5   3 #> 123      SLA  52 #> 124      SLF   2 #> 125      SLN 136 #> 126      SLU   1 #> 127      SR1   1 #> 128      SR2   3 #> 129      TBA  30 #> 130      TEX  52 #> 131      TL1   2 #> 132      TL2   1 #> 133      TOR  51 #> 134      TRN   7 #> 135      TRO   3 #> 136      WAS  28 #> 137      WIL   1 #> 138      WOR   3 #> 139      WS1  60 #> 140      WS2  11 #> 141      WS3   5 #> 142      WS4   1 #> 143      WS5   1 #> 144      WS6   3 #> 145      WS7   1 #> 146      WS8   5 #> 147      WS9   1 #> 148      WSU   1  # What parks have the Toronto Blue Jays played in as the home team? HomeGames %>%   filter(team.key == \"TOR\") %>%   arrange(span.last) #>    year.key league.key team.key park.key span.first  span.last games openings #> 1      1977         AL      TOR    TOR01 1977-04-07 1977-10-02    80       72 #> 2      1978         AL      TOR    TOR01 1978-04-14 1978-09-24    81       73 #> 3      1979         AL      TOR    TOR01 1979-04-13 1979-09-23    81       77 #> 4      1980         AL      TOR    TOR01 1980-04-16 1980-10-01    81       75 #> 5      1981         AL      TOR    TOR01 1981-04-13 1981-09-23    53       51 #> 6      1982         AL      TOR    TOR01 1982-04-09 1982-10-03    81       77 #> 7      1983         AL      TOR    TOR01 1983-04-09 1983-10-02    81       77 #> 8      1984         AL      TOR    TOR01 1984-04-17 1984-09-23    81       79 #> 9      1985         AL      TOR    TOR01 1985-04-16 1985-10-06    80       78 #> 10     1986         AL      TOR    TOR01 1986-04-14 1986-10-05    81       78 #> 11     1987         AL      TOR    TOR01 1987-04-06 1987-09-30    81       81 #> 12     1988         AL      TOR    TOR01 1988-04-11 1988-10-02    81       81 #> 13     1989         AL      TOR    TOR01 1989-04-14 1989-05-28    26       26 #> 14     1989         AL      TOR    TOR02 1989-06-05 1989-10-01    55       54 #> 15     1990         AL      TOR    TOR02 1990-04-10 1990-09-23    81       81 #> 16     1991         AL      TOR    TOR02 1991-04-08 1991-10-02    81       81 #> 17     1992         AL      TOR    TOR02 1992-04-10 1992-10-04    81       81 #> 18     1993         AL      TOR    TOR02 1993-04-09 1993-09-26    81       81 #> 19     1994         AL      TOR    TOR02 1994-04-04 1994-08-10    59       59 #> 20     1995         AL      TOR    TOR02 1995-04-26 1995-10-01    72       72 #> 21     1996         AL      TOR    TOR02 1996-04-09 1996-09-29    81       81 #> 22     1997         AL      TOR    TOR02 1997-04-01 1997-09-28    81       81 #> 23     1998         AL      TOR    TOR02 1998-04-01 1998-09-27    81       81 #> 24     1999         AL      TOR    TOR02 1999-04-12 1999-09-26    81       81 #> 25     2000         AL      TOR    TOR02 2000-04-03 2000-09-25    81       81 #> 26     2001         AL      TOR    SJU01 2001-04-01 2001-04-01     1        1 #> 27     2001         AL      TOR    TOR02 2001-04-09 2001-10-07    81       80 #> 28     2002         AL      TOR    TOR02 2002-04-04 2002-09-29    81       81 #> 29     2003         AL      TOR    TOR02 2003-03-31 2003-09-28    81       81 #> 30     2004         AL      TOR    TOR02 2004-04-05 2004-10-03    81       81 #> 31     2005         AL      TOR    TOR02 2005-04-08 2005-10-02    81       81 #> 32     2006         AL      TOR    TOR02 2006-04-04 2006-09-25    81       81 #> 33     2007         AL      TOR    TOR02 2007-04-09 2007-09-30    81       81 #> 34     2008         AL      TOR    TOR02 2008-04-04 2008-09-25    81       81 #> 35     2009         AL      TOR    TOR02 2009-04-06 2009-09-27    81       81 #> 36     2010         AL      TOR    TOR02 2010-04-12 2010-09-29    78       78 #> 37     2011         AL      TOR    TOR02 2011-04-01 2011-09-22    81       81 #> 38     2012         AL      TOR    TOR02 2012-04-09 2012-10-03    81       81 #> 39     2013         AL      TOR    TOR02 2013-04-02 2013-09-29    81       81 #> 40     2014         AL      TOR    TOR02 2014-04-04 2014-09-28    81       81 #> 41     2015         AL      TOR    TOR02 2015-04-13 2015-09-27    81       81 #> 42     2016         AL      TOR    TOR02 2016-04-08 2016-09-29    81       81 #> 43     2017         AL      TOR    TOR02 2017-04-11 2017-09-24    81       81 #> 44     2018         AL      TOR    TOR02 2018-03-29 2018-09-26    81       80 #> 45     2019         AL      TOR    TOR02 2019-03-28 2019-09-29    81       81 #> 46     2020         AL      TOR    BUF05 2020-08-11 2020-09-27    26        0 #> 47     2021         AL      TOR    DUN01 2021-04-08 2021-05-24    21       21 #> 48     2021         AL      TOR    BUF05 2021-06-01 2021-07-21    23       22 #> 49     2021         AL      TOR    TOR02 2021-07-30 2021-10-03    36       36 #> 50     2022         AL      TOR    TOR02 2022-04-08 2022-10-02    81       81 #> 51     2023         AL      TOR    TOR02 2023-04-11 2023-10-01    81       81 #>    attendance #> 1     1700370 #> 2     1562509 #> 3     1431659 #> 4     1400327 #> 5      755083 #> 6     1275908 #> 7     1930277 #> 8     2110009 #> 9     2468925 #> 10    2455477 #> 11    2778459 #> 12    2595275 #> 13     748571 #> 14    2628122 #> 15    3884384 #> 16    4001526 #> 17    4028318 #> 18    4057747 #> 19    2907949 #> 20    2826445 #> 21    2559910 #> 22    2589317 #> 23    2454303 #> 24    2163486 #> 25    1819919 #> 26      19891 #> 27    1895236 #> 28    1638170 #> 29    1799818 #> 30    1900041 #> 31    2014995 #> 32    2302182 #> 33    2360648 #> 34    2399786 #> 35    1876129 #> 36    1495482 #> 37    1818103 #> 38    2099663 #> 39    2536562 #> 40    2375525 #> 41    2794891 #> 42    3392099 #> 43    3203886 #> 44    2325281 #> 45    1750144 #> 46          0 #> 47      30936 #> 48     170130 #> 49     604835 #> 50    2653830 #> 51    3021904    # What parks have the Boston Red Sox played in as the home team? HomeGames %>%   filter(team.key == \"BOS\") %>%   arrange(span.last) #>     year.key league.key team.key park.key span.first  span.last games openings #> 1       1901         AL      BOS    BOS06 1901-05-08 1901-09-28    69       62 #> 2       1902         AL      BOS    BOS06 1902-04-19 1902-09-18    71       66 #> 3       1903         AL      BOS    BOS06 1903-04-20 1903-09-28    70       64 #> 4       1904         AL      BOS    BOS06 1904-04-18 1904-10-08    81       72 #> 5       1905         AL      BOS    BOS06 1905-04-21 1905-10-07    77       65 #> 6       1906         AL      BOS    BOS06 1906-04-17 1906-10-06    77       72 #> 7       1907         AL      BOS    BOS06 1907-04-16 1907-10-03    78       75 #> 8       1908         AL      BOS    BOS06 1908-04-14 1908-10-07    77       77 #> 9       1909         AL      BOS    BOS06 1909-04-21 1909-10-02    75       66 #> 10      1910         AL      BOS    BOS06 1910-04-19 1910-09-13    80       71 #> 11      1911         AL      BOS    BOS06 1911-04-21 1911-10-07    76       68 #> 12      1912         AL      BOS    BOS07 1912-04-20 1912-09-26    78       69 #> 13      1913         AL      BOS    BOS07 1913-04-10 1913-09-27    75       66 #> 14      1914         AL      BOS    BOS07 1914-04-14 1914-10-07    79       24 #> 15      1915         AL      BOS    BOS07 1915-04-22 1915-09-27    76       52 #> 16      1916         AL      BOS    BOS07 1916-04-12 1916-10-02    76       64 #> 17      1916         AL      BOS    BOS08 1916-10-03 1916-10-03     2        1 #> 18      1917         AL      BOS    BOS07 1917-04-21 1917-10-04    80       65 #> 19      1918         AL      BOS    BOS07 1918-04-15 1918-08-31    70       59 #> 20      1919         AL      BOS    BOS07 1919-05-01 1919-09-20    66       30 #> 21      1920         AL      BOS    BOS07 1920-04-15 1920-09-28    76       62 #> 22      1921         AL      BOS    BOS07 1921-04-21 1921-10-01    77       53 #> 23      1922         AL      BOS    BOS07 1922-04-12 1922-09-30    73       56 #> 24      1923         AL      BOS    BOS07 1923-04-26 1923-09-29    78       52 #> 25      1924         AL      BOS    BOS07 1924-04-15 1924-09-30    77       44 #> 26      1925         AL      BOS    BOS07 1925-04-22 1925-10-02    75       51 #> 27      1926         AL      BOS    BOS07 1926-04-13 1926-09-04    77       49 #> 28      1927         AL      BOS    BOS07 1927-04-21 1927-09-28    78       40 #> 29      1928         AL      BOS    BOS07 1928-04-11 1928-09-08    74       56 #> 30      1929         AL      BOS    BOS07 1929-04-23 1929-09-28    61       56 #> 31      1929         AL      BOS    BOS08 1929-04-28 1929-09-29    17       15 #> 32      1930         AL      BOS    BOS07 1930-04-15 1930-09-27    56       52 #> 33      1930         AL      BOS    BOS08 1930-04-19 1930-09-28    20       15 #> 34      1931         AL      BOS    BOS08 1931-05-31 1931-09-13    15       10 #> 35      1931         AL      BOS    BOS07 1931-04-22 1931-09-22    65       51 #> 36      1932         AL      BOS    BOS08 1932-04-19 1932-05-29     6        5 #> 37      1932         AL      BOS    BOS07 1932-04-13 1932-09-25    71       60 #> 38      1933         AL      BOS    BOS07 1933-04-21 1933-09-24    72       61 #> 39      1934         AL      BOS    BOS07 1934-04-17 1934-09-30    77       62 #> 40      1935         AL      BOS    BOS07 1935-04-23 1935-09-25    79       63 #> 41      1936         AL      BOS    BOS07 1936-04-14 1936-09-27    77       64 #> 42      1937         AL      BOS    BOS07 1937-04-24 1937-09-27    74       58 #> 43      1938         AL      BOS    BOS07 1938-04-18 1938-10-02    75       64 #> 44      1939         AL      BOS    BOS07 1939-04-21 1939-09-24    75       61 #> 45      1940         AL      BOS    BOS07 1940-04-19 1940-09-29    79       65 #> 46      1941         AL      BOS    BOS07 1941-04-15 1941-09-21    77       65 #> 47      1942         AL      BOS    BOS07 1942-04-14 1942-09-27    77       61 #> 48      1943         AL      BOS    BOS07 1943-04-27 1943-10-03    77       55 #> 49      1944         AL      BOS    BOS07 1944-04-18 1944-09-10    78       62 #> 50      1945         AL      BOS    BOS07 1945-04-20 1945-09-23    78       62 #> 51      1946         AL      BOS    BOS07 1946-04-20 1946-09-29    78       62 #> 52      1947         AL      BOS    BOS07 1947-04-15 1947-09-23    81       66 #> 53      1948         AL      BOS    BOS07 1948-04-19 1948-10-04    78       69 #> 54      1949         AL      BOS    BOS07 1949-04-22 1949-09-25    77       73 #> 55      1950         AL      BOS    BOS07 1950-04-18 1950-10-01    77       67 #> 56      1951         AL      BOS    BOS07 1951-04-20 1951-09-23    75       65 #> 57      1952         AL      BOS    BOS07 1952-04-18 1952-09-28    77       69 #> 58      1953         AL      BOS    BOS07 1953-04-20 1953-09-20    76       66 #> 59      1954         AL      BOS    BOS07 1954-04-15 1954-09-26    79       66 #> 60      1955         AL      BOS    BOS07 1955-04-14 1955-09-25    78       67 #> 61      1956         AL      BOS    BOS07 1956-04-17 1956-09-26    78       71 #> 62      1957         AL      BOS    BOS07 1957-04-18 1957-09-29    77       70 #> 63      1958         AL      BOS    BOS07 1958-04-15 1958-09-24    77       70 #> 64      1959         AL      BOS    BOS07 1959-04-14 1959-09-27    77       73 #> 65      1960         AL      BOS    BOS07 1960-04-19 1960-09-28    77       66 #> 66      1961         AL      BOS    BOS07 1961-04-11 1961-09-27    82       71 #> 67      1962         AL      BOS    BOS07 1962-04-10 1962-09-30    79       72 #> 68      1963         AL      BOS    BOS07 1963-04-16 1963-09-28    80       70 #> 69      1964         AL      BOS    BOS07 1964-04-17 1964-10-04    81       75 #> 70      1965         AL      BOS    BOS07 1965-04-17 1965-10-03    81       72 #> 71      1966         AL      BOS    BOS07 1966-04-12 1966-09-18    81       68 #> 72      1967         AL      BOS    BOS07 1967-04-12 1967-10-01    81       72 #> 73      1968         AL      BOS    BOS07 1968-04-16 1968-09-29    81       76 #> 74      1969         AL      BOS    BOS07 1969-04-14 1969-09-28    81       76 #> 75      1970         AL      BOS    BOS07 1970-04-14 1970-09-30    81       77 #> 76      1971         AL      BOS    BOS07 1971-04-06 1971-09-26    80       77 #> 77      1972         AL      BOS    BOS07 1972-04-17 1972-09-28    78       75 #> 78      1973         AL      BOS    BOS07 1973-04-06 1973-09-30    81       77 #> 79      1974         AL      BOS    BOS07 1974-04-11 1974-10-02    81       78 #> 80      1975         AL      BOS    BOS07 1975-04-08 1975-09-28    81       77 #> 81      1976         AL      BOS    BOS07 1976-04-13 1976-10-03    81       79 #> 82      1977         AL      BOS    BOS07 1977-04-07 1977-10-01    80       74 #> 83      1978         AL      BOS    BOS07 1978-04-14 1978-10-02    82       77 #> 84      1979         AL      BOS    BOS07 1979-04-05 1979-09-27    80       79 #> 85      1980         AL      BOS    BOS07 1980-04-14 1980-10-05    81       79 #> 86      1981         AL      BOS    BOS07 1981-04-10 1981-09-27    53       52 #> 87      1982         AL      BOS    BOS07 1982-04-12 1982-09-30    81       79 #> 88      1983         AL      BOS    BOS07 1983-04-05 1983-10-02    81       77 #> 89      1984         AL      BOS    BOS07 1984-04-13 1984-09-30    81       77 #> 90      1985         AL      BOS    BOS07 1985-04-08 1985-10-06    81       77 #> 91      1986         AL      BOS    BOS07 1986-04-14 1986-10-05    81       79 #> 92      1987         AL      BOS    BOS07 1987-04-10 1987-10-04    80       79 #> 93      1988         AL      BOS    BOS07 1988-04-04 1988-09-28    81       79 #> 94      1989         AL      BOS    BOS07 1989-04-10 1989-10-01    81       79 #> 95      1990         AL      BOS    BOS07 1990-04-09 1990-10-03    81       80 #> 96      1991         AL      BOS    BOS07 1991-04-11 1991-10-06    81       80 #> 97      1992         AL      BOS    BOS07 1992-04-13 1992-10-04    81       78 #> 98      1993         AL      BOS    BOS07 1993-04-13 1993-10-03    81       80 #> 99      1994         AL      BOS    BOS07 1994-04-04 1994-08-07    64       61 #> 100     1995         AL      BOS    BOS07 1995-04-26 1995-09-27    72       72 #> 101     1996         AL      BOS    BOS07 1996-04-09 1996-09-29    81       81 #> 102     1997         AL      BOS    BOS07 1997-04-11 1997-09-21    81       80 #> 103     1998         AL      BOS    BOS07 1998-04-10 1998-09-27    81       80 #> 104     1999         AL      BOS    BOS07 1999-04-13 1999-09-27    81       81 #> 105     2000         AL      BOS    BOS07 2000-04-11 2000-09-24    81       81 #> 106     2001         AL      BOS    BOS07 2001-04-06 2001-09-27    81       81 #> 107     2002         AL      BOS    BOS07 2002-04-01 2002-09-29    81       81 #> 108     2003         AL      BOS    BOS07 2003-04-12 2003-09-25    81       81 #> 109     2004         AL      BOS    BOS07 2004-04-09 2004-09-26    81       81 #> 110     2005         AL      BOS    BOS07 2005-04-11 2005-10-02    81       81 #> 111     2006         AL      BOS    BOS07 2006-04-11 2006-10-01    81       81 #> 112     2007         AL      BOS    BOS07 2007-04-10 2007-09-30    81       81 #> 113     2008         AL      BOS    BOS07 2008-04-08 2008-09-28    81       81 #> 114     2009         AL      BOS    BOS07 2009-04-07 2009-10-04    81       81 #> 115     2010         AL      BOS    BOS07 2010-04-04 2010-10-03    81       81 #> 116     2011         AL      BOS    BOS07 2011-04-08 2011-09-21    81       81 #> 117     2012         AL      BOS    BOS07 2012-04-13 2012-09-26    81       81 #> 118     2013         AL      BOS    BOS07 2013-04-08 2013-09-22    81       81 #> 119     2014         AL      BOS    BOS07 2014-04-04 2014-09-28    81       81 #> 120     2015         AL      BOS    BOS07 2015-04-13 2015-09-27    81       81 #> 121     2016         AL      BOS    BOS07 2016-04-11 2016-10-02    81       81 #> 122     2017         AL      BOS    BOS07 2017-04-03 2017-10-01    81       81 #> 123     2018         AL      BOS    BOS07 2018-04-05 2018-09-30    81       81 #> 124     2019         AL      BOS    LON01 2019-06-29 2019-06-30     2        2 #> 125     2019         AL      BOS    BOS07 2019-04-09 2019-09-29    79       79 #> 126     2020         AL      BOS    BOS07 2020-07-24 2020-09-24    31        0 #> 127     2021         AL      BOS    BOS07 2021-04-02 2021-09-26    81       81 #> 128     2022         AL      BOS    BOS07 2022-04-15 2022-10-05    81       81 #> 129     2023         AL      BOS    BOS07 2023-03-30 2023-09-27    81       81 #>     attendance #> 1       286974 #> 2       338894 #> 3       373297 #> 4       629247 #> 5       479306 #> 6       407458 #> 7       456120 #> 8       543686 #> 9       705628 #> 10      714594 #> 11      597928 #> 12      708050 #> 13      490600 #> 14      216602 #> 15      500679 #> 16      534320 #> 17        4800 #> 18      473633 #> 19      309944 #> 20      360550 #> 21      425694 #> 22      301500 #> 23      306000 #> 24      285700 #> 25      435500 #> 26      245000 #> 27      280161 #> 28      263500 #> 29      404970 #> 30      281350 #> 31      209500 #> 32      324000 #> 33      227200 #> 34      145128 #> 35      298318 #> 36       34000 #> 37      209400 #> 38      356573 #> 39      764495 #> 40      695827 #> 41      728196 #> 42      595108 #> 43      695700 #> 44      585800 #> 45      721200 #> 46      771562 #> 47      781395 #> 48      396937 #> 49      541118 #> 50      623085 #> 51     1412141 #> 52     1427061 #> 53     1552246 #> 54     1595952 #> 55     1344177 #> 56     1311663 #> 57     1115741 #> 58     1026914 #> 59      932293 #> 60     1202885 #> 61     1137658 #> 62     1181184 #> 63     1083850 #> 64      990103 #> 65     1129765 #> 66      850856 #> 67      723710 #> 68      942729 #> 69      883279 #> 70      651761 #> 71      815197 #> 72     1694362 #> 73     1882655 #> 74     1837449 #> 75     1594593 #> 76     1682829 #> 77     1434336 #> 78     1483301 #> 79     1558391 #> 80     1748518 #> 81     1895885 #> 82     2074549 #> 83     2320210 #> 84     2353125 #> 85     1956110 #> 86     1060659 #> 87     1954038 #> 88     1780794 #> 89     1660551 #> 90     1786463 #> 91     2146694 #> 92     2231649 #> 93     2463339 #> 94     2512069 #> 95     2512898 #> 96     2562356 #> 97     2469489 #> 98     2422054 #> 99     1775541 #> 100    2164401 #> 101    2315349 #> 102    2223602 #> 103    2343930 #> 104    2446277 #> 105    2585895 #> 106    2625333 #> 107    2650859 #> 108    2724165 #> 109    2837304 #> 110    2847798 #> 111    2930768 #> 112    2970755 #> 113    3048250 #> 114    3062699 #> 115    3046445 #> 116    3054001 #> 117    3043003 #> 118    2833333 #> 119    2956089 #> 120    2880694 #> 121    2955434 #> 122    2917678 #> 123    2895575 #> 124     118718 #> 125    2796784 #> 126          0 #> 127    1725323 #> 128    2625089 #> 129    2672130    # What is the Toronto Blue Jays annual total home attendance by year? HomeGames %>%   filter(team.key == \"TOR\") %>%   group_by(year.key) %>%   summarize(total.attendance = sum(attendance)) %>%   arrange(year.key) #> # A tibble: 47 × 2 #>    year.key total.attendance #>       <int>            <int> #>  1     1977          1700370 #>  2     1978          1562509 #>  3     1979          1431659 #>  4     1980          1400327 #>  5     1981           755083 #>  6     1982          1275908 #>  7     1983          1930277 #>  8     1984          2110009 #>  9     1985          2468925 #> 10     1986          2455477 #> # ℹ 37 more rows"},{"path":"http://cdalzell.github.io/Lahman/reference/Label.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Label for a Variable — Label","title":"Extract the Label for a Variable — Label","text":"Extracts label variable one *Labels files. useful plots displays variable names often cryptically short.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Label for a Variable — Label","text":"","code":"Label(var, labels = rbind(Lahman::battingLabels,                            Lahman::pitchingLabels,                            Lahman::fieldingLabels))"},{"path":"http://cdalzell.github.io/Lahman/reference/Label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Label for a Variable — Label","text":"var name variable labels label table(s) search, 2-column dataframe containing variable names labels.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Label for a Variable — Label","text":"Returns variable label, var label found","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract the Label for a Variable — Label","text":"Michael Friendly","code":""},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/reference/Label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Label for a Variable — Label","text":"","code":"require(\"dplyr\") # find and plot maximum number of homers per year batHR <- Batting %>%            filter(!is.na(HR)) %>%            group_by(yearID) %>%            summarise(max = max(HR))      with(batHR, {   plot(yearID, max,         xlab=Label(\"yearID\"), ylab=paste(\"Maximum\", Label(\"HR\")),         cex=0.8)   lines(lowess(yearID, max), col=\"blue\", lwd=2)   abline(lm(max ~ yearID), col=\"red\", lwd=2)   })"},{"path":"http://cdalzell.github.io/Lahman/reference/Lahman-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Sean Lahman's Baseball Database — Lahman-package","title":"Sean Lahman's Baseball Database — Lahman-package","text":"database contains pitching, hitting, fielding statistics Major League Baseball 1871 2023.  includes data two current leagues (American National), four \"major\" leagues (American Association, Union Association, Players League, Federal League), National Association 1871-1875. database created Sean Lahman, pioneered effort make baseball statistics freely available general public. started one man effort 1994 grown tremendously, now team researchers collected efforts make largest accurate source baseball statistics available anywhere. database, form R package offers variety interesting challenges opportunities data processing visualization R. current version, examples make extensive use dplyr package data manipulation (tabulation, queries, summaries, merging, etc.), reflecting original relational database design ggplot2 graphics.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Lahman-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sean Lahman's Baseball Database — Lahman-package","text":"main form database relational database Microsoft Access format. design follows general principles:  player assigned unique code (playerID).  information different tables relating player tagged playerID.  playerIDs linked names birthdates People table.  Similar links exist among tables via analogous *ID variables. database composed following main tables: People Player names, dates birth, death biographical info Batting batting statistics Pitching pitching statistics Fielding fielding statistics collection tables also provided: Teams: Post-season play: Awards: Hall Fame:  links People via hofID tables: AllstarFull - -Star games appearances;   Managers - managerial statistics;   FieldingOF - outfield position data;   ManagersHalf - split season data managers;   Salaries - player salary data;   Appearances - data player appearances;   Schools - Information schools players attended;   CollegePlaying - Information schools players attended, player year; Variable label tables provided tables: battingLabels, pitchingLabels, fieldingLabels","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Lahman-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sean Lahman's Baseball Database — Lahman-package","text":"Michael Friendly, Dennis Murphy, Chris Dalzell, Martin Monkman Maintainer: Chris Dalzell <cdalzell@gmail.com>","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Lahman-package.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sean Lahman's Baseball Database — Lahman-package","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, Main page, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/LahmanData.html","id":null,"dir":"Reference","previous_headings":"","what":"Lahman Datasets — LahmanData","title":"Lahman Datasets — LahmanData","text":"dataset gives concise description data files Lahman package. may useful computing various files.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/LahmanData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lahman Datasets — LahmanData","text":"","code":"data(LahmanData)"},{"path":"http://cdalzell.github.io/Lahman/reference/LahmanData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lahman Datasets — LahmanData","text":"data frame 24 observations following 5 variables. file name dataset class class dataset nobs number observations nvar number variables title dataset title","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/LahmanData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lahman Datasets — LahmanData","text":"dataset generated using vcdExtra::datasets(package=\"Lahman\") post-processing.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/LahmanData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lahman Datasets — LahmanData","text":"","code":"data(LahmanData)  # find ID variables in the datasets IDvars <- lapply(LahmanData[,\"file\"], function(x) grep('.*ID$', colnames(get(x)), value=TRUE)) names(IDvars) <- LahmanData[,\"file\"] str(IDvars) #> List of 27 #>  $ AllstarFull        : chr [1:5] \"playerID\" \"yearID\" \"gameID\" \"teamID\" ... #>  $ Appearances        : chr [1:4] \"yearID\" \"teamID\" \"lgID\" \"playerID\" #>  $ AwardsManagers     : chr [1:4] \"playerID\" \"awardID\" \"yearID\" \"lgID\" #>  $ AwardsPlayers      : chr [1:4] \"playerID\" \"awardID\" \"yearID\" \"lgID\" #>  $ AwardsShareManagers: chr [1:4] \"awardID\" \"yearID\" \"lgID\" \"playerID\" #>  $ AwardsSharePlayers : chr [1:4] \"awardID\" \"yearID\" \"lgID\" \"playerID\" #>  $ Batting            : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ BattingPost        : chr [1:4] \"yearID\" \"playerID\" \"teamID\" \"lgID\" #>  $ CollegePlaying     : chr [1:3] \"playerID\" \"schoolID\" \"yearID\" #>  $ Fielding           : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ FieldingOF         : chr [1:2] \"playerID\" \"yearID\" #>  $ FieldingOFsplit    : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ FieldingPost       : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ HallOfFame         : chr [1:2] \"playerID\" \"yearID\" #>  $ HomeGames          : chr(0)  #>  $ Managers           : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ ManagersHalf       : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ Parks              : chr(0)  #>  $ People             : chr [1:3] \"playerID\" \"bbrefID\" \"retroID\" #>  $ Pitching           : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ PitchingPost       : chr [1:4] \"playerID\" \"yearID\" \"teamID\" \"lgID\" #>  $ Salaries           : chr [1:4] \"yearID\" \"teamID\" \"lgID\" \"playerID\" #>  $ Schools            : chr \"schoolID\" #>  $ SeriesPost         : chr \"yearID\" #>  $ Teams              : chr [1:5] \"yearID\" \"lgID\" \"teamID\" \"franchID\" ... #>  $ TeamsFranchises    : chr \"franchID\" #>  $ TeamsHalf          : chr [1:4] \"yearID\" \"lgID\" \"teamID\" \"divID\" # vector of unique ID variables unique(unlist(IDvars)) #>  [1] \"playerID\" \"yearID\"   \"gameID\"   \"teamID\"   \"lgID\"     \"awardID\"  #>  [7] \"schoolID\" \"bbrefID\"  \"retroID\"  \"franchID\" \"divID\"     # which datasets have playerID? names(which(sapply(IDvars, function(x) \"playerID\" %in% x))) #>  [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"      #>  [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\"  #>  [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"      #> [10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"     #> [13] \"FieldingPost\"        \"HallOfFame\"          \"Managers\"            #> [16] \"ManagersHalf\"        \"People\"              \"Pitching\"            #> [19] \"PitchingPost\"        \"Salaries\"             ################################################ # Visualize relations among datasets via an MDS ################################################ # jaccard distance between two sets; assure positivity jaccard <- function(A, B) {   max(1 - length(intersect(A,B)) / length(union(A,B)), .00001) }    distmat <- function(vars, FUN=jaccard) {   nv <- length(vars)   d <- matrix(0, nv, nv, dimnames=list(names(vars), names(vars)))      for(i in 1:nv) {     for (j in 1:nv) {       if (i != j) d[i,j] <- FUN(vars[[i]], vars[[j]])     }   }      d[is.nan(d)] = 0      d }  # do an MDS on distances distID <- distmat(IDvars) config <- cmdscale(distID)  pos=rep(1:4, length=nrow(config)) plot(config[,1], config[,2], xlab = \"\", ylab = \"\", asp = 1, axes=FALSE,   main=\"MDS of ID variable distances of Lahman tables\") abline(h=0, v=0, col=\"gray80\") text(config[,1], config[,2], rownames(config), cex = 0.75, pos=pos, xpd=NA)"},{"path":"http://cdalzell.github.io/Lahman/reference/Managers.html","id":null,"dir":"Reference","previous_headings":"","what":"Managers table — Managers","title":"Managers table — Managers","text":"Managers table: information individual team managers, teams managed basic statistics teams year.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Managers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Managers table — Managers","text":"","code":"data(Managers)"},{"path":"http://cdalzell.github.io/Lahman/reference/Managers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Managers table — Managers","text":"data frame 3749 observations following 10 variables. playerID Manager (player) ID code yearID Year teamID Team; factor lgID League; factor levels AA AL FL NL PL UA inseason Managerial order.  Zero individual managed team                  entire year.  Otherwise denotes manager appeared                  managerial order (1 first manager, 2 second, etc.) G Games managed W Wins L Losses rank Team's final position standings year plyrMgr Player Manager (denoted 'Y'); factor levels N Y","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Managers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Managers table — Managers","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Managers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Managers table — Managers","text":"","code":"#################################### # Basic career summaries by manager ####################################  library(\"dplyr\") mgrSumm <- Managers %>%             group_by(playerID) %>%             summarise(nyear = length(unique(yearID)),                       yearBegin = min(yearID),                       yearEnd = max(yearID),                       nTeams = length(unique(teamID)),                       nfirst = sum(rank == 1L),                       W = sum(W),                       L = sum(L),                       WinPct = round(W/(W + L), 3))  MgrInfo <- People %>%             filter(!is.na(playerID)) %>%             select(playerID, nameLast, nameFirst)  # Merge names into the table mgrTotals <- right_join(MgrInfo, mgrSumm, by = \"playerID\")  # add total games managed mgrTotals <- mgrTotals %>%               mutate(games = W + L)  ########################## # Some basic queries ##########################  # Top 20 managers in terms of years of service: mgrTotals %>%    arrange(desc(nyear)) %>%    head(., 20) #>     playerID  nameLast nameFirst nyear yearBegin yearEnd nTeams nfirst    W #> 1   mackco01      Mack    Connie    53      1894    1950      2      9 3731 #> 2  larusto01   LaRussa      Tony    35      1979    2022      3     14 2898 #> 3  mcgrajo01    McGraw      John    33      1899    1932      3     11 2763 #> 4    coxbo01       Cox     Bobby    29      1978    2010      2     15 2497 #> 5  harribu01    Harris     Bucky    29      1924    1956      5      3 2158 #> 6  torrejo01     Torre       Joe    29      1977    2010      5     13 2322 #> 7  andersp01  Anderson    Sparky    26      1970    1995      2      7 2194 #> 8  bakerdu01     Baker     Dusty    26      1993    2023      5     10 2169 #> 9  bochybr01     Bochy     Bruce    26      1995    2023      3      6 2091 #> 10 mauchge01     Mauch      Gene    26      1960    1987      4      2 1902 #> 11 mckecbi01 McKechnie      Bill    25      1915    1946      5      4 1896 #> 12 stengca01   Stengel     Casey    25      1934    1965      4     10 1905 #> 13 durocle01  Durocher       Leo    24      1939    1973      4      3 2008 #> 14 mccarjo99  McCarthy       Joe    24      1926    1950      3      9 2125 #> 15 alstowa01    Alston    Walter    23      1954    1976      2      7 2040 #> 16 francte01  Francona     Terry    23      1997    2023      3      5 1905 #> 17 pinielo01  Piniella       Lou    23      1986    2010      5      6 1827 #> 18 wrighha01    Wright     Harry    23      1871    1893      4      6 1225 #> 19 leylaji99   Leyland       Jim    22      1986    2013      4      6 1769 #> 20 showabu99 Showalter      Buck    22      1992    2023      5      4 1724 #>       L WinPct games #> 1  3948  0.486  7679 #> 2  2509  0.536  5407 #> 3  1948  0.586  4711 #> 4  1999  0.555  4496 #> 5  2219  0.493  4377 #> 6  1995  0.538  4317 #> 7  1834  0.545  4028 #> 8  1858  0.539  4027 #> 9  2100  0.499  4191 #> 10 2037  0.483  3939 #> 11 1723  0.524  3619 #> 12 1842  0.508  3747 #> 13 1709  0.540  3717 #> 14 1333  0.615  3458 #> 15 1613  0.558  3653 #> 16 1627  0.539  3532 #> 17 1709  0.517  3536 #> 18  885  0.581  2110 #> 19 1724  0.506  3493 #> 20 1661  0.509  3385  # Top 20 winningest managers (500 games minimum) mgrTotals %>%    filter((W + L) >= 500) %>%    arrange(desc(WinPct)) %>%    head(., 20) #>     playerID   nameLast nameFirst nyear yearBegin yearEnd nTeams nfirst    W #> 1  roberda07    Roberts      Dave     9      2015    2023      2      7  753 #> 2  mccarjo99   McCarthy       Joe    24      1926    1950      3      9 2125 #> 3  mutriji99     Mutrie       Jim     9      1883    1891      2      3  658 #> 4  comisch01   Comiskey   Charlie    12      1883    1894      3      4  840 #> 5  seleefr99      Selee     Frank    16      1890    1905      2      5 1284 #> 6  southbi01 Southworth     Billy    13      1929    1951      2      4 1044 #> 7  chancfr01     Chance     Frank    11      1905    1923      3      4  946 #> 8  booneaa01      Boone     Aaron     6      2018    2023      1      2  509 #> 9  mcgrajo01     McGraw      John    33      1899    1932      3     11 2763 #> 10 lopezal01      Lopez        Al    17      1951    1969      2      2 1410 #> 11 weaveea99     Weaver      Earl    17      1968    1986      1      6 1480 #> 12 cochrmi01   Cochrane    Mickey     5      1934    1938      1      2  348 #> 13 wrighha01     Wright     Harry    23      1871    1893      4      6 1225 #> 14 ansonca01      Anson       Cap    21      1875    1898      3      5 1296 #> 15  dyered01       Dyer     Eddie     5      1946    1950      1      1  446 #> 16 rowlapa99    Rowland     Pants     4      1915    1918      1      1  339 #> 17 clarkfr01     Clarke      Fred    19      1897    1915      2      4 1602 #> 18 mcgunbi01 McGunnigle      Bill     5      1888    1896      4      2  327 #> 19  wardjo01       Ward      John     7      1880    1894      4      0  412 #> 20 johnsda02    Johnson     Davey    17      1984    2013      5      6 1369 #>       L WinPct games #> 1   443  0.630  1196 #> 2  1333  0.615  3458 #> 3   419  0.611  1077 #> 4   541  0.608  1381 #> 5   862  0.598  2146 #> 6   704  0.597  1748 #> 7   648  0.593  1594 #> 8   360  0.586   869 #> 9  1948  0.586  4711 #> 10 1004  0.584  2414 #> 11 1060  0.583  2540 #> 12  250  0.582   598 #> 13  885  0.581  2110 #> 14  947  0.578  2243 #> 15  325  0.578   771 #> 16  247  0.578   586 #> 17 1181  0.576  2783 #> 18  248  0.569   575 #> 19  320  0.563   732 #> 20 1070  0.561  2439  # Most of these are 19th century managers. # How about the modern era? mgrTotals %>%    filter(yearBegin >= 1901 & (W + L) >= 500) %>%    arrange(desc(WinPct)) %>%    head(., 20) #>     playerID   nameLast nameFirst nyear yearBegin yearEnd nTeams nfirst    W #> 1  roberda07    Roberts      Dave     9      2015    2023      2      7  753 #> 2  mccarjo99   McCarthy       Joe    24      1926    1950      3      9 2125 #> 3  southbi01 Southworth     Billy    13      1929    1951      2      4 1044 #> 4  chancfr01     Chance     Frank    11      1905    1923      3      4  946 #> 5  booneaa01      Boone     Aaron     6      2018    2023      1      2  509 #> 6  lopezal01      Lopez        Al    17      1951    1969      2      2 1410 #> 7  weaveea99     Weaver      Earl    17      1968    1986      1      6 1480 #> 8  cochrmi01   Cochrane    Mickey     5      1934    1938      1      2  348 #> 9   dyered01       Dyer     Eddie     5      1946    1950      1      1  446 #> 10 rowlapa99    Rowland     Pants     4      1915    1918      1      1  339 #> 11 johnsda02    Johnson     Davey    17      1984    2013      5      6 1369 #> 12 moranpa01      Moran       Pat     9      1915    1923      2      2  748 #> 13 oneilst01    O'Neill     Steve    14      1935    1954      4      1 1040 #> 14 snitkbr99    Snitker     Brian     8      2016    2023      1      5  646 #> 15 alstowa01     Alston    Walter    23      1954    1976      2      7 2040 #> 16 dierkla01    Dierker     Larry     5      1997    2001      1      4  435 #> 17   coxbo01        Cox     Bobby    29      1978    2010      2     15 2497 #> 18 huggimi01    Huggins    Miller    17      1913    1929      2      6 1413 #> 19 littlgr99     Little     Grady     6      2000    2007      3      1  377 #> 20 terrybi01      Terry      Bill    10      1932    1941      1      3  823 #>       L WinPct games #> 1   443  0.630  1196 #> 2  1333  0.615  3458 #> 3   704  0.597  1748 #> 4   648  0.593  1594 #> 5   360  0.586   869 #> 6  1004  0.584  2414 #> 7  1060  0.583  2540 #> 8   250  0.582   598 #> 9   325  0.578   771 #> 10  247  0.578   586 #> 11 1070  0.561  2439 #> 12  586  0.561  1334 #> 13  821  0.559  1861 #> 14  509  0.559  1155 #> 15 1613  0.558  3653 #> 16  348  0.556   783 #> 17 1999  0.555  4496 #> 18 1134  0.555  2547 #> 19  302  0.555   679 #> 20  661  0.555  1484  # Top 10 managers in terms of percentage of titles  # (league or divisional) - should bias toward managers #  post-1970 since more first place finishes are available mgrTotals %>%    filter(yearBegin >= 1901 & (W + L) >= 500) %>%    arrange(desc(round(nfirst/nyear, 3))) %>%    head(., 10) #>     playerID nameLast nameFirst nyear yearBegin yearEnd nTeams nfirst    W    L #> 1  dierkla01  Dierker     Larry     5      1997    2001      1      4  435  348 #> 2  roberda07  Roberts      Dave     9      2015    2023      2      7  753  443 #> 3  howsedi01   Howser      Dick     8      1978    1986      2      5  507  425 #> 4  snitkbr99  Snitker     Brian     8      2016    2023      1      5  646  509 #> 5  baldero01 Baldelli     Rocco     5      2019    2023      1      3  371  332 #> 6   freyji99     Frey       Jim     5      1980    1986      2      3  323  287 #> 7    coxbo01      Cox     Bobby    29      1978    2010      2     15 2497 1999 #> 8  banisje01 Banister      Jeff     4      2015    2018      1      2  325  313 #> 9  brenlbo01   Brenly       Bob     4      2001    2004      1      2  303  262 #> 10 kenneke99  Kennedy     Kevin     4      1993    1996      2      2  309  273 #>    WinPct games #> 1   0.556   783 #> 2   0.630  1196 #> 3   0.544   932 #> 4   0.559  1155 #> 5   0.528   703 #> 6   0.530   610 #> 7   0.555  4496 #> 8   0.509   638 #> 9   0.536   565 #> 10  0.531   582  # How about pre-1969? mgrTotals %>%   filter(yearBegin >= 1901 & yearEnd <= 1969 &           (W + L) >= 500) %>%   arrange(desc(round(nfirst/nyear, 3))) %>%   head(., 10) #>     playerID   nameLast nameFirst nyear yearBegin yearEnd nTeams nfirst    W #> 1  cochrmi01   Cochrane    Mickey     5      1934    1938      1      2  348 #> 2  stengca01    Stengel     Casey    25      1934    1965      4     10 1905 #> 3  mccarjo99   McCarthy       Joe    24      1926    1950      3      9 2125 #> 4  chancfr01     Chance     Frank    11      1905    1923      3      4  946 #> 5  huggimi01    Huggins    Miller    17      1913    1929      2      6 1413 #> 6  colliji01    Collins     Jimmy     6      1901    1906      1      2  455 #> 7  streega01     Street     Gabby     6      1929    1938      2      2  365 #> 8  southbi01 Southworth     Billy    13      1929    1951      2      4 1044 #> 9  terrybi01      Terry      Bill    10      1932    1941      1      3  823 #> 10 carribi02   Carrigan      Bill     7      1913    1929      1      2  489 #>       L WinPct games #> 1   250  0.582   598 #> 2  1842  0.508  3747 #> 3  1333  0.615  3458 #> 4   648  0.593  1594 #> 5  1134  0.555  2547 #> 6   376  0.548   831 #> 7   332  0.524   697 #> 8   704  0.597  1748 #> 9   661  0.555  1484 #> 10  500  0.494   989  ## Tony LaRussa's managerial record by team Managers %>%   filter(playerID == \"larusto01\") %>%   group_by(teamID) %>%   summarise(nyear = length(unique(yearID)),             yearBegin = min(yearID),             yearEnd = max(yearID),             games = sum(G),             nfirst = sum(rank == 1L),             W = sum(W),             L = sum(L),             WinPct = round(W/(W + L), 3)) #> # A tibble: 3 × 9 #>   teamID nyear yearBegin yearEnd games nfirst     W     L WinPct #>   <fct>  <int>     <int>   <int> <int>  <int> <int> <int>  <dbl> #> 1 CHA       10      1979    2022  1357      2   695   659  0.513 #> 2 OAK       10      1986    1995  1471      4   798   673  0.542 #> 3 SLN       16      1996    2011  2582      8  1405  1177  0.544  ############################################## # Density plot of the number of games managed: ##############################################  library(\"ggplot2\")  ggplot(mgrTotals, aes(x = games)) +      geom_density(fill = \"red\", alpha = 0.3) +     labs(x = \"Number of games managed\")   # Who managed more than 4000 games? mgrTotals %>%    filter(W + L >= 4000) %>%   arrange(desc(W + L)) #>    playerID nameLast nameFirst nyear yearBegin yearEnd nTeams nfirst    W    L #> 1  mackco01     Mack    Connie    53      1894    1950      2      9 3731 3948 #> 2 larusto01  LaRussa      Tony    35      1979    2022      3     14 2898 2509 #> 3 mcgrajo01   McGraw      John    33      1899    1932      3     11 2763 1948 #> 4   coxbo01      Cox     Bobby    29      1978    2010      2     15 2497 1999 #> 5 harribu01   Harris     Bucky    29      1924    1956      5      3 2158 2219 #> 6 torrejo01    Torre       Joe    29      1977    2010      5     13 2322 1995 #> 7 bochybr01    Bochy     Bruce    26      1995    2023      3      6 2091 2100 #> 8 andersp01 Anderson    Sparky    26      1970    1995      2      7 2194 1834 #> 9 bakerdu01    Baker     Dusty    26      1993    2023      5     10 2169 1858 #>   WinPct games #> 1  0.486  7679 #> 2  0.536  5407 #> 3  0.586  4711 #> 4  0.555  4496 #> 5  0.493  4377 #> 6  0.538  4317 #> 7  0.499  4191 #> 8  0.545  4028 #> 9  0.539  4027 # Connie Mack's advantage: he owned the Philadelphia A's :)  # Table of Tony LaRussa's team finishes (rank order): Managers %>%    filter(playerID == \"larusto01\") %>%    count(rank) #>   rank  n #> 1    1 14 #> 2    2  4 #> 3    3  8 #> 4    4  5 #> 5    5  4 #> 6    7  1    ############################################## # Scatterplot of winning percentage vs. number  # of games managed (min 100) ##############################################  ggplot(subset(mgrTotals, yearBegin >= 1900 & games >= 100),        aes(x = games, y = WinPct)) +    geom_point() + geom_smooth() +   labs(x = \"Number of games managed\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   ############################################ # Division titles ############################################  # Plot of number of first place finishes by managers who # started in the divisional era (>= 1969) with  # at least 8 years of experience  mgrTotals %>%    filter(yearBegin >= 1969 & nyear >= 8) %>%   ggplot(., aes(x = nyear, y = nfirst)) +      geom_point(position = position_jitter(width = 0.2)) +      labs(x = \"Number of years\",            y = \"Number of divisional titles\") +      geom_smooth() #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'    # Change response to proportion of titles relative # to years managed mgrTotals %>%    filter(yearBegin >= 1969 & nyear >= 8) %>%   ggplot(., aes(x = nyear, y = round(nfirst/nyear, 3))) +      geom_point(position = position_jitter(width = 0.2)) +      labs(x = \"Number of years\",            y = \"Proportion of divisional titles\") +      geom_smooth() #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"http://cdalzell.github.io/Lahman/reference/ManagersHalf.html","id":null,"dir":"Reference","previous_headings":"","what":"ManagersHalf table — ManagersHalf","title":"ManagersHalf table — ManagersHalf","text":"Split season data managers","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/ManagersHalf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ManagersHalf table — ManagersHalf","text":"","code":"data(ManagersHalf)"},{"path":"http://cdalzell.github.io/Lahman/reference/ManagersHalf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ManagersHalf table — ManagersHalf","text":"data frame 93 observations following 10 variables. playerID Manager (player) ID code yearID Year teamID Team; factor lgID League; factor levels AL NL inseason Managerial order.  One individual managed team                  entire year.  Otherwise denotes manager appeared                  managerial order (1 first manager, 2 second, etc.).                  factor levels 1 2 3 4 5 half First second half season G Games managed W Wins L Losses rank Team's position standings half","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/ManagersHalf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ManagersHalf table — ManagersHalf","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/ManagersHalf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ManagersHalf table — ManagersHalf","text":"","code":"library(\"dplyr\") library(\"reshape2\") #>  #> Attaching package: 'reshape2' #> The following object is masked from 'package:tidyr': #>  #>     smiths  # Only have data for 1892 and 1981  # League rank by half for 1981 teams with the same # manager in both halves who were hired in-season ManagersHalf %>%    filter(yearID >= 1901) %>%   group_by(teamID, yearID) %>%   filter(all(playerID == playerID[1])) %>%  # same manager in both halves   mutate(winPct = round(W/G, 3)) %>%   reshape2::dcast(playerID + yearID + teamID + lgID ~ half,                      value.var = \"rank\") %>%   rename(rank1 = `1`, rank2 = `2`)  #>     playerID yearID teamID lgID rank1 rank2 #> 1  amalfjo01   1981    CHN   NL     6     5 #> 2  andersp01   1981    DET   AL     4     2 #> 3    coxbo01   1981    ATL   NL     4     5 #> 4  garcida99   1981    CLE   AL     6     5 #> 5  greenda02   1981    PHI   NL     1     3 #> 6  herzowh01   1981    SLN   NL     2     2 #> 7   houkra01   1981    BOS   AL     5     2 #> 8  howarfr01   1981    SDN   NL     6     6 #> 9  larusto01   1981    CHA   AL     3     6 #> 10 lasorto01   1981    LAN   NL     1     4 #> 11 martibi02   1981    OAK   AL     1     2 #> 12 mattibo01   1981    TOR   AL     7     7 #> 13 mcnamjo99   1981    CIN   NL     2     2 #> 14 robinfr02   1981    SFN   NL     5     3 #> 15 rodgebu01   1981    ML4   AL     3     1 #> 16 tannech01   1981    PIT   NL     4     6 #> 17 torrejo01   1981    NYN   NL     5     4 #> 18 virdobi01   1981    HOU   NL     3     1 #> 19 weaveea99   1981    BAL   AL     2     4 #> 20 zimmedo01   1981    TEX   AL     2     3"},{"path":"http://cdalzell.github.io/Lahman/reference/Parks.html","id":null,"dir":"Reference","previous_headings":"","what":"Parks table — Parks","title":"Parks table — Parks","text":"Name location data baseball stadiums.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Parks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parks table — Parks","text":"","code":"data(Parks)"},{"path":"http://cdalzell.github.io/Lahman/reference/Parks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parks table — Parks","text":"data frame 260 observations following 6 variables. park.key unique identifier ballpark park.name name ballpark park.alias semicolon delimited list names ballpark exist city city ballpark located state state ballpark located country country ballpark located","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Parks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parks table — Parks","text":"dataset apparently includes ballparks ever used baseball. indication years used, teams played . ballparks can associated teams park variable Teams table.","code":""},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/reference/Parks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Parks table — Parks","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2023 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Parks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parks table — Parks","text":"","code":"data(Parks) library(dplyr) # how many parks in each country? table(Parks$country) #>  #>  AU  CA  JP  MX  PR  UK  US  #>   1   4   1   2   1   1 250   # how many parks in each US state? Parks %>%    filter(country==\"US\") %>%    count(state, sort=TRUE) #>    state  n #> 1     NY 41 #> 2     OH 33 #> 3     PA 24 #> 4     MO 16 #> 5     IL 12 #> 6     MA 12 #> 7     DC 11 #> 8     MD 11 #> 9     CA 10 #> 10    NJ 10 #> 11    IN  9 #> 12    KY  6 #> 13    MI  6 #> 14    TX  6 #> 15    WI  6 #> 16    CT  5 #> 17    FL  5 #> 18    MN  4 #> 19    GA  3 #> 20    RI  3 #> 21    WA  3 #> 22    CO  2 #> 23    DE  2 #> 24    IA  2 #> 25    VA  2 #> 26    AZ  1 #> 27    HI  1 #> 28    NC  1 #> 29    NE  1 #> 30    NV  1 #> 31    WV  1  # ballparks in NYC Parks %>%    filter(state==\"NY\") %>%    filter(city %in% c(\"New York\", \"Brooklyn\", \"Queens\")) #>                 park.alias park.key                           park.name #> 1                     <NA>    NYC01                       Union Grounds #> 2                     <NA>    NYC02                  Capitoline Grounds #> 3                     <NA>    NYC03  Polo Grounds I (Southeast Diamond) #> 4                     <NA>    NYC04 Polo Grounds II (Southwest Diamond) #> 5                     <NA>    NYC05                   Washington Park I #> 6                     <NA>    NYC06                   Metropolitan Park #> 7         Ridgewood Park I    NYC07             Grauer's Ridgewood Park #> 8                     <NA>    NYC08                  Washington Park II #> 9                     <NA>    NYC09                    Polo Grounds III #> 10                    <NA>    NYC10                     Polo Grounds IV #> 11                    <NA>    NYC11                        Eastern Park #> 12                    <NA>    NYC12                 Washington Park III #> 13                    <NA>    NYC13                        Hilltop Park #> 14                    <NA>    NYC14                      Polo Grounds V #> 15                    <NA>    NYC15                        Ebbets Field #> 16                    <NA>    NYC16                    Yankee Stadium I #> 17 William A. Shea Stadium    NYC17                        Shea Stadium #> 18       Ridgewood Park II    NYC18            Wallace's Ridgewood Park #> 19                    <NA>    NYC19                  Washington Park IV #> 20                    <NA>    NYC20                          Citi Field #> 21                    <NA>    NYC21                   Yankee Stadium II #> 22                    <NA>    SAI01          St. George Cricket Grounds #>        city state country #> 1  Brooklyn    NY      US #> 2  Brooklyn    NY      US #> 3  New York    NY      US #> 4  New York    NY      US #> 5  Brooklyn    NY      US #> 6  New York    NY      US #> 7    Queens    NY      US #> 8  Brooklyn    NY      US #> 9  New York    NY      US #> 10 New York    NY      US #> 11 Brooklyn    NY      US #> 12 Brooklyn    NY      US #> 13 New York    NY      US #> 14 New York    NY      US #> 15 Brooklyn    NY      US #> 16 New York    NY      US #> 17 New York    NY      US #> 18   Queens    NY      US #> 19 Brooklyn    NY      US #> 20 New York    NY      US #> 21 New York    NY      US #> 22 New York    NY      US  # ballparks in Canada Parks %>%    filter(country==\"CA\") %>%    count(state, sort=TRUE) #>   state n #> 1    ON 2 #> 2    QC 2  # what are the Canadian parks? Parks %>%    dplyr::filter(country==\"CA\") #>        park.alias park.key          park.name     city state country #> 1      Jarry Park    MON01         Parc Jarry Montreal    QC      CA #> 2 Olympic Stadium    MON02    Stade Olympique Montreal    QC      CA #> 3            <NA>    TOR01 Exhibition Stadium  Toronto    ON      CA #> 4         Skydome    TOR02      Rogers Centre  Toronto    ON      CA"},{"path":"http://cdalzell.github.io/Lahman/reference/People.html","id":null,"dir":"Reference","previous_headings":"","what":"People table — People","title":"People table — People","text":"People table - Player names, DOB, biographical info.  file used get details players listed Batting, Pitching, files players identified playerID.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/People.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"People table — People","text":"","code":"data(People)"},{"path":"http://cdalzell.github.io/Lahman/reference/People.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"People table — People","text":"data frame 21010 observations following 26 variables. playerID unique code assigned player.  playerID links                  data file records players files. birthYear Year player born birthMonth Month player born birthDay Day player born birthCountry Country player born birthState State player born birthCity City player born deathYear Year player died deathMonth Month player died deathDay Day player died deathCountry Country player died deathState State player died deathCity City player died nameFirst Player's first name nameLast Player's last name nameGiven Player's given name (typically first middle) weight Player's weight pounds height Player's height inches bats factor: Player's batting hand (left (L), right (R), (B)) throws factor: Player's throwing hand (left(L) right(R)) debut Date player made first major league appearance finalGame Date player made first major league appearance (blank still active) retroID ID used retrosheet, https://www.retrosheet.org/ bbrefID ID used Baseball Reference website, https://www.baseball-reference.com/ birthDate Player's birthdate, .Date format deathDate Player's deathdate, .Date format","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/People.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"People table — People","text":"debut, finalGame converted character strings .Date.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/People.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"People table — People","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/People.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"People table — People","text":"","code":"data(People); data(Batting)  ## add player's name to Batting data People$name <- paste(People$nameFirst, People$nameLast, sep=\" \") batting <- merge(Batting,                   People[,c(\"playerID\",\"name\")],                   by=\"playerID\", all.x=TRUE)  ## batting and throwing # right-handed batters are much less ambidexterous in throwing than left-handed batters # (should only include batters)  BT <- with(People, table(bats, throws)) require(vcd) structable(BT) #>      throws     B     L     R     S #> bats                                #> B               2   189  1073     0 #> L               0  3135  2328     1 #> R               1   627 12309     0 mosaic(BT, shade=TRUE)   ## Who is Shoeless Joe Jackson? subset(People, nameLast==\"Jackson\" & nameFirst==\"Joe\") #>  [1] playerID     birthYear    birthMonth   birthDay     birthCity    #>  [6] birthCountry birthState   deathYear    deathMonth   deathDay     #> [11] deathCountry deathState   deathCity    nameFirst    nameLast     #> [16] nameGiven    weight       height       bats         throws       #> [21] debut        bbrefID      finalGame    retroID      deathDate    #> [26] birthDate    name         #> <0 rows> (or 0-length row.names) subset(People, nameLast==\"Jackson\" & nameFirst==\"Shoeless Joe\") #>       playerID birthYear birthMonth birthDay      birthCity birthCountry #> 8987 jacksjo01      1887          7       16 Pickens County          USA #>      birthState deathYear deathMonth deathDay deathCountry deathState #> 8987         SC      1951         12        5          USA         SC #>       deathCity    nameFirst nameLast     nameGiven weight height bats throws #> 8987 Greenville Shoeless Joe  Jackson Joseph Walker    200     73    L      R #>           debut   bbrefID  finalGame  retroID  deathDate  birthDate #> 8987 1908-08-25 jacksjo01 1920-09-27 jackj101 1951-12-05 1887-07-16 #>                      name #> 8987 Shoeless Joe Jackson  joeID <-c(subset(People, nameLast==\"Jackson\" & nameFirst==\"Shoeless Joe\")[\"playerID\"])  subset(Batting, playerID==joeID) #>        playerID yearID stint teamID lgID   G  AB   R   H X2B X3B HR RBI SB CS #> 49548 jacksjo01   1908     1    PHA   AL   5  23   0   3   0   0  0   3  0 NA #> 49549 jacksjo01   1909     1    PHA   AL   5  17   3   3   0   0  0   3  0 NA #> 49550 jacksjo01   1910     1    CLE   AL  20  75  15  29   2   5  1  11  4 NA #> 49551 jacksjo01   1911     1    CLE   AL 147 571 126 233  45  19  7  83 41 NA #> 49552 jacksjo01   1912     1    CLE   AL 154 572 121 226  44  26  3  90 35 NA #> 49553 jacksjo01   1913     1    CLE   AL 148 528 109 197  39  17  7  71 26 NA #> 49554 jacksjo01   1914     1    CLE   AL 122 453  61 153  22  13  3  53 22 15 #> 49555 jacksjo01   1915     1    CLE   AL  83 303  42  99  16   9  3  45 10 10 #> 49556 jacksjo01   1915     2    CHA   AL  45 158  21  43   4   5  2  36  6 10 #> 49557 jacksjo01   1916     1    CHA   AL 155 592  91 202  40  21  3  78 24 14 #> 49558 jacksjo01   1917     1    CHA   AL 146 538  91 162  20  17  5  75 13 NA #> 49559 jacksjo01   1918     1    CHA   AL  17  65   9  23   2   2  1  20  3 NA #> 49560 jacksjo01   1919     1    CHA   AL 139 516  79 181  31  14  7  96  9 NA #> 49561 jacksjo01   1920     1    CHA   AL 146 570 105 218  42  20 12 121  9 12 #>       BB SO IBB HBP SH SF GIDP #> 49548  0  3  NA   0  0 NA   NA #> 49549  1  3  NA   0  0 NA   NA #> 49550  8  8  NA   0  3 NA   NA #> 49551 56 NA  NA   8  6 NA   NA #> 49552 54 NA  NA  12 15 NA   NA #> 49553 80 26  NA   5 10 NA   NA #> 49554 41 34  NA   5 13 NA   NA #> 49555 28 11  NA   3  3 NA   NA #> 49556 24 12  NA   3  8 NA   NA #> 49557 46 25  NA   5 16 NA   NA #> 49558 57 25  NA   7 19 NA   NA #> 49559  8  1  NA   0  5 NA   NA #> 49560 60 10  NA   4 17 NA   NA #> 49561 56 14  NA   7 16 NA   NA subset(Fielding, playerID==joeID) #>        playerID yearID stint teamID lgID POS   G GS InnOuts  PO  A  E DP PB WP #> 66448 jacksjo01   1908     1    PHA   AL  OF   5  5     132   6  1  1  0 NA NA #> 66449 jacksjo01   1909     1    PHA   AL  OF   4  4     108  10  0  2  0 NA NA #> 66450 jacksjo01   1910     1    CLE   AL  OF  20 20     522  40  2  1  1 NA NA #> 66451 jacksjo01   1911     1    CLE   AL  OF 147 NA      NA 242 32 12  8 NA NA #> 66452 jacksjo01   1912     1    CLE   AL  OF 150 NA      NA 273 30 16  2 NA NA #> 66453 jacksjo01   1913     1    CLE   AL  OF 148 NA      NA 211 28 18  5 NA NA #> 66454 jacksjo01   1914     1    CLE   AL  OF 119 NA      NA 195 13  7  4 NA NA #> 66455 jacksjo01   1915     1    CLE   AL  1B  30 NA      NA 284 15  7 12 NA NA #> 66456 jacksjo01   1915     1    CLE   AL  OF  50 NA      NA  68  6  3  0 NA NA #> 66457 jacksjo01   1915     2    CHA   AL  OF  45 NA      NA  84  6  5  1 NA NA #> 66458 jacksjo01   1916     1    CHA   AL  OF 155 NA      NA 290 17  8  5 NA NA #> 66459 jacksjo01   1917     1    CHA   AL  OF 145 NA      NA 341 18  6  4 NA NA #> 66460 jacksjo01   1918     1    CHA   AL  OF  17 NA      NA  36  1  0  0 NA NA #> 66461 jacksjo01   1919     1    CHA   AL  OF 139 NA      NA 252 15  9  4 NA NA #> 66462 jacksjo01   1920     1    CHA   AL  OF 145 NA      NA 314 14 12  2 NA NA #>       SB CS ZR #> 66448 NA NA NA #> 66449 NA NA NA #> 66450 NA NA NA #> 66451 NA NA NA #> 66452 NA NA NA #> 66453 NA NA NA #> 66454 NA NA NA #> 66455 NA NA NA #> 66456 NA NA NA #> 66457 NA NA NA #> 66458 NA NA NA #> 66459 NA NA NA #> 66460 NA NA NA #> 66461 NA NA NA #> 66462 NA NA NA"},{"path":"http://cdalzell.github.io/Lahman/reference/Pitching.html","id":null,"dir":"Reference","previous_headings":"","what":"Pitching table — Pitching","title":"Pitching table — Pitching","text":"Pitching table","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Pitching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pitching table — Pitching","text":"","code":"data(Pitching)"},{"path":"http://cdalzell.github.io/Lahman/reference/Pitching.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pitching table — Pitching","text":"data frame 50402 observations following 30 variables. playerID Player ID code yearID Year stint player's stint (order appearances within season) teamID Team; factor lgID League; factor levels AA AL FL NL PL UA W Wins L Losses G Games GS Games Started CG Complete Games SHO Shutouts SV Saves IPouts Outs Pitched (innings pitched x 3) H Hits ER Earned Runs HR Homeruns BB Walks Strikeouts BAOpp Opponent's Batting Average ERA Earned Run Average IBB Intentional Walks WP Wild Pitches HBP Batters Hit Pitch BK Balks BFP Batters faced Pitcher GF Games Finished R Runs Allowed SH Sacrifices opposing batters SF Sacrifice flies opposing batters GIDP Grounded double plays opposing batter","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Pitching.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pitching table — Pitching","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Pitching.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pitching table — Pitching","text":"","code":"# Pitching data  require(\"dplyr\")  ################################### # cleanup, and add some other stats ###################################  # Restrict to AL and NL data, 1901+ # All data re SH, SF and GIDP are missing, so remove # Intentional walks (IBB) not recorded until 1955 pitching <- Pitching %>%                filter(yearID >= 1901 & lgID %in% c(\"AL\", \"NL\")) %>%                select(-(28:30)) %>%  # remove SH, SF, GIDP                mutate(BAOpp = round(H/(H + IPouts), 3),  # loose def'n                       WHIP = round((H + BB) * 3/IPouts, 2),                       KperBB = round(ifelse(yearID >= 1955,                                              SO/(BB - IBB), SO/BB), 2))                                               ##################### # some simple queries #####################  # Team pitching statistics, Toronto Blue Jays, 1993 tor93 <- pitching %>%            filter(yearID == 1993 & teamID == \"TOR\") %>%            arrange(ERA)  # Career pitching statistics, Greg Maddux subset(pitching, playerID == \"maddugr01\") #>        playerID yearID stint teamID lgID  W  L  G GS CG SHO SV IPouts   H  ER #> 26164 maddugr01   1986     1    CHN   NL  2  4  6  5  1   0  0     93  44  19 #> 26165 maddugr01   1987     1    CHN   NL  6 14 30 27  1   1  0    467 181  97 #> 26166 maddugr01   1988     1    CHN   NL 18  8 34 34  9   3  0    747 230  88 #> 26167 maddugr01   1989     1    CHN   NL 19 12 35 35  7   1  0    715 222  78 #> 26168 maddugr01   1990     1    CHN   NL 15 15 35 35  8   2  0    711 242  91 #> 26169 maddugr01   1991     1    CHN   NL 15 11 37 37  7   2  0    789 232  98 #> 26170 maddugr01   1992     1    CHN   NL 20 11 35 35  9   4  0    804 201  65 #> 26171 maddugr01   1993     1    ATL   NL 20 10 36 36  8   1  0    801 228  70 #> 26172 maddugr01   1994     1    ATL   NL 16  6 25 25 10   3  0    606 150  35 #> 26173 maddugr01   1995     1    ATL   NL 19  2 28 28 10   3  0    629 147  38 #> 26174 maddugr01   1996     1    ATL   NL 15 11 35 35  5   1  0    735 225  74 #> 26175 maddugr01   1997     1    ATL   NL 19  4 33 33  5   2  0    698 200  57 #> 26176 maddugr01   1998     1    ATL   NL 18  9 34 34  9   5  0    753 201  62 #> 26177 maddugr01   1999     1    ATL   NL 19  9 33 33  4   0  0    658 258  87 #> 26178 maddugr01   2000     1    ATL   NL 19  9 35 35  6   3  0    748 225  83 #> 26179 maddugr01   2001     1    ATL   NL 17 11 34 34  3   3  0    699 220  79 #> 26180 maddugr01   2002     1    ATL   NL 16  6 34 34  0   0  0    598 194  58 #> 26181 maddugr01   2003     1    ATL   NL 16 11 36 36  1   0  0    655 225  96 #> 26182 maddugr01   2004     1    CHN   NL 16 11 33 33  2   1  0    638 218  95 #> 26183 maddugr01   2005     1    CHN   NL 13 15 35 35  3   0  0    675 239 106 #> 26184 maddugr01   2006     1    CHN   NL  9 11 22 22  0   0  0    409 153  71 #> 26185 maddugr01   2006     2    LAN   NL  6  3 12 12  0   0  0    221  66  27 #> 26186 maddugr01   2007     1    SDN   NL 14 11 34 34  1   0  0    594 221  91 #> 26187 maddugr01   2008     1    SDN   NL  6  9 26 26  0   0  0    460 161  68 #> 26188 maddugr01   2008     2    LAN   NL  2  4  7  7  0   0  0    122  43  23 #>       HR BB  SO BAOpp  ERA IBB WP HBP BK  BFP GF   R WHIP KperBB #> 26164  3 11  20 0.321 5.52   2  2   1  0  144  1  20 1.77   2.22 #> 26165 17 74 101 0.279 5.61  13  4   4  7  701  2 111 1.64   1.66 #> 26166 13 81 140 0.235 3.18  16  3   9  6 1047  0  97 1.25   2.15 #> 26167 13 82 135 0.237 2.95  13  5   6  3 1002  0  90 1.28   1.96 #> 26168 11 71 144 0.254 3.46  10  3   4  3 1011  0 116 1.32   2.36 #> 26169 18 66 198 0.227 3.35   9  6   6  3 1070  0 113 1.13   3.47 #> 26170  7 70 199 0.200 2.18   7  5  14  0 1061  0  68 1.01   3.16 #> 26171 14 52 197 0.222 2.36   7  5   6  1 1064  0  85 1.05   4.38 #> 26172  4 31 156 0.198 1.56   3  3   6  1  774  0  44 0.90   5.57 #> 26173  8 23 181 0.189 1.63   3  1   4  0  785  0  39 0.81   9.05 #> 26174 11 28 172 0.234 2.72  11  4   3  0  978  0  85 1.03  10.12 #> 26175  9 20 177 0.223 2.20   6  0   6  0  893  0  58 0.95  12.64 #> 26176 13 45 204 0.211 2.22  10  4   7  0  987  0  75 0.98   5.83 #> 26177 16 37 136 0.282 3.57   8  1   4  0  940  0 103 1.34   4.69 #> 26178 19 42 190 0.231 3.00  12  1  10  2 1012  0  91 1.07   6.33 #> 26179 20 27 173 0.239 3.05  10  2   7  0  927  0  86 1.06  10.18 #> 26180 14 45 118 0.245 2.62   7  1   4  0  820  0  67 1.20   3.11 #> 26181 24 33 124 0.256 3.96   7  3   8  0  901  0 112 1.18   4.77 #> 26182 35 33 151 0.255 4.02   4  2   9  0  872  0 103 1.18   5.21 #> 26183 29 36 136 0.261 4.24   4  8   7  0  936  0 112 1.22   4.25 #> 26184 14 23  81 0.272 4.69   3  0   0  0  572  0  78 1.29   4.05 #> 26185  6 14  36 0.230 3.30   4  0   0  0  290  0  31 1.09   3.60 #> 26186 14 25 104 0.271 4.14   3  5   6  0  830  0  92 1.24   4.73 #> 26187 16 26  80 0.259 3.99   4  2   5  2  638  0  80 1.22   3.64 #> 26188  5  4  18 0.261 5.09   1  0   1  0  166  0  25 1.16   6.00  # Best ERAs for starting pitchers post WWII pitching %>%      filter(yearID >= 1946 & IPouts >= 600) %>%     group_by(lgID) %>%     arrange(ERA) %>%     do(head(., 5)) #> # A tibble: 10 × 29 #> # Groups:   lgID [2] #>    playerID  yearID stint teamID lgID      W     L     G    GS    CG   SHO    SV #>    <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int> #>  1 tiantlu01   1968     1 CLE    AL       21     9    34    32    19     9     0 #>  2 chancde01   1964     1 LAA    AL       20     9    46    35    15    11     4 #>  3 guidrro01   1978     1 NYA    AL       25     3    35    35    16     9     0 #>  4 martipe02   2000     1 BOS    AL       18     6    29    29     7     4     0 #>  5 mcdowsa01   1968     1 CLE    AL       15    14    38    37    11     3     0 #>  6 gibsobo01   1968     1 SLN    NL       22     9    34    34    28    13     0 #>  7 goodedw01   1985     1 NYN    NL       24     4    35    35    16     8     0 #>  8 maddugr01   1994     1 ATL    NL       16     6    25    25    10     3     0 #>  9 maddugr01   1995     1 ATL    NL       19     2    28    28    10     3     0 #> 10 greinza01   2015     1 LAN    NL       19     3    32    32     1     0     0 #> # ℹ 17 more variables: IPouts <int>, H <int>, ER <int>, HR <int>, BB <int>, #> #   SO <int>, BAOpp <dbl>, ERA <dbl>, IBB <int>, WP <int>, HBP <int>, BK <int>, #> #   BFP <int>, GF <int>, R <int>, WHIP <dbl>, KperBB <dbl>   # Best K/BB ratios post-1955 among starters (excludes intentional walks) pitching %>%      filter(yearID >= 1955 & IPouts >= 600) %>%     mutate(KperBB = SO/(BB - IBB)) %>%     arrange(desc(KperBB)) %>%     head(., 10) #>     playerID yearID stint teamID lgID  W  L  G GS CG SHO SV IPouts   H ER HR BB #> 1  maddugr01   1997     1    ATL   NL 19  4 33 33  5   2  0    698 200 57  9 20 #> 2  hugheph01   2014     1    MIN   AL 16 10 32 32  1   0  0    629 221 82 16 16 #> 3  maddugr01   2001     1    ATL   NL 17 11 34 34  3   3  0    699 220 79 20 27 #> 4  maddugr01   1996     1    ATL   NL 15 11 35 35  5   1  0    735 225 74 11 28 #> 5  schilcu01   2002     1    ARI   NL 23  7 36 35  5   1  0    778 218 93 29 33 #> 6  maddugr01   1995     1    ATL   NL 19  2 28 28 10   3  0    629 147 38  8 23 #> 7  martipe02   2000     1    BOS   AL 18  6 29 29  7   4  0    651 128 42 17 32 #> 8  martipe02   1999     1    BOS   AL 23  4 31 29  5   1  0    640 160 49  9 37 #> 9  scherma01   2015     1    WAS   NL 14 12 33 33  4   3  0    686 176 71 27 34 #> 10 sheetbe01   2004     1    MIL   NL 12 14 34 34  5   0  0    711 201 71 25 32 #>     SO BAOpp  ERA IBB WP HBP BK  BFP GF  R WHIP    KperBB #> 1  177 0.223 2.20   6  0   6  0  893  0 58 0.95 12.642857 #> 2  186 0.260 3.52   1  1   5  0  855  0 88 1.13 12.400000 #> 3  173 0.239 3.05  10  2   7  0  927  0 86 1.06 10.176471 #> 4  172 0.234 2.72  11  4   3  0  978  0 85 1.03 10.117647 #> 5  316 0.219 3.23   1  6   3  0 1017  0 95 0.97  9.875000 #> 6  181 0.189 1.63   3  1   4  0  785  0 39 0.81  9.050000 #> 7  284 0.164 1.74   0  1  14  0  817  0 44 0.74  8.875000 #> 8  313 0.200 2.07   1  6   9  0  835  1 56 0.92  8.694444 #> 9  276 0.204 2.79   2 10   5  1  899  0 74 0.92  8.625000 #> 10 264 0.220 2.70   1  8   4  1  937  0 85 0.98  8.516129      # Best K/BB ratios among relievers post-1950 (min. 20 saves) pitching %>%      filter(yearID >= 1950 & SV >= 20) %>%     arrange(desc(KperBB)) %>%     head(., 10) #>     playerID yearID stint teamID lgID W L  G GS CG SHO SV IPouts  H ER HR BB #> 1  eckerde01   1990     1    OAK   AL 4 2 63  0  0   0 48    220 41  5  2  4 #> 2  hendrli01   2021     1    CHA   AL 8 3 69  0  0   0 38    213 45 20 11  7 #> 3  eckerde01   1992     1    OAK   AL 7 1 69  0  0   0 51    240 62 17  5 11 #> 4  eckerde01   1989     1    OAK   AL 4 0 51  0  0   0 33    173 32 10  5  3 #> 5  janseke01   2017     1    LAN   NL 5 0 65  0  0   0 41    205 44 10  5  7 #> 6  eckerde01   1991     1    OAK   AL 5 4 67  0  0   0 43    228 60 25 11  9 #> 7  ueharko01   2013     1    BOS   AL 4 1 73  0  0   0 21    223 33  9  5  9 #> 8  riverma01   2008     1    NYA   AL 6 5 64  0  0   0 39    212 41 11  4  6 #> 9  doolise01   2014     1    OAK   AL 2 4 61  0  0   0 22    188 38 19  5  8 #> 10 eckerde01   1996     1    SLN   NL 0 6 63  0  0   0 30    180 65 22  8  6 #>     SO BAOpp  ERA IBB WP HBP BK BFP GF  R WHIP KperBB #> 1   73 0.157 0.61   1  0   0  0 262 61  9 0.61  24.33 #> 2  113 0.174 2.54   1  6   1  0 267 58 23 0.73  18.83 #> 3   93 0.205 1.91   6  0   1  0 309 65 17 0.91  18.60 #> 4   55 0.156 1.56   0  0   1  0 206 46 10 0.61  18.33 #> 5  109 0.177 1.32   0  2   2  1 258 57 11 0.75  15.57 #> 6   87 0.208 2.96   3  1   1  0 299 59 26 0.91  14.50 #> 7  101 0.129 1.09   2  1   1  0 265 40 10 0.57  14.43 #> 8   77 0.162 1.40   0  1   2  0 259 60 11 0.67  12.83 #> 9   89 0.168 2.73   1  0   0  0 236 40 19 0.73  12.71 #> 10  49 0.265 3.30   2  0   4  0 251 53 26 1.18  12.25  ############################################### # Winningest pitchers in each league each year: ###############################################  # Add name & throws information: peopleInfo <- People %>%                 select(playerID, nameLast, nameFirst, throws)                  # Merge peopleInfo into the pitching data pitching1 <- right_join(peopleInfo, pitching, by = \"playerID\")  # Extract the pitcher with the maximum number of wins  # each year, by league winp <- pitching1 %>%          group_by(yearID, lgID) %>%          filter(W == max(W)) %>%           select(nameLast, nameFirst, teamID, W, throws) #> Adding missing grouping variables: `yearID`, `lgID`  # A simple ANCOVA model of wins vs. year, league and hand (L/R) anova(lm(formula = W ~ yearID + I(yearID^2) + lgID + throws, data = winp)) #> Analysis of Variance Table #>  #> Response: W #>              Df  Sum Sq Mean Sq  F value    Pr(>F)     #> yearID        1 2449.00 2449.00 255.1550 < 2.2e-16 *** #> I(yearID^2)   1  117.50  117.50  12.2419 0.0005337 *** #> lgID          1   22.56   22.56   2.3504 0.1262433     #> throws        1   39.55   39.55   4.1201 0.0432051 *   #> Residuals   319 3061.80    9.60                        #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # Nature of managing pitching staffs has altered importance of # wins over time if (FALSE) { # \\dontrun{ require(\"ggplot2\")   # compare loess smooth with quadratic fit ggplot(winp, aes(x = yearID, y = W)) +     geom_point(aes(colour = throws, shape=lgID), size = 2) +     geom_smooth(method=\"loess\", size=1.5, color=\"blue\") +     geom_smooth(method = \"lm\", se=FALSE, color=\"black\",                   formula = y ~ poly(x,2)) +     ylab(\"League maximum Wins\") + xlab(\"Year\") +     ggtitle(\"Maximum pitcher wins by year\")      ## To reinforce this, plot the mean IPouts by year and league, ## which gives some idea of pitcher usage. Restrict pitcher ## pool to those who pitched at least 100 innings in a year.  pitching %>% filter(IPouts >= 300) %>%  # >= 100 IP  ggplot(., aes(x = yearID, y = IPouts, color = lgID)) +   geom_smooth(method=\"loess\") +   labs(x = \"Year\", y = \"IPouts\")  ## Another indicator: total number of complete games pitched ## (Mirrors the trend from the preceding plot.) pitching %>%     group_by(yearID, lgID) %>%    summarise(totalCG = sum(CG, na.rm = TRUE)) %>%    ggplot(., aes(x = yearID, y = totalCG, color = lgID)) +       geom_point() +       geom_path() +       labs(x = \"Year\", y = \"Number of complete games\") } # }"},{"path":"http://cdalzell.github.io/Lahman/reference/PitchingPost.html","id":null,"dir":"Reference","previous_headings":"","what":"PitchingPost table — PitchingPost","title":"PitchingPost table — PitchingPost","text":"Post season pitching statistics","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/PitchingPost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PitchingPost table — PitchingPost","text":"","code":"data(PitchingPost)"},{"path":"http://cdalzell.github.io/Lahman/reference/PitchingPost.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PitchingPost table — PitchingPost","text":"data frame 6757 observations following 30 variables. playerID Player ID code yearID Year round Level playoffs teamID Team; factor lgID League; factor levels AA AL NL W Wins L Losses G Games GS Games Started CG Complete Games SHO Shutouts SV Saves IPouts Outs Pitched (innings pitched x 3) H Hits ER Earned Runs HR Homeruns BB Walks Strikeouts BAOpp Opponents' batting average ERA Earned Run Average IBB Intentional Walks WP Wild Pitches HBP Batters Hit Pitch BK Balks BFP Batters faced Pitcher GF Games Finished R Runs Allowed SH Sacrifice Hits allowed SF Sacrifice Flies allowed GIDP Grounded Double Plays","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/PitchingPost.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PitchingPost table — PitchingPost","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/PitchingPost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PitchingPost table — PitchingPost","text":"","code":"library(\"dplyr\") library(ggplot2)  # Restrict data to World Series in modern era ws <- PitchingPost %>%          filter(yearID >= 1903 & round == \"WS\") # Pitchers with ERA 0.00 in WS play (> 10 IP) ws %>%   filter(IPouts > 30 & ERA == 0.00) %>%   arrange(desc(IPouts)) %>%   select(playerID, yearID, teamID, lgID, IPouts, W, L, G,           CG, SHO, H, R, SO, BFP)  #>     playerID yearID teamID lgID IPouts W L G CG SHO  H R SO BFP #> 1   hoytwa01   1921    NYA   AL     81 2 1 3  3   1 18 2 18 106 #> 2  mathech01   1905    NY1   NL     81 3 0 3  3   3 13 0 18  94 #> 3  hubbeca01   1933    NY1   NL     60 2 0 2  2   0 13 3 15  80 #> 4   fordwh01   1960    NYA   AL     54 2 0 2  2   2 11 0  8  65 #> 5  mcginjo01   1905    NY1   NL     51 1 1 2  1   1 10 3  6  65 #> 6  mailsdu01   1920    CLE   AL     47 1 0 2  1   1  6 0  6  58 #> 7  bentoru01   1917    NY1   NL     42 1 1 2  1   1  9 3  8  53 #> 8   fordwh01   1961    NYA   AL     42 2 0 2  1   1  6 0  7  49 #> 9  billija01   1972    CIN   NL     41 1 0 3  0   0  6 1 11  50 #> 10 dobsojo01   1946    BOS   AL     38 1 0 3  1   0  4 3 10  48 #> 11 reynoal01   1949    NYA   AL     37 1 0 2  1   1  2 0 14  43 #> 12 labincl01   1956    BRO   NL     36 1 0 2  1   1  8 1  7  47 #> 13 brownmo01   1908    CHN   NL     33 2 0 2  1   1  6 1  5  40 #> 14 jamesbi02   1914    BSN   NL     33 2 0 2  1   1  2 0  9  37 #> 15 krameja01   1944    SLA   AL     33 1 0 2  1   0  9 2 12  46 #> 16 beardge01   1948    CLE   AL     32 1 0 2  1   1  6 0  4  36 #> 17 larsedo01   1956    NYA   AL     32 1 0 2  1   1  1 4  7  37  # Pitchers with the most IP in a series  # 1903 Series went eight games - for details, see # https://en.wikipedia.org/wiki/1903_World_Series ws %>%   arrange(desc(IPouts)) %>%   select(playerID, yearID, teamID, lgID, IPouts, W, L, G,           CG, SHO, H, SO, BFP, ERA) %>%   head(., 10) #>     playerID yearID teamID lgID IPouts W L G CG SHO  H SO BFP  ERA #> 1  phillde01   1903    PIT   NL    132 3 2 5  5   0 38 22 178 3.07 #> 2  dinnebi01   1903    BOS   AL    105 3 1 4  4   2 29 28 134 2.06 #> 3  youngcy01   1903    BOS   AL    102 2 1 4  3   0 31 17 142 1.85 #> 4  mullige01   1909    DET   AL     96 2 1 4  3   1 23 20 132 2.25 #> 5  mathech01   1912    NY1   NL     86 0 2 3  3   0 23 10 115 0.94 #> 6  spahnwa01   1958    ML1   NL     86 2 1 3  2   1 19 18 113 2.20 #> 7  adamsba01   1909    PIT   NL     81 3 0 3  3   1 18 11 106 1.33 #> 8  burdele01   1957    ML1   NL     81 3 0 3  3   2 21 13 104 0.67 #> 9  coombja01   1910    PHA   AL     81 3 0 3  3   0 24 17 116 3.33 #> 10 covelst01   1920    CLE   AL     81 3 0 3  3   1 15  8  97 0.67  # Pitchers with highest strikeout rate in WS # (minimum 20 IP) ws %>%   filter(IPouts >= 60) %>%   mutate(K_rate = 27 * SO/IPouts) %>%   arrange(desc(K_rate)) %>%   select(playerID, yearID, teamID, lgID, IPouts,           H, SO, K_rate) %>%   head(., 10) #>     playerID yearID teamID lgID IPouts  H SO    K_rate #> 1  gibsobo01   1968    SLN   NL     81 18 35 11.666667 #> 2  schilcu01   2001    ARI   NL     64 12 26 10.968750 #> 3  koufasa01   1965    LAN   NL     72 13 29 10.875000 #> 4  gibsobo01   1964    SLN   NL     81 23 31 10.333333 #> 5  newhoha01   1945    DET   AL     62 25 22  9.580645 #> 6  gibsobo01   1967    SLN   NL     81 14 26  8.666667 #> 7   woodjo02   1912    BOS   AL     66 27 21  8.590909 #> 8  reynoal01   1952    NYA   AL     61 12 18  7.967213 #> 9  alexape01   1926    SLN   NL     61 12 17  7.524590 #> 10 earnsge01   1931    PHA   AL     72 12 20  7.500000    # Pitchers with the most IP in WS history ws %>%   group_by(playerID) %>%   summarise_at(vars(IPouts, H, ER, CG, BB, SO, W, L),                 sum, na.rm = TRUE) %>%   mutate(ERA = round(27 * ER/IPouts, 2),          Kper9 = round(27 * SO/IPouts, 3),          WHIP = round(3 * (H + BB)/IPouts, 3)) %>%   arrange(desc(IPouts)) %>%   select(-H, -ER) %>%   head(., 10) #> # A tibble: 10 × 10 #>    playerID  IPouts    CG    BB    SO     W     L   ERA Kper9  WHIP #>    <chr>      <int> <int> <int> <int> <int> <int> <dbl> <dbl> <dbl> #>  1 fordwh01     438     7    34    94    10     8  2.71  5.80 1.14  #>  2 mathech01    305    10    10    48     5     5  0.97  4.25 0.836 #>  3 ruffire01    257     8    27    61     7     2  2.63  6.41 1.18  #>  4 bendech01    255     9    21    59     6     4  2.44  6.25 1.01  #>  5 hoytwa01     251     6    22    49     6     4  1.83  5.27 1.23  #>  6 gibsobo01    243     8    17    92     7     2  1.89 10.2  0.889 #>  7 nehfar01     237     6    32    28     4     4  2.16  3.19 1.04  #>  8 pettian01    233     0    26    56     5     4  4.06  6.49 1.40  #>  9 reynoal01    232     5    32    62     7     2  2.79  7.22 1.20  #> 10 palmeji01    194     1    31    44     4     2  3.2   6.12 1.33   # Plot of K/9 by year ws %>%   group_by(yearID) %>%   summarise(Kper9 = 27 * sum(SO)/sum(IPouts)) %>%   ggplot(., aes(x = yearID, y = Kper9)) +     geom_point() +     geom_smooth() +     labs(x = \"Year\", y = \"K per 9 innings\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"http://cdalzell.github.io/Lahman/reference/playerInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup Information for Players and Teams — playerInfo","title":"Lookup Information for Players and Teams — playerInfo","text":"functions use grep lookup information players (People file) teams (Teams file).","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/playerInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup Information for Players and Teams — playerInfo","text":"","code":"playerInfo(playerID, nameFirst, nameLast, data = Lahman::People, extra = NULL, ...)  teamInfo(teamID, name, data = Lahman::Teams, extra = NULL, ...)"},{"path":"http://cdalzell.github.io/Lahman/reference/playerInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup Information for Players and Teams — playerInfo","text":"playerID pattern playerID nameFirst pattern first name nameLast pattern last name data name dataset search extra character vector fields include result ... arguments passed grep teamID pattern teamID name pattern team name","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/playerInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup Information for Players and Teams — playerInfo","text":"Returns data frame unique matching rows data","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/playerInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lookup Information for Players and Teams — playerInfo","text":"Michael Friendly","code":""},{"path":[]},{"path":"http://cdalzell.github.io/Lahman/reference/playerInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup Information for Players and Teams — playerInfo","text":"","code":"playerInfo(\"aaron\") #>    playerID nameFirst nameLast #> 2 aaronha01      Hank    Aaron #> 3 aaronto01    Tommie    Aaron    teamInfo(\"CH\", extra=\"park\") #>     teamID                              name                    park #> 2      CH1           Chicago White Stockings Union Base-Ball Grounds #> 33     CH2           Chicago White Stockings     23rd Street Grounds #> 52     CHN           Chicago White Stockings     23rd Street Grounds #> 149    CHU Chicago/Pittsburgh (Union League)                    <NA> #> 258    CHP                   Chicago Pirates                    <NA> #> 386    CHA                 Chicago White Sox      South Side Park II #> 603    CHF                  Chicago Chi-Feds           Wrigley Field"},{"path":"http://cdalzell.github.io/Lahman/reference/Salaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Salaries table — Salaries","title":"Salaries table — Salaries","text":"Player salary data.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Salaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Salaries table — Salaries","text":"","code":"data(Salaries)"},{"path":"http://cdalzell.github.io/Lahman/reference/Salaries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Salaries table — Salaries","text":"data frame 26428 observations following 5 variables. yearID Year teamID Team; factor lgID League; factor playerID Player ID code salary Salary","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Salaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Salaries table — Salaries","text":"real coverage player's salaries 1985.","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Salaries.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Salaries table — Salaries","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Salaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Salaries table — Salaries","text":"","code":"# what years are included? summary(Salaries$yearID) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1985    1994    2001    2001    2009    2016   # how many players included each year? table(Salaries$yearID) #>  #> 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000  #>  550  738  627  663  711  867  685  769  923  884  986  931  925  998 1006  836  #> 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016  #>  860  846  827  831  831  819  842  856  813  830  839  848  815  802  817  853   # Team salary data  require(\"dplyr\") require(\"ggplot2\")  # Total team salaries by league, team and year teamSalaries <- Salaries %>%                   group_by(lgID, teamID, yearID) %>%                   summarise(Salary = sum(as.numeric(salary))) %>%                   group_by(yearID, lgID) %>%                   arrange(desc(Salary)) #> `summarise()` has grouped output by 'lgID', 'teamID'. You can override using #> the `.groups` argument.  ####################################### # Highest paid players each year: maxSal <- Salaries %>%             group_by(yearID) %>%             filter(salary == max(salary))  maxPlayers <- bind_rows(lapply(maxSal$playerID, playerInfo)) %>%                   select(-playerID) maxSal <- bind_cols(maxPlayers, maxSal)  # Plot maximum MLB salary by year (1985-present)            ggplot(maxSal, aes(x = yearID, y = salary/1e6)) +    geom_point() +    geom_smooth(se = FALSE) +    labs(x = \"Year\", y = \"Salary (millions)\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # Plot salary distributions by year for all players ggplot(Salaries, aes(x = factor(yearID), y = salary/1e5)) +    geom_boxplot(fill = \"lightblue\", outlier.size = 1) +    labs(x = \"Year\", y = \"Salary ($100,000)\") +    coord_flip()   # Plot median MLB salary per year Salaries %>%    group_by(yearID) %>%    summarise(medsal = median(salary)) %>%    ggplot(., aes(x = yearID, y = medsal/1e6)) +    geom_point() +    geom_smooth() +    labs(x = \"Year\", y = \"Median MLB salary (millions)\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # add salary to Batting data batting <- Batting %>%               filter(yearID >= 1985) %>%               left_join(select(Salaries, playerID, yearID, teamID, salary),                           by=c(\"playerID\", \"yearID\", \"teamID\")) str(batting) #> 'data.frame':\t51544 obs. of  23 variables: #>  $ playerID: chr  \"aardsda01\" \"aardsda01\" \"aardsda01\" \"aardsda01\" ... #>  $ yearID  : int  2004 2006 2007 2008 2009 2010 2012 2013 2015 1985 ... #>  $ stint   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ teamID  : Factor w/ 149 levels \"ALT\",\"ANA\",\"ARI\",..: 117 35 33 16 116 116 93 94 4 5 ... #>  $ lgID    : Factor w/ 7 levels \"AA\",\"AL\",\"FL\",..: 5 5 2 2 2 2 2 5 5 2 ... #>  $ G       : int  11 45 25 47 73 53 1 43 33 54 ... #>  $ AB      : int  0 2 0 1 0 0 0 0 1 0 ... #>  $ R       : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ H       : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ X2B     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ X3B     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ HR      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ RBI     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ SB      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ CS      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ BB      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ SO      : int  0 0 0 1 0 0 0 0 1 0 ... #>  $ IBB     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ HBP     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ SH      : int  0 1 0 0 0 0 0 0 0 0 ... #>  $ SF      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ GIDP    : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ salary  : int  300000 NA 387500 403250 419000 2750000 500000 NA NA NA ...  ####################################### # Average salaries by teams, over years #######################################  # Some franchises are multiply named, so add a new variable # 'franchise' to the Salaries data as a lookup table  franchise <- c(`ANA` = \"LAA\", `ARI` = \"ARI\", `ATL` = \"ATL\",                 `BAL` = \"BAL\", `BOS` = \"BOS\", `CAL` = \"LAA\",                `CHA` = \"CHA\", `CHN` = \"CHN\", `CIN` = \"CIN\",                 `CLE` = \"CLE\", `COL` = \"COL\", `DET` = \"DET\",                 `FLO` = \"MIA\", `HOU` = \"HOU\", `KCA` = \"KCA\",                 `LAA` = \"LAA\", `LAN` = \"LAN\", `MIA` = \"MIA\",                 `MIL` = \"MIL\", `MIN` = \"MIN\", `ML4` = \"MIL\",                 `MON` = \"WAS\", `NYA` = \"NYA\", `NYM` = \"NYN\",                 `NYN` = \"NYN\", `OAK` = \"OAK\", `PHI` = \"PHI\",                 `PIT` = \"PIT\", `SDN` = \"SDN\", `SEA` = \"SEA\",                `SFG` = \"SFN\", `SFN` = \"SFN\", `SLN` = \"SLN\",                 `TBA` = \"TBA\", `TEX` = \"TEX\", `TOR` = \"TOR\",                `WAS` = \"WAS\")  Salaries$franchise <- unname(franchise[Salaries$teamID])  # Average salaries annual salaries by team, in millions USD avg_team_salaries <- Salaries %>%     group_by(yearID, franchise, lgID) %>%     summarise(salary= mean(salary)/1e6) %>%     filter(!(franchise == \"CLE\" & lgID == \"NL\")) #> `summarise()` has grouped output by 'yearID', 'franchise'. You can override #> using the `.groups` argument.  # Spaghetti plot of team salary over time by team # Yankees have largest average team salary since 2003 ggplot(avg_team_salaries,         aes(x = yearID, y = salary, group = factor(franchise))) +        geom_path() +        labs(x = \"Year\", y = \"Average team salary (millions USD)\")"},{"path":"http://cdalzell.github.io/Lahman/reference/Schools.html","id":null,"dir":"Reference","previous_headings":"","what":"Schools table — Schools","title":"Schools table — Schools","text":"Information schools players attended, school","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Schools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schools table — Schools","text":"","code":"data(Schools)"},{"path":"http://cdalzell.github.io/Lahman/reference/Schools.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Schools table — Schools","text":"data frame 1241 observations following 5 variables. schoolID school ID code name_full school name city city school located state state school's city located country country school located","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Schools.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Schools table — Schools","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Schools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Schools table — Schools","text":"","code":"require(\"dplyr\")  # How many different schools are listed in each state? table(Schools$state) #>  #>              AL              AR              AZ       Baltimore        Berkeley  #>              33              17              14               1               1  #>       Bradenton        Brooklyn      Brookville         Buffalo              CA  #>               1               2               1               1             127  #>              CO              CT     Catonsville              DC              DE  #>              11              15               1               7               4  #>           Davis            Erie           Essex              FL              GA  #>               1               1               1              54              25  #>              HI         Houston              IA              ID              IL  #>               3               1              25               8              61  #>              IN          Irvine              KS              KY          Keokuk  #>              24               1              27              17               1  #>        Kirkwood              LA        La Jolla     Los Angeles              MA  #>               1              17               1               1              28  #>              MD              ME              MI              MN              MO  #>              21               8              31              12              30  #>              MS         Mankato           Miami     Monroeville        Moorhead  #>              22               1               3               1               1  #>          Morris              NC              ND              NE              NH  #>               1              39               2              12               5  #>              NJ              NM              NV              NY   New Brunswick  #>              22               7               3              50               1  #>        New York              OH              OK              OR              PA  #>               1              42              23              17              69  #>          Pomona              RI       Riverside       Rockville              SC  #>               1               7               1               1              19  #>              SD San Luis Obispo   Santa Barbara       St. Louis              TN  #>               1               1               1               1              39  #>              TX         Teaneck              UT              VA              VT  #>              79               1              10              27               4  #>              WA              WI              WV              WY    West Mifflin  #>              25              16              13               1               1    # How many different schools are listed in each country? table(Schools$country) #>  #>   CA   FL   IA   MD   MN   MO   NJ   NY   PA   TX  USA  #>    9    4    1    4    3    2    2    5    3    1 1173   # Top 20 schools  schoolInfo <- Schools %>% select(-country)  schoolCount <- CollegePlaying %>%                  group_by(schoolID) %>%                  summarise(players = length(schoolID)) %>%                  left_join(schoolInfo, by = \"schoolID\") %>%                  arrange(desc(players))  head(schoolCount, 20) #> # A tibble: 20 × 5 #>    schoolID   players name_full                                   city     state #>    <chr>        <int> <chr>                                       <chr>    <chr> #>  1 texas          265 University of Texas at Austin               \"Austin\" TX    #>  2 usc            250 University of Southern California           \"Los An… CA    #>  3 stanford       248 Stanford University                         \"Palo A… CA    #>  4 arizonast      236 Arizona State University                    \"Tempe\"  AZ    #>  5 michigan       191 University of Michigan                      \"Ann Ar… MI    #>  6 ucla           180 University of California                    \" Los A… Los … #>  7 holycross      167 College of the Holy Cross                   \"Worces… MA    #>  8 california     162 University of California                    \" Berke… Berk… #>  9 arizona        161 University of Arizona                       \"Tucson\" AZ    #> 10 alabama        155 University of Alabama                       \"Tuscal… AL    #> 11 unc            154 University of North Carolina at Chapel Hill \"Chapel… NC    #> 12 floridast      152 Florida State University                    \"Tallah… FL    #> 13 lsu            149 Louisiana State University                  \"Baton … LA    #> 14 illinois       141 University of Illinois at Urbana-Champaign  \"Champa… IL    #> 15 clemson        138 Clemson University                          \"Clemso… SC    #> 16 florida        138 University of Florida                       \"Gaines… FL    #> 17 gatech         137 Georgia Institute of Technology             \"Atlant… GA    #> 18 oklahoma       135 University of Oklahoma                      \"Norman\" OK    #> 19 notredame      134 University of Notre Dame                    \"South … IN    #> 20 okstate        132 Oklahoma State University                   \"Stillw… OK     # sum counts by state schoolStates <- schoolCount %>%                   group_by(state) %>%                   summarise(players = sum(players),                             schools = length(state)) str(schoolStates) #> tibble [76 × 3] (S3: tbl_df/tbl/data.frame) #>  $ state  : chr [1:76] \"AL\" \"AR\" \"AZ\" \"Baltimore\" ... #>  $ players: int [1:76] 459 165 524 3 162 39 13 3 2412 80 ... #>  $ schools: int [1:76] 27 15 13 1 1 1 2 1 114 7 ... summary(schoolStates) #>     state              players          schools       #>  Length:76          Min.   :   1.0   Min.   :  1.00   #>  Class :character   1st Qu.:  16.0   1st Qu.:  1.00   #>  Mode  :character   Median :  98.0   Median :  6.00   #>                     Mean   : 228.3   Mean   : 13.66   #>                     3rd Qu.: 358.0   3rd Qu.: 19.00   #>                     Max.   :2412.0   Max.   :114.00"},{"path":"http://cdalzell.github.io/Lahman/reference/SeriesPost.html","id":null,"dir":"Reference","previous_headings":"","what":"SeriesPost table — SeriesPost","title":"SeriesPost table — SeriesPost","text":"Post season series information","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/SeriesPost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SeriesPost table — SeriesPost","text":"","code":"data(SeriesPost)"},{"path":"http://cdalzell.github.io/Lahman/reference/SeriesPost.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SeriesPost table — SeriesPost","text":"data frame 389 observations following 9 variables. yearID Year round Level playoffs teamIDwinner Team ID team won series; factor lgIDwinner League ID team won series; factor levels AL NL teamIDloser Team ID team lost series; factor lgIDloser League ID team lost series; factor levels AL NL wins Wins team won series losses Losses team won series ties Tie games","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/SeriesPost.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SeriesPost table — SeriesPost","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/SeriesPost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SeriesPost table — SeriesPost","text":"","code":"data(SeriesPost)  # How many times has each team won the World Series?  # Notes:  # - the SeriesPost table includes an identifier for the  # team (teamID), but not the franchise (e.g. the Brooklyn Dodgers # [BRO] and Los Angeles Dodgers [LAN] are counted separately) # # - the World Series was first played in 1903, but the  # Lahman data tables have the final round of the earlier  # playoffs labelled \"WS\", so it is necessary to # filter the SeriesPost table to exclude years prior to 1903.   # using the dplyr data manipulation package library(\"dplyr\") library(\"tidyr\") library(\"ggplot2\")  ## WS winners, arranged in descending order of titles won ws_winner_table <- SeriesPost %>%   filter(yearID > \"1902\", round == \"WS\") %>%   group_by(teamIDwinner) %>%   summarise(wincount = n()) %>%   arrange(desc(wincount)) ws_winner_table #> # A tibble: 31 × 2 #>    teamIDwinner wincount #>    <fct>           <int> #>  1 NYA                27 #>  2 SLN                11 #>  3 BOS                 9 #>  4 LAN                 6 #>  5 CIN                 5 #>  6 NY1                 5 #>  7 PHA                 5 #>  8 PIT                 5 #>  9 DET                 4 #> 10 OAK                 4 #> # ℹ 21 more rows  ## Expanded form of World Series team data in modern era  ws <- SeriesPost %>%         filter(yearID >= 1903 & round == \"WS\") %>%         select(-ties, -round) %>%         mutate(lgIDloser = droplevels(lgIDloser),                lgIDwinner = droplevels(lgIDwinner))  # Bar chart of length of series (# games played) # 1903, 1919 and 1921 had eight games ggplot(ws, aes(x = wins + losses)) +   geom_bar(fill = \"dodgerblue\") +   labs(x = \"Number of games\", y = \"Frequency\")   # Last year the Cubs appeared in the WS ws %>%    filter(teamIDwinner == \"CHN\" | teamIDloser == \"CHN\") %>%    summarise(max(yearID)) #>   max(yearID) #> 1        2016  # Dot chart of number of WS appearances by teamID ws %>%    gather(wl, team, teamIDwinner, teamIDloser) %>%   count(team) %>%   arrange(desc(n)) %>%   ggplot(., aes(x = reorder(team, n), y = n)) +     theme_bw() +     geom_point(size = 3, color = \"dodgerblue\") +     geom_segment(aes(xend = reorder(team, n), yend = 0),                   linetype = \"dotted\", color = \"dodgerblue\",                   size = 1) +     labs(x = NULL, y = \"Number of WS appearances\") +     scale_y_continuous(expand = c(0, 0), limits = c(0, 42)) +     coord_flip() +     theme(axis.text.y = element_text(size = rel(0.8)),           axis.ticks.y = element_blank()) #> Warning: attributes are not identical across measure variables; they will be dropped   # Initial year of each round of championship series in modern era SeriesPost %>%      filter(yearID >= 1903) %>%   # modern WS started in 1903     group_by(round) %>%     summarise(first_year = min(yearID)) %>%     arrange(first_year) #> # A tibble: 21 × 2 #>    round first_year #>    <chr>      <int> #>  1 WS          1903 #>  2 ALCS        1969 #>  3 NLCS        1969 #>  4 AEDIV       1981 #>  5 AWDIV       1981 #>  6 NEDIV       1981 #>  7 NWDIV       1981 #>  8 ALDS1       1995 #>  9 ALDS2       1995 #> 10 NLDS1       1995 #> # ℹ 11 more rows  # Ditto, but with more information about each series played SeriesPost %>%    filter(yearID >= 1903) %>%   group_by(round) %>%   arrange(yearID) %>%   do(head(., 1)) %>%   select(-lgIDwinner, -lgIDloser) %>%   arrange(yearID, round) #> # A tibble: 21 × 7 #> # Groups:   round [21] #>    yearID round teamIDwinner teamIDloser  wins losses  ties #>     <int> <chr> <fct>        <fct>       <int>  <int> <int> #>  1   1903 WS    BOS          PIT             5      3     0 #>  2   1969 ALCS  BAL          MIN             3      0     0 #>  3   1969 NLCS  NYN          ATL             3      0     0 #>  4   1981 AEDIV NYA          ML4             3      2     0 #>  5   1981 AWDIV OAK          KCA             3      0     0 #>  6   1981 NEDIV MON          PHI             3      2     0 #>  7   1981 NWDIV LAN          HOU             3      2     0 #>  8   1995 ALDS1 CLE          BOS             3      0     0 #>  9   1995 ALDS2 SEA          NYA             3      2     0 #> 10   1995 NLDS1 ATL          COL             3      1     0 #> # ℹ 11 more rows"},{"path":"http://cdalzell.github.io/Lahman/reference/Teams.html","id":null,"dir":"Reference","previous_headings":"","what":"Teams table — Teams","title":"Teams table — Teams","text":"Yearly statistics standings teams","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Teams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Teams table — Teams","text":"","code":"data(Teams)"},{"path":"http://cdalzell.github.io/Lahman/reference/Teams.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Teams table — Teams","text":"data frame 3045 observations following 48 variables. yearID Year lgID League; factor levels AA AL FL NL PL UA teamID Team; factor franchID Franchise (links TeamsFranchises table) divID Team's division; factor levels  C E W Rank Position final standings G Games played Ghome Games played home W Wins L Losses DivWin Division Winner (Y N) WCWin Wild Card Winner (Y N) LgWin League Champion(Y N) WSWin World Series Winner (Y N) R Runs scored AB bats H Hits batters X2B Doubles X3B Triples HR Homeruns batters BB Walks batters Strikeouts batters SB Stolen bases CS Caught stealing HBP Batters hit pitch SF Sacrifice flies RA Opponents runs scored ER Earned runs allowed ERA Earned run average CG Complete games SHO Shutouts SV Saves IPouts Outs Pitched (innings pitched x 3) HA Hits allowed HRA Homeruns allowed BBA Walks allowed SOA Strikeouts pitchers E Errors DP Double Plays FP Fielding  percentage name Team's full name park Name team's home ballpark attendance Home attendance total BPF Three-year park factor batters PPF Three-year park factor pitchers teamIDBR Team ID used Baseball Reference website teamIDlahman45 Team ID used Lahman database version 4.5 teamIDretro Team ID used Retrosheet","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Teams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Teams table — Teams","text":"Variables X2B X3B named 2B 3B original database","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Teams.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Teams table — Teams","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/Teams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Teams table — Teams","text":"","code":"data(Teams) library(\"dplyr\") library(\"tidyr\")  # Add some selected measures to the Teams data frame # Restrict to AL and NL in modern era teams <- Teams %>%    filter(yearID >= 1901 & lgID %in% c(\"AL\", \"NL\")) %>%   group_by(yearID, teamID) %>%   mutate(TB = H + X2B + 2 * X3B + 3 * HR,          WinPct = W/G,          rpg = R/G,          hrpg = HR/G,          tbpg = TB/G,          kpg = SO/G,          k2bb = SO/BB,          whip = 3 * (H + BB)/IPouts)  # Function to create a ggplot by year for selected team stats # Both arguments are character strings yrPlot <- function(yvar, label) {     require(\"ggplot2\")     ggplot(teams, aes_string(x = \"yearID\", y = yvar)) +        geom_point(size = 0.5) +        geom_smooth(method=\"loess\") +        labs(x = \"Year\", y = paste(label, \"per game\")) }  ## Run scoring in the modern era by year yrPlot(\"rpg\", \"Runs\") #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ℹ Please use tidy evaluation idioms with `aes()`. #> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. #> `geom_smooth()` using formula = 'y ~ x'   ## Home runs per game by year yrPlot(\"hrpg\", \"Home runs\") #> `geom_smooth()` using formula = 'y ~ x'   ## Total bases per game by year yrPlot(\"tbpg\", \"Total bases\") #> `geom_smooth()` using formula = 'y ~ x'   ## Strikeouts per game by year yrPlot(\"kpg\", \"Strikeouts\") #> `geom_smooth()` using formula = 'y ~ x' #> Warning: Removed 16 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 16 rows containing missing values or values outside the scale range #> (`geom_point()`).   ## Plot win percentage vs. run differential (R - RA) ggplot(teams, aes(x = R - RA, y = WinPct)) +    geom_point(size = 0.5) +    geom_smooth(method=\"loess\") +     geom_hline(yintercept = 0.5, color = \"orange\") +    geom_vline(xintercept = 0, color = \"orange\") +    labs(x = \"Run differential\", y = \"Win percentage\") #> `geom_smooth()` using formula = 'y ~ x'   ## Plot attendance vs. win percentage by league, post-1980 teams %>%  filter(yearID >= 1980) %>% ggplot(., aes(x = WinPct, y = attendance/1000)) +    geom_point(size = 0.5) +    geom_smooth(method=\"loess\", se = FALSE) +    facet_wrap(~ lgID) +    labs(x = \"Win percentage\", y = \"Attendance (1000s)\") #> `geom_smooth()` using formula = 'y ~ x'   ## Teams with over 4 million attendance in a season teams %>%    filter(attendance >= 4e6) %>%   select(yearID, lgID, teamID, Rank, attendance) %>%   arrange(desc(attendance)) #> # A tibble: 9 × 5 #> # Groups:   yearID, teamID [9] #>   yearID lgID  teamID  Rank attendance #>    <int> <fct> <fct>  <int>      <int> #> 1   1993 NL    COL        6    4483350 #> 2   2008 AL    NYA        3    4298655 #> 3   2007 AL    NYA        2    4271083 #> 4   2006 AL    NYA        1    4248067 #> 5   2005 AL    NYA        1    4090696 #> 6   1993 AL    TOR        1    4057947 #> 7   2008 NL    NYN        2    4042045 #> 8   1992 AL    TOR        1    4028318 #> 9   1991 AL    TOR        1    4001527  ## Average season HRs by park, post-1980 teams %>%     filter(yearID >= 1980) %>%    group_by(park) %>%      summarise(meanHRpg = mean((HR + HRA)/Ghome), nyears = n()) %>%      filter(nyears >= 10) %>%      arrange(desc(meanHRpg)) %>%      head(., 10) #> # A tibble: 10 × 3 #>    park                        meanHRpg nyears #>    <chr>                          <dbl>  <int> #>  1 Yankee Stadium III              5.07     14 #>  2 The Ballpark at Arlington       4.87     11 #>  3 Great American Ball Park        4.81     20 #>  4 Rogers Centre                   4.77     18 #>  5 Angel Stadium of Anaheim        4.75     12 #>  6 Oriole Park at Camden Yards     4.70     32 #>  7 Coors Field                     4.63     29 #>  8 Target Field                    4.57     14 #>  9 Miller Park                     4.56     23 #> 10 Citizens Bank Park              4.56     20  ## Home runs per game at Fenway Park and Wrigley Field, ## the two oldest MLB parks, by year. Fenway opened in 1912. teams %>%    filter(yearID >= 1912 & teamID %in% c(\"BOS\", \"CHN\")) %>%   mutate(hrpg = (HR + HRA)/Ghome) %>%   ggplot(., aes(x = yearID, y = hrpg, color = teamID)) +     geom_line(size = 1) +     geom_point() +     labs(x = \"Year\", y = \"Home runs per game\", color = \"Team\") +     scale_color_manual(values = c(\"red\", \"blue\"))   ## Ditto for total strikeouts per game teams %>%    filter(yearID >= 1912 & teamID %in% c(\"BOS\", \"CHN\")) %>%   mutate(kpg = (SO + SOA)/Ghome) %>%   ggplot(., aes(x = yearID, y = kpg, color = teamID)) +   geom_line(size = 1) +   geom_point() +   labs(x = \"Year\", y = \"Strikeouts per game\", color = \"Team\") +   scale_color_manual(values = c(\"red\", \"blue\"))   #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`).    if (FALSE) { # \\dontrun{ if(require(googleVis)) { motion1 <- gvisMotionChart(as.data.frame(teams),               idvar=\"teamID\", timevar=\"yearID\", chartid=\"gvisTeams\",              options=list(width=700, height=600)) plot(motion1) #print(motion1, file=\"gvisTeams.html\")  # Merge with avg salary for years where salary is available  teamsal <- Salaries %>%                 group_by(yearID, teamID) %>%                 summarise(Salary = sum(salary, na.rm = TRUE)) %>%                 select(yearID, teamID, Salary)  teamsSal <- teams %>%                 filter(yearID >= 1985) %>%                 left_join(teamsal, by = c(\"yearID\", \"teamID\")) %>%                 select(yearID, teamID, attendance, Salary, WinPct) %>%                 as.data.frame(.)  motion2 <- gvisMotionChart(teamsSal, idvar=\"teamID\", timevar=\"yearID\",   xvar=\"attendance\", yvar=\"salary\", sizevar=\"WinPct\",   chartid=\"gvisTeamsSal\", options=list(width=700, height=600)) plot(motion2) #print(motion2, file=\"gvisTeamsSal.html\")  } } # }"},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsFranchises.html","id":null,"dir":"Reference","previous_headings":"","what":"TeamFranchises table — TeamsFranchises","title":"TeamFranchises table — TeamsFranchises","text":"Information team franchises","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsFranchises.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TeamFranchises table — TeamsFranchises","text":"","code":"data(TeamsFranchises)"},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsFranchises.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TeamFranchises table — TeamsFranchises","text":"data frame 120 observations following 4 variables. franchID Franchise ID; factor franchName Franchise name active Whether team currently active (Y N) NAassoc ID National Association team franchise played ","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsFranchises.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TeamFranchises table — TeamsFranchises","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsFranchises.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TeamFranchises table — TeamsFranchises","text":"","code":"data(TeamsFranchises)  # Which of the active Major League Baseball teams had a National Association predecessor?  # Notes:  # - the National Association was founded in 1871, and continued through the # 1875 season. In 1876, six clubs from the National Association and two other # independent clubs formed the National League, which exists to this day. # - the `active` field has \"NA\" for the National Association franchises # - where appropriate, the `NAassoc` field has the `franchID` of the successor National League team  # using the dplyr data manipulation package library(\"dplyr\")  NatAssoc_active_table <- TeamsFranchises %>%   filter(active == \"Y\") %>%   filter(!is.na(NAassoc)) NatAssoc_active_table #>   franchID     franchName active NAassoc #> 1      ATL Atlanta Braves      Y     BNA #> 2      CHC   Chicago Cubs      Y     CNA  # Merge current team IDs with franchise IDs currentTeams <- Teams %>%                    filter(yearID == 2014) %>%                   select(teamID, franchID, lgID, park)  # Merge TeamsFranchises with currentTeams TeamsFranchises %>%     filter(active == \"Y\") %>%     select(-active, -NAassoc) %>%     left_join(currentTeams, by = \"franchID\") #>    franchID                    franchName teamID lgID #> 1       ANA Los Angeles Angels of Anaheim    LAA   AL #> 2       ARI          Arizona Diamondbacks    ARI   NL #> 3       ATL                Atlanta Braves    ATL   NL #> 4       BAL             Baltimore Orioles    BAL   AL #> 5       BOS                Boston Red Sox    BOS   AL #> 6       CHC                  Chicago Cubs    CHN   NL #> 7       CHW             Chicago White Sox    CHA   AL #> 8       CIN               Cincinnati Reds    CIN   NL #> 9       CLE             Cleveland Indians    CLE   AL #> 10      COL              Colorado Rockies    COL   NL #> 11      DET                Detroit Tigers    DET   AL #> 12      FLA               Florida Marlins    MIA   NL #> 13      HOU                Houston Astros    HOU   AL #> 14      KCR            Kansas City Royals    KCA   AL #> 15      LAD           Los Angeles Dodgers    LAN   NL #> 16      MIL             Milwaukee Brewers    MIL   NL #> 17      MIN               Minnesota Twins    MIN   AL #> 18      NYM                 New York Mets    NYN   NL #> 19      NYY              New York Yankees    NYA   AL #> 20      OAK             Oakland Athletics    OAK   AL #> 21      PHI         Philadelphia Phillies    PHI   NL #> 22      PIT            Pittsburgh Pirates    PIT   NL #> 23      SDP              San Diego Padres    SDN   NL #> 24      SEA              Seattle Mariners    SEA   AL #> 25      SFG          San Francisco Giants    SFN   NL #> 26      STL           St. Louis Cardinals    SLN   NL #> 27      TBD                Tampa Bay Rays    TBA   AL #> 28      TEX                 Texas Rangers    TEX   AL #> 29      TOR             Toronto Blue Jays    TOR   AL #> 30      WSN          Washington Nationals    WAS   NL #>                            park #> 1      Angel Stadium of Anaheim #> 2                   Chase Field #> 3                  Turner Field #> 4   Oriole Park at Camden Yards #> 5                Fenway Park II #> 6                 Wrigley Field #> 7           U.S. Cellular Field #> 8      Great American Ball Park #> 9             Progressive Field #> 10                  Coors Field #> 11                Comerica Park #> 12                 Marlins Park #> 13             Minute Maid Park #> 14             Kauffman Stadium #> 15               Dodger Stadium #> 16                  Miller Park #> 17                 Target Field #> 18                   Citi Field #> 19           Yankee Stadium III #> 20                O.co Coliseum #> 21           Citizens Bank Park #> 22                     PNC Park #> 23                   Petco Park #> 24                 Safeco Field #> 25                    AT&T Park #> 26            Busch Stadium III #> 27              Tropicana Field #> 28 Globe Life Park in Arlington #> 29                Rogers Centre #> 30               Nationals Park"},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsHalf.html","id":null,"dir":"Reference","previous_headings":"","what":"TeamsHalf table — TeamsHalf","title":"TeamsHalf table — TeamsHalf","text":"Split season data teams","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsHalf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TeamsHalf table — TeamsHalf","text":"","code":"data(TeamsHalf)"},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsHalf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TeamsHalf table — TeamsHalf","text":"data frame 52 observations following 10 variables. yearID Year lgID League; factor levels AL NL teamID Team; factor Half First second half season divID Division DivWin Won Division (Y N) Rank Team's position standings half G Games played W Wins L Losses","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsHalf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TeamsHalf table — TeamsHalf","text":"Lahman, S. (2024) Lahman's Baseball Database, 1871-2023, 2024 version, http://www.seanlahman.com/","code":""},{"path":"http://cdalzell.github.io/Lahman/reference/TeamsHalf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TeamsHalf table — TeamsHalf","text":"","code":"# 1981 season team data split into half seasons data(TeamsHalf) library(\"dplyr\")  # List standings with winning percentages by # season half, league and division TeamsHalf %>%    group_by(Half, lgID, divID) %>%    mutate(WinPct = round(W/G, 3)) %>%    arrange(Half, lgID, divID, Rank) %>%    select(Half, lgID, divID, Rank, teamID, WinPct) #> # A tibble: 52 × 6 #> # Groups:   Half, lgID, divID [8] #>     Half lgID  divID  Rank teamID WinPct #>    <int> <fct> <chr> <int> <fct>   <dbl> #>  1     1 AL    E         1 NYA     0.607 #>  2     1 AL    E         2 BAL     0.574 #>  3     1 AL    E         3 ML4     0.554 #>  4     1 AL    E         4 DET     0.544 #>  5     1 AL    E         5 BOS     0.536 #>  6     1 AL    E         6 CLE     0.52  #>  7     1 AL    E         7 TOR     0.276 #>  8     1 AL    W         1 OAK     0.617 #>  9     1 AL    W         2 TEX     0.6   #> 10     1 AL    W         3 CHA     0.585 #> # ℹ 42 more rows"},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-120-0-2024-09-24","dir":"Changelog","previous_headings":"","what":"Version 12.0-0 (2024-09-24)","title":"Version 12.0-0 (2024-09-24)","text":"CRAN release: 2024-09-26 Updated data 2023 season","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-110-0-2023-04-16","dir":"Changelog","previous_headings":"","what":"Version 11.0-0 (2023-04-16)","title":"Version 11.0-0 (2023-04-16)","text":"CRAN release: 2023-05-04 Updated data 2022 season","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-100-1-2022-04-07","dir":"Changelog","previous_headings":"","what":"Version 10.0-1 (2022-04-07)","title":"Version 10.0-1 (2022-04-07)","text":"CRAN release: 2022-04-26 Updated data 2021 season Removed Master table replaced People table","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-90-0-2021-04-09","dir":"Changelog","previous_headings":"","what":"Version 9.0-0 (2021-04-09)","title":"Version 9.0-0 (2021-04-09)","text":"CRAN release: 2021-04-09 Updated data 2020 season","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-80-1-2021-01-20","dir":"Changelog","previous_headings":"","what":"Version 8.0-1 (2021-01-20)","title":"Version 8.0-1 (2021-01-20)","text":"CRAN release: 2021-01-21 RData files now compressed version=2 avoid dplyr warnings","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-80-0-2020-06-06","dir":"Changelog","previous_headings":"","what":"Version 8.0-0 (2020-06-06)","title":"Version 8.0-0 (2020-06-06)","text":"CRAN release: 2020-06-08 Updated data 2019 season Added FieldingOFsplit HomeTeams tables","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-70-1-2019-05-01","dir":"Changelog","previous_headings":"","what":"Version 7.0-1 (2019-05-01)","title":"Version 7.0-1 (2019-05-01)","text":"CRAN release: 2019-05-02 Updated data 2017 2018 seasons Added People table. Master table now People table Lahman dataset. Master now copy People retained backward compatibility Added Parks table Added introductory example vignettes Added ability check reverse dependencies","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-60-0-2017-08-07","dir":"Changelog","previous_headings":"","what":"Version 6.0-0 (2017-08-07)","title":"Version 6.0-0 (2017-08-07)","text":"CRAN release: 2017-08-15 Updated data 2016 season","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-50-0-2016-08-08","dir":"Changelog","previous_headings":"","what":"Version 5.0-0 (2016-08-08)","title":"Version 5.0-0 (2016-08-08)","text":"CRAN release: 2016-08-27 Updated data 2015 season, plus numerous corrections errors inconsistencies discovered previous tables. Documentation examples now provided data tables [Martin Monkman] Documentation examples rewritten make extensive use dplyr data manipulation ggplot2 graphics [Denis Murphy]","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-40-1-2015-09-04","dir":"Changelog","previous_headings":"","what":"Version 4.0-1 (2015-09-04)","title":"Version 4.0-1 (2015-09-04)","text":"CRAN release: 2015-09-15 Updated data 2014 season Removed Batting: G_batting, G_old Replaced SchoolsPlayers CollegePlaying","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-30-0-2014-07-20","dir":"Changelog","previous_headings":"","what":"Version 3.0-0 (2014-07-20)","title":"Version 3.0-0 (2014-07-20)","text":"Updated data 2013 season HallOfFame$hofID now HallOfFame$playerID managerID now playerID tables Removed Master: managerID, hofID, holtzID, lahmanID, lahman40ID, lahman45ID, nameNote, nameNick, college","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-20-3-2013-05-29","dir":"Changelog","previous_headings":"","what":"Version 2.0-3 (2013-05-29)","title":"Version 2.0-3 (2013-05-29)","text":"CRAN release: 2013-06-01 largest RData files now compressed via R CMD build --resave-data","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-20-2-2013-05-23","dir":"Changelog","previous_headings":"","what":"Version 2.0-2 (2013-05-23)","title":"Version 2.0-2 (2013-05-23)","text":"Fixed problems Teams*.RDatafiles updated 2012 Versions. project package now web page http://lahman.r-forge.r-project.org/","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-20-1-2013-04-18","dir":"Changelog","previous_headings":"","what":"Version 2.0-1 (2013-04-18)","title":"Version 2.0-1 (2013-04-18)","text":"CRAN release: 2013-04-25 Added Label() data frames variable labels Added examples plots Salaries, Pitching, etc. Dennis Murphy Master$bats, Master$throws` made factors Added examples Schools.Rd","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-20-0-2013-04-08","dir":"Changelog","previous_headings":"","what":"Version 2.0-0 (2013-04-08)","title":"Version 2.0-0 (2013-04-08)","text":"New major version, now reflecting 2012 Lahman database. deprecated defunct tables dropped. readLahman.R added inst/scripts documentation data files created. scripts can used simplify future updates. examples added various datasets","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-10-10-2012-10-04","dir":"Changelog","previous_headings":"","what":"Version 1.0-10 (2012-10-04)","title":"Version 1.0-10 (2012-10-04)","text":"CRAN release: 2012-10-05 Fixed deprecated warnings stemming changes ggplot2","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-10-8-2011-10-02","dir":"Changelog","previous_headings":"","what":"Version 1.0-8 (2011-10-02)","title":"Version 1.0-8 (2011-10-02)","text":"CRAN release: 2011-10-08 Added examples HallOfFame.Rd Fixed definitions BABIP OBP battingStats() Added examples Manager.Rd","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-10-7-2011-09-27","dir":"Changelog","previous_headings":"","what":"Version 1.0-7 (2011-09-27)","title":"Version 1.0-7 (2011-09-27)","text":"CRAN release: 2011-09-30 Extended examples Batting.Rd Initial release CRAN","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-10-6-2011-09-26","dir":"Changelog","previous_headings":"","what":"Version 1.0-6 (2011-09-26)","title":"Version 1.0-6 (2011-09-26)","text":"Added battingStats() function calculate BA friends","code":""},{"path":"http://cdalzell.github.io/Lahman/news/index.html","id":"version-10-5-2011-09-25","dir":"Changelog","previous_headings":"","what":"Version 1.0-5 (2011-09-25)","title":"Version 1.0-5 (2011-09-25)","text":"Added Authors@R DESCRIPTION R 2.14.x Fixed Appearances table Added demo/batting-summstats.R Added examples various files Initial export R-Forge","code":""}]
